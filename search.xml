<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>目录</title>
      <link href="cklx5olsh0001u4nvgmzh213w/"/>
      <url>cklx5olsh0001u4nvgmzh213w/</url>
      
        <content type="html"><![CDATA[<h3 id="一-个人项目"><a href="#一-个人项目" class="headerlink" title="一.个人项目"></a>一.个人项目</h3><p><strong><a href="https://github.com/itemuse/XLib" target="_blank" rel="noopener">工具Jar</a></strong><br><a href="https://jitpack.io/#itemuse/XLib" target="_blank" rel="noopener"><img src="https://jitpack.io/v/itemuse/XLib.svg" alt=""></a></p><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/app/XApplication.java" target="_blank" rel="noopener">app</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/array/XArray.java" target="_blank" rel="noopener">Array</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/navigationbar/XNavigationBar.java" target="_blank" rel="noopener">NavigationBar</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/systemui/XSystemUI.java" target="_blank" rel="noopener">SystemUi</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFile.java" target="_blank" rel="noopener">File</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFileIO.java" target="_blank" rel="noopener">FileIO</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/fragment/XFragment.java" target="_blank" rel="noopener">Fragment</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/image/XImage.java" target="_blank" rel="noopener">Image</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/log/XLog.java" target="_blank" rel="noopener">Log</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/map/XMap.java" target="_blank" rel="noopener">Map</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/network/XNetwork.java" target="_blank" rel="noopener">Network</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/permissions/XPermission.java" target="_blank" rel="noopener">Permission</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/resource/XResource.java" target="_blank" rel="noopener">Resource</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/screen/XScreen.java" target="_blank" rel="noopener">Screen</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sdcard/XSDCard.java" target="_blank" rel="noopener">SDCard</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">Service</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sharedpreferences/XSPUtils.java" target="_blank" rel="noopener">sharedpreferences</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/size/XSize.java" target="_blank" rel="noopener">Size</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/string/XString.java" target="_blank" rel="noopener">String</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/tab/XTab.java" target="_blank" rel="noopener">Tab</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/thread/XThread.java" target="_blank" rel="noopener">Thread</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/time/XTime.java" target="_blank" rel="noopener">Time</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/toast/XToast.java" target="_blank" rel="noopener">Toast</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/zip/XZip.java" target="_blank" rel="noopener">Zip</a></li></ul><p><strong>独立项目</strong></p><ul><li><a href="https://github.com/itemuse/XMusic" target="_blank" rel="noopener">XMusic</a></li><li><a href="https://github.com/itemuse/XVideo" target="_blank" rel="noopener">XVideo</a></li><li><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP框架</a></li><li><a href="https://github.com/itemuse/ExpandableListView" target="_blank" rel="noopener">ExpandableListView</a></li></ul><h3 id="二-官方手册"><a href="#二-官方手册" class="headerlink" title="二.官方手册"></a>二.官方手册</h3><ul><li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">developers</a></li></ul><h3 id="三-API收集"><a href="#三-API收集" class="headerlink" title="三.API收集"></a>三.API收集</h3><p><strong>测滑返回SwipeBackLayout</strong></p><ul><li><a href="https://qibilly.com/SmartSwipe-tutorial/" target="_blank" rel="noopener">SmartSwipe</a></li></ul><p><strong>沉浸式状态栏和导航栏</strong></p><ul><li><a href="https://github.com/gyf-dev/ImmersionBar" target="_blank" rel="noopener">ImmersionBar</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二级选择框使用笔记</title>
      <link href="cklx5olso0008u4nv2b86by1b/"/>
      <url>cklx5olso0008u4nv2b86by1b/</url>
      
        <content type="html"><![CDATA[<h3 id="一-效果图："><a href="#一-效果图：" class="headerlink" title="一.效果图："></a>一.效果图：</h3><p><img src="device.gif" alt="image"></p><h3 id="二-源码传送门："><a href="#二-源码传送门：" class="headerlink" title="二.源码传送门："></a>二.源码传送门：</h3><p><a href="https://github.com/itemuse/ExpandableListView" target="_blank" rel="noopener">ExpandableListView</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="三-主要方法及监听器"><a href="#三-主要方法及监听器" class="headerlink" title="三.主要方法及监听器"></a>三.主要方法及监听器</h3><ul><li><p><strong>collapseGroup( int position)</strong><br>收起 position 位置的分组</p></li><li><p><strong>expandGroup(int position)</strong><br>展开position位置的分组</p></li><li><p><strong>isGroupExpanded(int position)</strong><br>判断position位置的分组是否展开</p></li><li><p><strong>setAdapter(ExpandableListAdapter adapter)</strong><br>给ExpandableListView 设置适配器</p></li><li><p><strong>setOnChildClickListener(OnChildClickListener listener)</strong><br>设置分组中子条目的点击监听器</p></li><li><p><strong>setOnGroupClickListener(OnGroupClickListener listener)</strong><br>设置分组的点击监听器</p></li><li><p><strong>setOnGroupCollapseListener(OnGroupCollapseListener listener)</strong><br>设置分组收起的监听器</p></li><li><p><strong>setOnGroupExpandListener(OnGroupExpandListener listener)</strong><br>设置分组展开的监听器</p></li></ul><h3 id="四-几个XML属性"><a href="#四-几个XML属性" class="headerlink" title="四.几个XML属性"></a>四.几个XML属性</h3><ul><li><p><strong>android:groupIndicator</strong><br>组指示器，取值可以是任意的Drawable对象。显示在 该分组的最左侧。如果不设置的话，默认是一个向下的箭头，点击展开内容之后会变成向上的箭头</p></li><li><p><strong>android:childIndicator</strong><br>子条目指示器，取值可以是任意的Drawable 对象。显示在分组中的每一个 子条目 的最左侧。没有默认图标。</p></li></ul><h3 id="五-用法"><a href="#五-用法" class="headerlink" title="五.用法"></a>五.用法</h3><ul><li><strong>首先要准备好要填充的一级列表的的数据和对应的二级列表数据</strong><br>demo一级列表一共是三个选项<br>所以会有三个子选项的选项集合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ParentList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.parent_item))&#123;</span><br><span class="line">    ParentList.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_1))&#123;</span><br><span class="line">    childLists1.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists2 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_2))&#123;</span><br><span class="line">    childLists2.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists3 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_3))&#123;</span><br><span class="line">    childLists3.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ChildLists &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">ChildLists.add(childLists1);</span><br><span class="line">ChildLists.add(childLists2);</span><br><span class="line">ChildLists.add(childLists3);</span><br></pre></td></tr></table></figure><ul><li><strong>把准备好的一级二级数据传入adapter</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mExpandableListView &#x3D; dialogView.findViewById(R.id.expandablelistview);</span><br><span class="line">final MultistageAdapter moAdapter &#x3D; new MultistageAdapter(this,ParentList, ChildLists, mParentmValue, mChildValue);</span><br><span class="line">mExpandableListView.setAdapter(moAdapter);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><strong>监听点击事件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;一级选项点击回调</span><br><span class="line">mExpandableListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) &#123;</span><br><span class="line">        mParentmValue2 &#x3D;  groupPosition;</span><br><span class="line">        mChildValue2 &#x3D; 0;</span><br><span class="line">        moAdapter.notifyDataSetChanged(mParentmValue2,mChildValue2); &#x2F;&#x2F;更新选中状态</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;二级选项点击回调</span><br><span class="line">mExpandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onChildClick(ExpandableListView parent, View v, int reverseTypePosition, int reverseCisPosition, long id) &#123;</span><br><span class="line">        mParentmValue2 &#x3D;  reverseTypePosition;</span><br><span class="line">        mChildValue2 &#x3D;  reverseCisPosition;</span><br><span class="line">        moAdapter.notifyDataSetChanged(mParentmValue2,mChildValue2);&#x2F;&#x2F;更新选中状态</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>确认框中处理</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void showConfirmDialog()&#123;</span><br><span class="line">    final AlertDialog.Builder normalDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    final String value &#x3D; ParentList.get(mParentmValue2)+&quot;&#x2F;&quot;+ChildLists.get(mParentmValue2).get(mChildValue);</span><br><span class="line">    normalDialog.setTitle(value);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;OK&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    mParentmValue &#x3D;  mParentmValue2;</span><br><span class="line">                    mChildValue &#x3D;  mChildValue2;</span><br><span class="line">                    Toast.makeText(getApplicationContext(),value,Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    ...</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ExpandableListView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVP框架示例讲解</title>
      <link href="cklx5olsy000ou4nvcvse9ohz/"/>
      <url>cklx5olsy000ou4nvcvse9ohz/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><p><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="二-主要代码介绍"><a href="#二-主要代码介绍" class="headerlink" title="二.主要代码介绍"></a>二.主要代码介绍</h3><ul><li><strong>MActivity.class</strong><br>抽象MActivity代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MActivity&lt;P extends BasePresenter&gt; extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    public P mPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState)&#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart()&#123;</span><br><span class="line">        super.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">       super.onResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">      if(mPresenter !&#x3D; null)&#123;</span><br><span class="line">         mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">         mPresenter&#x3D;null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BaseActivity.class</strong><br>BaseActivity继承MActivity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseActivity extends MActivity&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MainActivity.class</strong><br>应用的MainActivity继承BaseActivity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends BaseActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        XService.startService(TestService.class);</span><br><span class="line">        XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">        XLog.i(&quot;Acticity持有的P: &quot;+mPresenter);</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MService.class</strong><br>抽象MService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MService&lt; P extends BasePresenter&gt; extends Service &#123;</span><br><span class="line"></span><br><span class="line">   private static final String TAG &#x3D; &quot;XService&quot;;</span><br><span class="line">   public P mPresenter;</span><br><span class="line"></span><br><span class="line">   protected void initView()&#123;</span><br><span class="line">      if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">         mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">         if (this instanceof BaseView)&#123;</span><br><span class="line">            mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public IBinder onBind(Intent intent) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      initView();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">      return super.onStartCommand(intent, flags, startId);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onDestroy() &#123;</span><br><span class="line">      super.onDestroy();</span><br><span class="line">      mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">      mPresenter&#x3D;null;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BaseService.class</strong></li></ul><p>BaseService继承自MService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseService extends MService&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TestService.class</strong><br>应用的TestService继承BaseService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestService extends BaseService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">        XLog.i(&quot;Service持有的P: &quot;+mPresenter);</span><br><span class="line">        XLog.i(mPresenter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BasePresenter.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePresenter&lt;V extends BaseView, M extends BaseModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public Context mContext;</span><br><span class="line">    private WeakReference&lt;V&gt; mWeakReference;</span><br><span class="line">    public M mModel;</span><br><span class="line">    public Handler mHandler &#x3D; new Handler();</span><br><span class="line">    public BasePresenter(Context context) &#123;</span><br><span class="line">        this.mContext&#x3D;context;</span><br><span class="line">        mModel &#x3D; getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 model，实现该抽象类的子类必须实现此方法，之后就可以使用 mModel操作Model层业务逻辑</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract M getModel();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将 view 添加到弱引用中</span><br><span class="line">     * @param view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void add(V view) &#123;</span><br><span class="line">        mWeakReference &#x3D; new WeakReference&lt;V&gt;(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取弱引用中的 view</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public V get() &#123;</span><br><span class="line">        return mWeakReference &#x3D;&#x3D; null ? null : mWeakReference.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除弱引用中的 view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        if (mWeakReference !&#x3D; null) &#123;</span><br><span class="line">            mWeakReference.clear();</span><br><span class="line">            mWeakReference &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onDestroy()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Presenter.class</strong><br>Presenter则继承BasePresenter</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Presenter extends BasePresenter&lt;View, Model&gt; implements View&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-启动流程："><a href="#三-启动流程：" class="headerlink" title="三.启动流程："></a>三.启动流程：</h3><ul><li><strong>MainActivity启动</strong><br>创建时会创建并持有一个Presenter<br>Presenter.class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...   </span><br><span class="line"> protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Presenter构建方法中会持有单例model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">@Override</span><br><span class="line">public Model getModel() &#123;</span><br><span class="line">    return Model.getInstant();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>紧接着调用Presenter的onCreate会将View传入Model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onCreate()&#123;</span><br><span class="line">    mModel.onCreate();</span><br><span class="line">    addView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addView()&#123;</span><br><span class="line">    mModel.setViews(this);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加到Model的Views集合<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static ArrayList&lt;View&gt; mViews&#x3D;new ArrayList&lt;View&gt;();</span><br><span class="line">...</span><br><span class="line">public void setViews(View mPV)&#123;</span><br><span class="line">    XLog.i(&quot;Model中增加P&quot;+mPV);</span><br><span class="line">    mViews.add(mPV);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45.831  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @26f08e</span><br><span class="line">45.832  I&#x2F;Model.java: [ (Model.java:27)#onCreate ] execute</span><br><span class="line">45.847  I&#x2F;Model.java: [ (Model.java:36)#onResume ] execute</span><br><span class="line">45.849  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@26f08e</span><br></pre></td></tr></table></figure><p>此时单例Model和Activity的Presenter就创建起来，Model中的生产出的值就会通过接口传出到Activity中<br>紧接着Activity启动并绑定Service</p><ul><li><strong>Service启动</strong><br>同理过程中也会创建一个Service的Presenter，紧接着Presenter也会把View添加到单例model的Views中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">45.900  I&#x2F;TestService.java: [ (TestService.java:21)#onCreate ] Service持有的P_id: @1a5879a</span><br><span class="line">45.901  I&#x2F;TestService.java: [ (TestService.java:22)#onCreate ] @1a5879a</span><br><span class="line">45.903  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@1a5879a</span><br></pre></td></tr></table></figure><p>此时MVP框架的应用就创建完成，此时存活着一个Activity和对应的Presenter，一个Service和对应的Presenter，一个Model</p><h3 id="四-运行"><a href="#四-运行" class="headerlink" title="四.运行"></a>四.运行</h3><p>Model中生产的值通过遍历View分别传出<br>Model.class<br>我简单创建了一个Handler，每秒+1，并值传出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">private mHandler handler;</span><br><span class="line">private int i &#x3D; 0;</span><br><span class="line">private class mHandler extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        super.handleMessage(msg);</span><br><span class="line">        handler.removeMessages(0x01);</span><br><span class="line">        handler.sendEmptyMessageDelayed(0x01,1000);</span><br><span class="line">        ++i;</span><br><span class="line">        for (View mView : mViews) &#123;</span><br><span class="line">            XLog.i(mView+&quot; 发送传出处理的值：&quot;+i);</span><br><span class="line">            mView.onTime(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>该值首先会通过View传到对应的Presenter，紧接着传出到实现了View方法的Activity和Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onTime(int position) &#123;</span><br><span class="line">    get().onTime(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到来着Model的数据<br>MVP的特性才展现出来<br>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">45.915  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：1</span><br><span class="line">45.918  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：1</span><br><span class="line">45.920  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：1</span><br><span class="line">45.924  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：1</span><br><span class="line"></span><br><span class="line">46.918  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：2</span><br><span class="line">46.920  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：2</span><br><span class="line">46.925  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：2</span><br><span class="line">46.926  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：2</span><br><span class="line"></span><br><span class="line">47.922  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：3</span><br><span class="line">47.923  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：3</span><br><span class="line">47.927  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：3</span><br><span class="line">47.928  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：3</span><br></pre></td></tr></table></figure><h3 id="五-灵活添加和移除view"><a href="#五-灵活添加和移除view" class="headerlink" title="五.灵活添加和移除view"></a>五.灵活添加和移除view</h3><ul><li><strong>移除</strong><br>当Activity销毁时，通过onDestroy的方法除Model中对应Presenter的View，防止泄漏<br>Model.class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52:03.088  I&#x2F;Model.java: [ (Model.java:49)#onDestroy ] Model中去除P_id: @170acea</span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong><br>当Activity再次创建时，model中会再增加其新的对应Presenter的View</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">52:07.186  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @b79a950</span><br><span class="line">52:07.207  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P_id: @b79a950</span><br></pre></td></tr></table></figure><p>当不再有Presenter持有Model时，Model会被释放<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    if (mViews.size()&#x3D;&#x3D;0)&#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public final void clear() &#123;</span><br><span class="line">    handler.removeMessages(0x01);</span><br><span class="line">    handler &#x3D; null;</span><br><span class="line">    mModel &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="六-补充BaseActivity和BaseService"><a href="#六-补充BaseActivity和BaseService" class="headerlink" title="六.补充BaseActivity和BaseService"></a>六.补充BaseActivity和BaseService</h3><p>是属于逻辑层的两个方法，用于逻辑与界面分离时，当逻辑层添加了新的接口时，界面并不需要，或者没来得及实现时，在逻辑层的BaseActivity和BaseService中添加了接口，界面层就不需要去实现。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSpanned使用笔记</title>
      <link href="cklx5olsm0006u4nvhpj4bdmp/"/>
      <url>cklx5olsm0006u4nvhpj4bdmp/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-使用"><a href="#二-使用" class="headerlink" title="二.使用"></a>二.使用</h3><ul><li><strong>初始化</strong><br>把textview控件传过去即可<br>append传入要显示的字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TextView mTextview &#x3D; findViewById(R.id.text);</span><br><span class="line">SpanUtils.with(mTextview)</span><br><span class="line">        .append(getString(R.string.text)) </span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure><ul><li><strong>设置字体大小</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;X&quot;)</span><br><span class="line">.setFontSize(50)</span><br><span class="line">.append(&quot;Y&quot;)</span><br><span class="line">.setFontSize(150)</span><br><span class="line">.append(&quot;Z&quot;)</span><br><span class="line">.setFontSize(20)</span><br></pre></td></tr></table></figure><p><img src="Image1.png" alt="iamge"></p><ul><li><strong>前景色、背景色</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setForegroundColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image2.png" alt="iamge"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setBackgroundColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image3.png" alt="iamge"></p><ul><li><strong>设置引用线颜色</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setQuoteColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image4.png" alt="iamge"></p><ul><li><strong>设置缩进</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setLeadingMargin(50, &#x2F;*第一行缩进值*&#x2F; 0 &#x2F;*其余行缩进值*&#x2F;)</span><br></pre></td></tr></table></figure><p>设置前<br><img src="Image5.png" alt="iamge"><br>设置后<br><img src="Image6.png" alt="iamge"></p><ul><li><strong>设置行高</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    public static final int ALIGN_BOTTOM   &#x3D; 0;</span><br><span class="line">    public static final int ALIGN_BASELINE &#x3D; 1;</span><br><span class="line">    public static final int ALIGN_CENTER   &#x3D; 2;</span><br><span class="line">    public static final int ALIGN_TOP      &#x3D; 3;</span><br><span class="line">*&#x2F;</span><br><span class="line">.setLineHeight(100&#x2F;*行高*&#x2F;,SpanUtils.ALIGN_CENTER&#x2F;*重心*&#x2F;)</span><br></pre></td></tr></table></figure><p>设置前<br><img src="Image7.png" alt="iamge"><br>设置后<br><img src="Image8.png" alt="iamge"></p><ul><li><strong>字体比例</strong><br>修改前：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.append(getString(R.string.text))</span><br></pre></td></tr></table></figure><p><img src="Image9.png" alt="iamge"><br>修改后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontProportion((float) 1.9) &#x2F;&#x2F;整体比例</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontXProportion((float) 1.5)&#x2F;&#x2F;宽度比例</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontXProportion((float) 0.3)&#x2F;&#x2F;宽度比例</span><br></pre></td></tr></table></figure><p><img src="Image10.png" alt="iamge"></p><ul><li><strong>删除线、下划线</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setStrikethrough() &#x2F;&#x2F;删除线</span><br></pre></td></tr></table></figure><p><img src="Image11.png" alt="iamge"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setUnderline() &#x2F;&#x2F;下划线</span><br></pre></td></tr></table></figure><p><img src="Image12.png" alt="iamge"></p><ul><li><strong>设置粗体、斜体</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBold()           &#x2F;&#x2F;设置粗体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setItalic()         &#x2F;&#x2F;设置斜体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBoldItalic()     &#x2F;&#x2F;设置粗斜体</span><br></pre></td></tr></table></figure><p><img src="Image13.png" alt="iamge"></p><ul><li><strong>设置字体</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.DEFAULT_BOLD)       &#x2F;&#x2F;设置字体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.SANS_SERIF)       &#x2F;&#x2F;设置字体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.SERIF)       &#x2F;&#x2F;设置字体</span><br></pre></td></tr></table></figure><p><img src="Image14.png" alt="iamge"></p><ul><li><strong>设置单独点击事件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;点击事件1&quot;)</span><br><span class="line">.setClickSpan(new ClickableSpan() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        XLog.i(&quot;&#x2F;&#x2F;设置点击事件1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)      &#x2F;&#x2F;设置点击事件</span><br><span class="line">.append(&quot;点击事件2&quot;)</span><br><span class="line">.setClickSpan(getColor(R.color.colorAccent4),true, new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        XLog.i(&quot;&#x2F;&#x2F;设置点击事件2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)      &#x2F;&#x2F;设置点击事件</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-01-12 00:29:12.802 13577-13577&#x2F;com.softwinner.app I&#x2F;MainActivity.java: [ (MainActivity.java:75)#onClick ] &#x2F;&#x2F;设置点击事件1</span><br><span class="line">2021-01-12 00:29:13.190 13577-13577&#x2F;com.softwinner.app I&#x2F;MainActivity.java: [ (MainActivity.java:82)#onClick ] &#x2F;&#x2F;设置点击事件2</span><br></pre></td></tr></table></figure><ul><li><strong>超链接</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setUrl(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)            &#x2F;&#x2F;设置超链接</span><br></pre></td></tr></table></figure><p><img src="Image15.png" alt="iamge"><br>点击会跳转浏览器<br><img src="Image16.png" alt="iamge"></p><ul><li><p><strong>设置模糊</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.SOLID)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.OUTER)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.INNER)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.NORMAL)           &#x2F;&#x2F;设置模糊</span><br></pre></td></tr></table></figure><p><img src="Image17.png" alt="iamge"></p></li><li><p><strong>设置阴影</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setShadow(15,5,5,getColor(R.color.colorAccent1))         &#x2F;&#x2F;设置阴影</span><br></pre></td></tr></table></figure><p><img src="Image18.png" alt="iamge"></p><ul><li><strong>追加图片</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;追加图片&quot;)</span><br><span class="line">.appendImage(R.drawable.ic_launcher_background,SpanUtils.ALIGN_BOTTOM)       &#x2F;&#x2F;追加图片</span><br></pre></td></tr></table></figure><p><img src="Image19.png" alt="iamge"></p><ul><li><strong>追加空格</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;追加图片&quot;)</span><br><span class="line">.appendSpace(20)       &#x2F;&#x2F;追加空白</span><br><span class="line">.append(&quot;追加图片&quot;)</span><br></pre></td></tr></table></figure><p><img src="Image20.png" alt="iamge"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Spanned </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XService使用笔记</title>
      <link href="cklx5olsk0003u4nvgxhtdxzs/"/>
      <url>cklx5olsk0003u4nvgxhtdxzs/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><p><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">Service</a><br><a href="https://github.com/itemuse/XMusic/blob/master/app/src/main/java/com/tw/music/MusicService.java" target="_blank" rel="noopener">MusicService.java</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="二-使用方法"><a href="#二-使用方法" class="headerlink" title="二.使用方法"></a>二.使用方法</h3><ul><li><strong>启动服务</strong><br>提供三种传参启动方法<br><img src="Image1.png" alt="image"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XService.startService(TestService.class);</span><br><span class="line">XService.startService(new Intent(this,TestService.class));</span><br><span class="line">XService.startService(&quot;com.xy.app.TestService&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* Start the service.</span><br><span class="line">*</span><br><span class="line">* @param intent The intent.</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void startService(Intent intent) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O) &#123;</span><br><span class="line">            XApp.getApp().startForegroundService(intent);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            XApp.getApp().startService(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>停止服务</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XService.stopService(TestService.class);</span><br><span class="line">XService.stopService(new Intent(this,TestService.class));</span><br><span class="line">XService.unbindService(mConnection);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Stop the service.</span><br><span class="line"> *</span><br><span class="line"> * @param intent The intent.</span><br><span class="line"> * @return &#123;@code true&#125;: success&lt;br&gt;&#123;@code false&#125;: fail</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean stopService(@NonNull Intent intent) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return XApp.getApp().stopService(intent);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>*绑定服务</em><br><img src="Image2.png" alt="image"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">XService.bindService(&quot;com.softwinner.app.TestService&quot;,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">XService.bindService(new Intent(this,TestService.class),mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line"></span><br><span class="line">private ServiceConnection mConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><em>*绑定服务</em></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XService.unbindService(mConnection);</span><br></pre></td></tr></table></figure><ul><li><strong>查询存活服务</strong></li></ul><p>目前测试的情况，5.0 6.0 7.0可以查询到所有系统存货的服务，8.0 9.0 10.0上只可以查询到本进程的服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;String&gt; getAllRunningServices() &#123;</span><br><span class="line">    ActivityManager am &#x3D; (ActivityManager) App.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">    List&lt;RunningServiceInfo&gt; info &#x3D; am.getRunningServices(0x7FFFFFFF);</span><br><span class="line">    Set&lt;String&gt; names &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">    if (info &#x3D;&#x3D; null || info.size() &#x3D;&#x3D; 0) return null;</span><br><span class="line">    for (RunningServiceInfo aInfo : info) &#123;</span><br><span class="line">        names.add(aInfo.service.getClassName());</span><br><span class="line">    &#125;</span><br><span class="line">    return names;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>查询服务是否存活</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isServiceRunning(@NonNull final String className) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ActivityManager am &#x3D; (ActivityManager) App.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        List&lt;RunningServiceInfo&gt; info &#x3D; am.getRunningServices(0x7FFFFFFF);</span><br><span class="line">        if (info &#x3D;&#x3D; null || info.size() &#x3D;&#x3D; 0) return false;</span><br><span class="line">        for (RunningServiceInfo aInfo : info) &#123;</span><br><span class="line">            if (className.equals(aInfo.service.getClassName())) return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; catch (Exception ignore) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>使用service注意</strong><br>使用了startservice，也用了bindservice的情况下启用一个服务。<br>未stopservice之前，unbindservice服务是不会被销毁。<br>未unbindservice之前，stopservice服务是不会被销毁的。</p></li><li><p><strong>前台服务和后台服务区别</strong></p></li></ul><div class="table-container"><table><thead><tr><th>前台服务</th><th>后台服务</th></tr></thead><tbody><tr><td>会在通知一栏显示 ONGOING 的 Notification，当服务被终止的时候，通知一栏的 Notification 也会消失，这样对于用户有一定的通知作用。常见的如音乐播放服务。</td><td>默认的服务即为后台服务，即不会在通知一栏显示 ONGOING 的 Notification。当服务被终止的时候，用户是看不到效果的。某些不需要运行或终止提示的服务，如天气更新，日期同步，邮件同步等。</td></tr></tbody></table></div><h3 id="三-8-0之后的服务"><a href="#三-8-0之后的服务" class="headerlink" title="三.8.0之后的服务"></a>三.8.0之后的服务</h3><ul><li><p>Android 8.0 之前<br>创建前台服务的方式通常是先创建一个后台服务，然后将该服务推到前台。</p></li><li><p>Android 8.0 之后<br>系统不允许后台应用创建后台服务。 引入了一种全新的方法，即 Context.startForegroundService()，以在前台启动新服务。</p></li></ul><p>在系统创建服务后，应用有五秒的时间来调用该服务的 startForeground() 方法以显示新服务的用户可见通知。</p><p>如果应用在此时间限制内未调用 startForeground()，则系统将停止服务并声明此应用为 ANR。</p><p>以我的音乐服务为例,在onStartCommand方法里增加一个Notification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MusicService extends MService&lt;MusicPresenter&gt; implements MusicView &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Notification.Builder builder &#x3D; new Notification.Builder(XApp.getApp());</span><br><span class="line">        Intent nfIntent &#x3D; new Intent(this, MusicActivity.class);</span><br><span class="line">        builder.setContentIntent(PendingIntent.</span><br><span class="line">                getActivity(this, 0, nfIntent, 0))</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(this.getResources(),R.drawable.ic_launcher))</span><br><span class="line">                .setContentTitle(&quot;微音正在后台运行&quot;)</span><br><span class="line">                .setSmallIcon(R.drawable.ic_launcher)</span><br><span class="line">                .setContentText(&quot;要显示的内容&quot;)</span><br><span class="line">                .setWhen(System.currentTimeMillis());</span><br><span class="line">        if (android.os.Build.VERSION.SDK_INT &gt;&#x3D; android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">            NotificationChannel notificationChannel &#x3D; new NotificationChannel(&quot;1&quot;, &quot;Name&quot;,NotificationManager.IMPORTANCE_MIN);</span><br><span class="line">            notificationChannel.enableLights(false);&#x2F;&#x2F;如果使用中的设备支持通知灯，则说明此通知通道是否应显示灯</span><br><span class="line">            notificationChannel.setShowBadge(false);&#x2F;&#x2F;是否显示角标</span><br><span class="line">            notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_SECRET);</span><br><span class="line">            NotificationManager manager &#x3D; (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">            manager.createNotificationChannel(notificationChannel);</span><br><span class="line">            builder.setChannelId(&quot;1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Notification notification &#x3D; builder.build(); &#x2F;&#x2F; 获取构建好的Notification</span><br><span class="line">        notification.defaults &#x3D; Notification.DEFAULT_SOUND; &#x2F;&#x2F;设置为默认的声音</span><br><span class="line">        &#x2F;&#x2F; 参数一：唯一的通知标识；参数二：通知消息。</span><br><span class="line">         startForeground(110, notification);&#x2F;&#x2F; 开始前台服务</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<br>Android O 后台应用想启动服务就老老实实的加个notification给用户看，表示你自己在后台占着资源，杀不杀由用户决定，偷偷地在后台跑没有framework帮忙想都别想，一个anr+crash套餐了解一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- activity： Context.startForegroundService() </span><br><span class="line">- Service：startForeground(int id, Notification notification)（id must not be 0）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> xlib </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
