<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>目录</title>
      <link href="cklwiib7q0006ngnv58f763u1/"/>
      <url>cklwiib7q0006ngnv58f763u1/</url>
      
        <content type="html"><![CDATA[<h3 id="个人项目"><a href="#个人项目" class="headerlink" title="个人项目"></a>个人项目</h3><h4 id="XLib"><a href="#XLib" class="headerlink" title="XLib"></a><a href="https://github.com/itemuse/XLib" target="_blank" rel="noopener">XLib</a></h4><p><a href="https://jitpack.io/#itemuse/XLib" target="_blank" rel="noopener"><img src="https://jitpack.io/v/itemuse/XLib.svg" alt=""></a></p><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/app/XApplication.java" target="_blank" rel="noopener">app</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/array/XArray.java" target="_blank" rel="noopener">Array</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/navigationbar/XNavigationBar.java" target="_blank" rel="noopener">NavigationBar</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/systemui/XSystemUI.java" target="_blank" rel="noopener">SystemUi</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFile.java" target="_blank" rel="noopener">File</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFileIO.java" target="_blank" rel="noopener">FileIO</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/fragment/XFragment.java" target="_blank" rel="noopener">Fragment</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/image/XImage.java" target="_blank" rel="noopener">Image</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/log/XLog.java" target="_blank" rel="noopener">Log</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/map/XMap.java" target="_blank" rel="noopener">Map</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/network/XNetwork.java" target="_blank" rel="noopener">Network</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/permissions/XPermission.java" target="_blank" rel="noopener">Permission</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/resource/XResource.java" target="_blank" rel="noopener">Resource</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/screen/XScreen.java" target="_blank" rel="noopener">Screen</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sdcard/XSDCard.java" target="_blank" rel="noopener">SDCard</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">Service</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sharedpreferences/XSPUtils.java" target="_blank" rel="noopener">sharedpreferences</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/size/XSize.java" target="_blank" rel="noopener">Size</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/string/XString.java" target="_blank" rel="noopener">String</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/tab/XTab.java" target="_blank" rel="noopener">Tab</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/thread/XThread.java" target="_blank" rel="noopener">Thread</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/time/XTime.java" target="_blank" rel="noopener">Time</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/toast/XToast.java" target="_blank" rel="noopener">Toast</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/zip/XZip.java" target="_blank" rel="noopener">Zip</a></li></ul><h4 id="XApp"><a href="#XApp" class="headerlink" title="XApp"></a>XApp</h4><ul><li><a href="https://github.com/itemuse/XMusic" target="_blank" rel="noopener">XMusic</a></li><li><a href="https://github.com/itemuse/XVideo" target="_blank" rel="noopener">XVideo</a></li><li><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP框架</a></li><li><a href="https://github.com/itemuse/XRadio" target="_blank" rel="noopener">XRadio</a></li><li><a href="https://github.com/itemuse/XEQ" target="_blank" rel="noopener">XEQ</a></li></ul><h3 id="官方手册"><a href="#官方手册" class="headerlink" title="官方手册"></a>官方手册</h3><ul><li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">developers</a></li></ul><h3 id="API收集"><a href="#API收集" class="headerlink" title="API收集"></a>API收集</h3><h4 id="测滑返回SwipeBackLayout"><a href="#测滑返回SwipeBackLayout" class="headerlink" title="测滑返回SwipeBackLayout"></a>测滑返回SwipeBackLayout</h4><ul><li><a href="https://qibilly.com/SmartSwipe-tutorial/" target="_blank" rel="noopener">SmartSwipe</a></li></ul><h4 id="沉浸式状态栏和导航栏"><a href="#沉浸式状态栏和导航栏" class="headerlink" title="沉浸式状态栏和导航栏"></a>沉浸式状态栏和导航栏</h4><ul><li><a href="https://github.com/gyf-dev/ImmersionBar" target="_blank" rel="noopener">ImmersionBar</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVP框架示例讲解</title>
      <link href="cklwiib7n0004ngnv13st5jgf/"/>
      <url>cklwiib7n0004ngnv13st5jgf/</url>
      
        <content type="html"><![CDATA[<h3 id="源码传送门："><a href="#源码传送门：" class="headerlink" title="源码传送门："></a>源码传送门：</h3><p><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP</a><br>此文是在基础上做的讲解,用于加深对此框架的印象</p><h3 id="主要代码介绍"><a href="#主要代码介绍" class="headerlink" title="主要代码介绍"></a>主要代码介绍</h3><h4 id="MActivity-class"><a href="#MActivity-class" class="headerlink" title="MActivity.class"></a>MActivity.class</h4><p>抽象MActivity代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MActivity&lt;P extends BasePresenter&gt; extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    public P mPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState)&#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart()&#123;</span><br><span class="line">        super.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">       super.onResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">      if(mPresenter !&#x3D; null)&#123;</span><br><span class="line">         mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">         mPresenter&#x3D;null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="BaseActivity-class"><a href="#BaseActivity-class" class="headerlink" title="BaseActivity.class"></a>BaseActivity.class</h4><p>BaseActivity继承MActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseActivity extends MActivity&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用的MainActivity继承BaseActivity<br>MainActivity.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends BaseActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        XService.startService(TestService.class);</span><br><span class="line">        XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">        XLog.i(&quot;Acticity持有的P: &quot;+mPresenter);</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MService-class"><a href="#MService-class" class="headerlink" title="MService.class"></a>MService.class</h4><p>抽象MService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MService&lt; P extends BasePresenter&gt; extends Service &#123;</span><br><span class="line"></span><br><span class="line">   private static final String TAG &#x3D; &quot;XService&quot;;</span><br><span class="line">   public P mPresenter;</span><br><span class="line"></span><br><span class="line">   protected void initView()&#123;</span><br><span class="line">      if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">         mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">         if (this instanceof BaseView)&#123;</span><br><span class="line">            mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public IBinder onBind(Intent intent) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      initView();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">      return super.onStartCommand(intent, flags, startId);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onDestroy() &#123;</span><br><span class="line">      super.onDestroy();</span><br><span class="line">      mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">      mPresenter&#x3D;null;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BaseService-class"><a href="#BaseService-class" class="headerlink" title="BaseService.class"></a>BaseService.class</h4><p>BaseService继承自MService<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseService extends MService&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应用的TestService继承BaseService<br>TestService.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestService extends BaseService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">        XLog.i(&quot;Service持有的P: &quot;+mPresenter);</span><br><span class="line">        XLog.i(mPresenter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BasePresenter-class"><a href="#BasePresenter-class" class="headerlink" title="BasePresenter.class"></a>BasePresenter.class</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePresenter&lt;V extends BaseView, M extends BaseModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public Context mContext;</span><br><span class="line">    private WeakReference&lt;V&gt; mWeakReference;</span><br><span class="line">    public M mModel;</span><br><span class="line">    public Handler mHandler &#x3D; new Handler();</span><br><span class="line">    public BasePresenter(Context context) &#123;</span><br><span class="line">        this.mContext&#x3D;context;</span><br><span class="line">        mModel &#x3D; getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 model，实现该抽象类的子类必须实现此方法，之后就可以使用 mModel操作Model层业务逻辑</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract M getModel();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将 view 添加到弱引用中</span><br><span class="line">     * @param view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void add(V view) &#123;</span><br><span class="line">        mWeakReference &#x3D; new WeakReference&lt;V&gt;(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取弱引用中的 view</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public V get() &#123;</span><br><span class="line">        return mWeakReference &#x3D;&#x3D; null ? null : mWeakReference.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除弱引用中的 view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        if (mWeakReference !&#x3D; null) &#123;</span><br><span class="line">            mWeakReference.clear();</span><br><span class="line">            mWeakReference &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onDestroy()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Presenter-class"><a href="#Presenter-class" class="headerlink" title="Presenter.class"></a>Presenter.class</h4><p>Presenter则继承BasePresenter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Presenter extends BasePresenter&lt;View, Model&gt; implements View&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动流程："><a href="#启动流程：" class="headerlink" title="启动流程："></a>启动流程：</h3><h4 id="MainActivity启动"><a href="#MainActivity启动" class="headerlink" title="MainActivity启动"></a>MainActivity启动</h4><p>创建时会创建并持有一个Presenter<br>Presenter.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...   </span><br><span class="line"> protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>Presenter构建方法中会持有单例model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">@Override</span><br><span class="line">public Model getModel() &#123;</span><br><span class="line">    return Model.getInstant();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>紧接着调用Presenter的onCreate会将View传入Model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onCreate()&#123;</span><br><span class="line">    mModel.onCreate();</span><br><span class="line">    addView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addView()&#123;</span><br><span class="line">    mModel.setViews(this);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加到Model的Views集合<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static ArrayList&lt;View&gt; mViews&#x3D;new ArrayList&lt;View&gt;();</span><br><span class="line">...</span><br><span class="line">public void setViews(View mPV)&#123;</span><br><span class="line">    XLog.i(&quot;Model中增加P&quot;+mPV);</span><br><span class="line">    mViews.add(mPV);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45.831  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @26f08e</span><br><span class="line">45.832  I&#x2F;Model.java: [ (Model.java:27)#onCreate ] execute</span><br><span class="line">45.847  I&#x2F;Model.java: [ (Model.java:36)#onResume ] execute</span><br><span class="line">45.849  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@26f08e</span><br></pre></td></tr></table></figure><p>此时单例Model和Activity的Presenter就创建起来，Model中的生产出的值就会通过接口传出到Activity中<br>紧接着Activity启动并绑定Service</p><h4 id="Service启动"><a href="#Service启动" class="headerlink" title="Service启动"></a>Service启动</h4><p>同理过程中也会创建一个Service的Presenter，紧接着Presenter也会把View添加到单例model的Views中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">45.900  I&#x2F;TestService.java: [ (TestService.java:21)#onCreate ] Service持有的P_id: @1a5879a</span><br><span class="line">45.901  I&#x2F;TestService.java: [ (TestService.java:22)#onCreate ] @1a5879a</span><br><span class="line">45.903  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@1a5879a</span><br></pre></td></tr></table></figure><p>此时MVP框架的应用就创建完成，此时存活着一个Activity和对应的Presenter，一个Service和对应的Presenter，一个Model</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>Model中生产的值通过遍历View分别传出<br>Model.class<br>我简单创建了一个Handler，每秒+1，并值传出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">private mHandler handler;</span><br><span class="line">private int i &#x3D; 0;</span><br><span class="line">private class mHandler extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        super.handleMessage(msg);</span><br><span class="line">        handler.removeMessages(0x01);</span><br><span class="line">        handler.sendEmptyMessageDelayed(0x01,1000);</span><br><span class="line">        ++i;</span><br><span class="line">        for (View mView : mViews) &#123;</span><br><span class="line">            XLog.i(mView+&quot; 发送传出处理的值：&quot;+i);</span><br><span class="line">            mView.onTime(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>该值首先会通过View传到对应的Presenter，紧接着传出到实现了View方法的Activity和Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onTime(int position) &#123;</span><br><span class="line">    get().onTime(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到来着Model的数据<br>MVP的特性才展现出来<br>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">45.915  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：1</span><br><span class="line">45.918  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：1</span><br><span class="line">45.920  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：1</span><br><span class="line">45.924  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：1</span><br><span class="line"></span><br><span class="line">46.918  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：2</span><br><span class="line">46.920  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：2</span><br><span class="line">46.925  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：2</span><br><span class="line">46.926  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：2</span><br><span class="line"></span><br><span class="line">47.922  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：3</span><br><span class="line">47.923  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：3</span><br><span class="line">47.927  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：3</span><br><span class="line">47.928  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：3</span><br></pre></td></tr></table></figure><h3 id="灵活添加和移除view"><a href="#灵活添加和移除view" class="headerlink" title="灵活添加和移除view"></a>灵活添加和移除view</h3><h4 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h4><p>当Activity销毁时，通过onDestroy的方法除Model中对应Presenter的View，防止泄漏<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52:03.088  I&#x2F;Model.java: [ (Model.java:49)#onDestroy ] Model中去除P_id: @170acea</span><br></pre></td></tr></table></figure></p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>当Activity再次创建时，model中会再增加其新的对应Presenter的View<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">52:07.186  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @b79a950</span><br><span class="line">52:07.207  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P_id: @b79a950</span><br></pre></td></tr></table></figure><br>当不再有Presenter持有Model时，Model会被释放<br>Model.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    if (mViews.size()&#x3D;&#x3D;0)&#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public final void clear() &#123;</span><br><span class="line">    handler.removeMessages(0x01);</span><br><span class="line">    handler &#x3D; null;</span><br><span class="line">    mModel &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="补充BaseActivity和BaseService"><a href="#补充BaseActivity和BaseService" class="headerlink" title="补充BaseActivity和BaseService"></a>补充BaseActivity和BaseService</h3><p>是属于逻辑层的两个方法，用于逻辑与界面分离时，当逻辑层添加了新的接口时，界面并不需要，或者没来得及实现时，在逻辑层的BaseActivity和BaseService中添加了接口，界面层就不需要去实现。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
