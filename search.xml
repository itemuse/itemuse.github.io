<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>目录</title>
      <link href="2021/03/05/%E7%9B%AE%E5%BD%95/"/>
      <url>2021/03/05/%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一-个人项目"><a href="#一-个人项目" class="headerlink" title="一.个人项目"></a>一.个人项目</h3><p><strong><a href="https://github.com/itemuse/XLib" target="_blank" rel="noopener">工具Jar</a></strong><br><a href="https://jitpack.io/#itemuse/XLib" target="_blank" rel="noopener"><img src="https://jitpack.io/v/itemuse/XLib.svg" alt=""></a></p><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/app/XApplication.java" target="_blank" rel="noopener">app</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/array/XArray.java" target="_blank" rel="noopener">Array</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/navigationbar/XNavigationBar.java" target="_blank" rel="noopener">NavigationBar</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/systemui/XSystemUI.java" target="_blank" rel="noopener">SystemUi</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFile.java" target="_blank" rel="noopener">File</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFileIO.java" target="_blank" rel="noopener">FileIO</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/fragment/XFragment.java" target="_blank" rel="noopener">Fragment</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/image/XImage.java" target="_blank" rel="noopener">Image</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/log/XLog.java" target="_blank" rel="noopener">Log</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/map/XMap.java" target="_blank" rel="noopener">Map</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/network/XNetwork.java" target="_blank" rel="noopener">Network</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/permissions/XPermission.java" target="_blank" rel="noopener">Permission</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/resource/XResource.java" target="_blank" rel="noopener">Resource</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/screen/XScreen.java" target="_blank" rel="noopener">Screen</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sdcard/XSDCard.java" target="_blank" rel="noopener">SDCard</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">Service</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sharedpreferences/XSPUtils.java" target="_blank" rel="noopener">sharedpreferences</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/size/XSize.java" target="_blank" rel="noopener">Size</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/string/XString.java" target="_blank" rel="noopener">String</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/tab/XTab.java" target="_blank" rel="noopener">Tab</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/thread/XThread.java" target="_blank" rel="noopener">Thread</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/time/XTime.java" target="_blank" rel="noopener">Time</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/toast/XToast.java" target="_blank" rel="noopener">Toast</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/zip/XZip.java" target="_blank" rel="noopener">Zip</a></li></ul><p><strong>独立项目</strong></p><ul><li><a href="https://github.com/itemuse/XMusic" target="_blank" rel="noopener">XMusic</a></li><li><a href="https://github.com/itemuse/XVideo" target="_blank" rel="noopener">XVideo</a></li><li><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP框架</a></li><li><a href="https://github.com/itemuse/Dialog" target="_blank" rel="noopener">Dialag</a></li><li><a href="https://github.com/itemuse/AlarmManagerClock" target="_blank" rel="noopener">AlarmManagerClock</a></li></ul><h3 id="二-官方手册"><a href="#二-官方手册" class="headerlink" title="二.官方手册"></a>二.官方手册</h3><ul><li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">developers</a></li></ul><h3 id="三-API收集"><a href="#三-API收集" class="headerlink" title="三.API收集"></a>三.API收集</h3><p><strong>测滑返回SwipeBackLayout</strong></p><ul><li><a href="https://qibilly.com/SmartSwipe-tutorial/" target="_blank" rel="noopener">SmartSwipe</a></li></ul><p><strong>沉浸式状态栏和导航栏</strong></p><ul><li><a href="https://github.com/gyf-dev/ImmersionBar" target="_blank" rel="noopener">ImmersionBar</a></li></ul><p><strong>日历</strong></p><ul><li><a href="https://gitee.com/huanghaibin_dev/CalendarView" target="_blank" rel="noopener">CalendarView</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二级选择框使用笔记</title>
      <link href="2021/02/27/%E4%BA%8C%E7%BA%A7%E9%80%89%E6%8B%A9%E6%A1%86%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/27/%E4%BA%8C%E7%BA%A7%E9%80%89%E6%8B%A9%E6%A1%86%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-效果图："><a href="#一-效果图：" class="headerlink" title="一.效果图："></a>一.效果图：</h3><p><img src="device.gif" alt="image"></p><h3 id="二-源码传送门："><a href="#二-源码传送门：" class="headerlink" title="二.源码传送门："></a>二.源码传送门：</h3><p><a href="https://github.com/itemuse/Dialog" target="_blank" rel="noopener">Dialog</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="三-主要方法及监听器"><a href="#三-主要方法及监听器" class="headerlink" title="三.主要方法及监听器"></a>三.主要方法及监听器</h3><ul><li><p><strong>collapseGroup( int position)</strong><br>收起 position 位置的分组</p></li><li><p><strong>expandGroup(int position)</strong><br>展开position位置的分组</p></li><li><p><strong>isGroupExpanded(int position)</strong><br>判断position位置的分组是否展开</p></li><li><p><strong>setAdapter(ExpandableListAdapter adapter)</strong><br>给ExpandableListView 设置适配器</p></li><li><p><strong>setOnChildClickListener(OnChildClickListener listener)</strong><br>设置分组中子条目的点击监听器</p></li><li><p><strong>setOnGroupClickListener(OnGroupClickListener listener)</strong><br>设置分组的点击监听器</p></li><li><p><strong>setOnGroupCollapseListener(OnGroupCollapseListener listener)</strong><br>设置分组收起的监听器</p></li><li><p><strong>setOnGroupExpandListener(OnGroupExpandListener listener)</strong><br>设置分组展开的监听器</p></li></ul><h3 id="四-几个XML属性"><a href="#四-几个XML属性" class="headerlink" title="四.几个XML属性"></a>四.几个XML属性</h3><ul><li><p><strong>android:groupIndicator</strong><br>组指示器，取值可以是任意的Drawable对象。显示在 该分组的最左侧。如果不设置的话，默认是一个向下的箭头，点击展开内容之后会变成向上的箭头</p></li><li><p><strong>android:childIndicator</strong><br>子条目指示器，取值可以是任意的Drawable 对象。显示在分组中的每一个 子条目 的最左侧。没有默认图标。</p></li></ul><h3 id="五-用法"><a href="#五-用法" class="headerlink" title="五.用法"></a>五.用法</h3><ul><li><strong>首先要准备好要填充的一级列表的的数据和对应的二级列表数据</strong><br>demo一级列表一共是三个选项<br>所以会有三个子选项的选项集合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ParentList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.parent_item))&#123;</span><br><span class="line">    ParentList.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_1))&#123;</span><br><span class="line">    childLists1.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists2 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_2))&#123;</span><br><span class="line">    childLists2.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists3 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_3))&#123;</span><br><span class="line">    childLists3.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ChildLists &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">ChildLists.add(childLists1);</span><br><span class="line">ChildLists.add(childLists2);</span><br><span class="line">ChildLists.add(childLists3);</span><br></pre></td></tr></table></figure><ul><li><strong>把准备好的一级二级数据传入adapter</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mExpandableListView &#x3D; dialogView.findViewById(R.id.expandablelistview);</span><br><span class="line">final MultistageAdapter moAdapter &#x3D; new MultistageAdapter(this,ParentList, ChildLists, mParentmValue, mChildValue);</span><br><span class="line">mExpandableListView.setAdapter(moAdapter);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><strong>监听点击事件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;一级选项点击回调</span><br><span class="line">mExpandableListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) &#123;</span><br><span class="line">        mParentmValue2 &#x3D;  groupPosition;</span><br><span class="line">        mChildValue2 &#x3D; 0;</span><br><span class="line">        moAdapter.notifyDataSetChanged(mParentmValue2,mChildValue2); &#x2F;&#x2F;更新选中状态</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;二级选项点击回调</span><br><span class="line">mExpandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onChildClick(ExpandableListView parent, View v, int reverseTypePosition, int reverseCisPosition, long id) &#123;</span><br><span class="line">        mParentmValue2 &#x3D;  reverseTypePosition;</span><br><span class="line">        mChildValue2 &#x3D;  reverseCisPosition;</span><br><span class="line">        moAdapter.notifyDataSetChanged(mParentmValue2,mChildValue2);&#x2F;&#x2F;更新选中状态</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>确认框中处理</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void showConfirmDialog()&#123;</span><br><span class="line">    final AlertDialog.Builder normalDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    final String value &#x3D; ParentList.get(mParentmValue2)+&quot;&#x2F;&quot;+ChildLists.get(mParentmValue2).get(mChildValue);</span><br><span class="line">    normalDialog.setTitle(value);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;OK&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    mParentmValue &#x3D;  mParentmValue2;</span><br><span class="line">                    mChildValue &#x3D;  mChildValue2;</span><br><span class="line">                    Toast.makeText(getApplicationContext(),value,Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    ...</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-常用对话框笔记"><a href="#六-常用对话框笔记" class="headerlink" title="六.常用对话框笔记"></a>六.常用对话框笔记</h3><p><a href="https://freedomyouth.gitee.io/2020/12/14/%E5%B8%B8%E7%94%A8%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E7%90%86/">常用对话框笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ExpandableListView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVP框架示例讲解</title>
      <link href="2021/01/26/MVP%E6%A1%86%E6%9E%B6%E7%A4%BA%E4%BE%8B%E8%AE%B2%E8%A7%A3/"/>
      <url>2021/01/26/MVP%E6%A1%86%E6%9E%B6%E7%A4%BA%E4%BE%8B%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><p><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="二-主要代码介绍"><a href="#二-主要代码介绍" class="headerlink" title="二.主要代码介绍"></a>二.主要代码介绍</h3><ul><li><strong>MActivity.class</strong><br>抽象MActivity代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MActivity&lt;P extends BasePresenter&gt; extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    public P mPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState)&#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart()&#123;</span><br><span class="line">        super.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">       super.onResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">      if(mPresenter !&#x3D; null)&#123;</span><br><span class="line">         mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">         mPresenter&#x3D;null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BaseActivity.class</strong><br>BaseActivity继承MActivity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseActivity extends MActivity&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MainActivity.class</strong><br>应用的MainActivity继承BaseActivity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends BaseActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        XService.startService(TestService.class);</span><br><span class="line">        XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">        XLog.i(&quot;Acticity持有的P: &quot;+mPresenter);</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MService.class</strong><br>抽象MService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MService&lt; P extends BasePresenter&gt; extends Service &#123;</span><br><span class="line"></span><br><span class="line">   private static final String TAG &#x3D; &quot;XService&quot;;</span><br><span class="line">   public P mPresenter;</span><br><span class="line"></span><br><span class="line">   protected void initView()&#123;</span><br><span class="line">      if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">         mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">         if (this instanceof BaseView)&#123;</span><br><span class="line">            mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public IBinder onBind(Intent intent) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      initView();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">      return super.onStartCommand(intent, flags, startId);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onDestroy() &#123;</span><br><span class="line">      super.onDestroy();</span><br><span class="line">      mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">      mPresenter&#x3D;null;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BaseService.class</strong></li></ul><p>BaseService继承自MService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseService extends MService&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TestService.class</strong><br>应用的TestService继承BaseService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestService extends BaseService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">        XLog.i(&quot;Service持有的P: &quot;+mPresenter);</span><br><span class="line">        XLog.i(mPresenter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BasePresenter.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePresenter&lt;V extends BaseView, M extends BaseModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public Context mContext;</span><br><span class="line">    private WeakReference&lt;V&gt; mWeakReference;</span><br><span class="line">    public M mModel;</span><br><span class="line">    public Handler mHandler &#x3D; new Handler();</span><br><span class="line">    public BasePresenter(Context context) &#123;</span><br><span class="line">        this.mContext&#x3D;context;</span><br><span class="line">        mModel &#x3D; getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 model，实现该抽象类的子类必须实现此方法，之后就可以使用 mModel操作Model层业务逻辑</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract M getModel();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将 view 添加到弱引用中</span><br><span class="line">     * @param view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void add(V view) &#123;</span><br><span class="line">        mWeakReference &#x3D; new WeakReference&lt;V&gt;(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取弱引用中的 view</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public V get() &#123;</span><br><span class="line">        return mWeakReference &#x3D;&#x3D; null ? null : mWeakReference.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除弱引用中的 view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        if (mWeakReference !&#x3D; null) &#123;</span><br><span class="line">            mWeakReference.clear();</span><br><span class="line">            mWeakReference &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onDestroy()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Presenter.class</strong><br>Presenter则继承BasePresenter</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Presenter extends BasePresenter&lt;View, Model&gt; implements View&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-启动流程："><a href="#三-启动流程：" class="headerlink" title="三.启动流程："></a>三.启动流程：</h3><ul><li><strong>MainActivity启动</strong><br>创建时会创建并持有一个Presenter<br>Presenter.class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...   </span><br><span class="line"> protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Presenter构建方法中会持有单例model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">@Override</span><br><span class="line">public Model getModel() &#123;</span><br><span class="line">    return Model.getInstant();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>紧接着调用Presenter的onCreate会将View传入Model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onCreate()&#123;</span><br><span class="line">    mModel.onCreate();</span><br><span class="line">    addView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addView()&#123;</span><br><span class="line">    mModel.setViews(this);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加到Model的Views集合<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static ArrayList&lt;View&gt; mViews&#x3D;new ArrayList&lt;View&gt;();</span><br><span class="line">...</span><br><span class="line">public void setViews(View mPV)&#123;</span><br><span class="line">    XLog.i(&quot;Model中增加P&quot;+mPV);</span><br><span class="line">    mViews.add(mPV);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45.831  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @26f08e</span><br><span class="line">45.832  I&#x2F;Model.java: [ (Model.java:27)#onCreate ] execute</span><br><span class="line">45.847  I&#x2F;Model.java: [ (Model.java:36)#onResume ] execute</span><br><span class="line">45.849  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@26f08e</span><br></pre></td></tr></table></figure><p>此时单例Model和Activity的Presenter就创建起来，Model中的生产出的值就会通过接口传出到Activity中<br>紧接着Activity启动并绑定Service</p><ul><li><strong>Service启动</strong><br>同理过程中也会创建一个Service的Presenter，紧接着Presenter也会把View添加到单例model的Views中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">45.900  I&#x2F;TestService.java: [ (TestService.java:21)#onCreate ] Service持有的P_id: @1a5879a</span><br><span class="line">45.901  I&#x2F;TestService.java: [ (TestService.java:22)#onCreate ] @1a5879a</span><br><span class="line">45.903  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@1a5879a</span><br></pre></td></tr></table></figure><p>此时MVP框架的应用就创建完成，此时存活着一个Activity和对应的Presenter，一个Service和对应的Presenter，一个Model</p><h3 id="四-运行"><a href="#四-运行" class="headerlink" title="四.运行"></a>四.运行</h3><p>Model中生产的值通过遍历View分别传出<br>Model.class<br>我简单创建了一个Handler，每秒+1，并值传出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">private mHandler handler;</span><br><span class="line">private int i &#x3D; 0;</span><br><span class="line">private class mHandler extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        super.handleMessage(msg);</span><br><span class="line">        handler.removeMessages(0x01);</span><br><span class="line">        handler.sendEmptyMessageDelayed(0x01,1000);</span><br><span class="line">        ++i;</span><br><span class="line">        for (View mView : mViews) &#123;</span><br><span class="line">            XLog.i(mView+&quot; 发送传出处理的值：&quot;+i);</span><br><span class="line">            mView.onTime(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>该值首先会通过View传到对应的Presenter，紧接着传出到实现了View方法的Activity和Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onTime(int position) &#123;</span><br><span class="line">    get().onTime(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到来着Model的数据<br>MVP的特性才展现出来<br>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">45.915  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：1</span><br><span class="line">45.918  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：1</span><br><span class="line">45.920  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：1</span><br><span class="line">45.924  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：1</span><br><span class="line"></span><br><span class="line">46.918  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：2</span><br><span class="line">46.920  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：2</span><br><span class="line">46.925  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：2</span><br><span class="line">46.926  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：2</span><br><span class="line"></span><br><span class="line">47.922  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：3</span><br><span class="line">47.923  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：3</span><br><span class="line">47.927  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：3</span><br><span class="line">47.928  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：3</span><br></pre></td></tr></table></figure><h3 id="五-灵活添加和移除view"><a href="#五-灵活添加和移除view" class="headerlink" title="五.灵活添加和移除view"></a>五.灵活添加和移除view</h3><ul><li><strong>移除</strong><br>当Activity销毁时，通过onDestroy的方法除Model中对应Presenter的View，防止泄漏<br>Model.class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52:03.088  I&#x2F;Model.java: [ (Model.java:49)#onDestroy ] Model中去除P_id: @170acea</span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong><br>当Activity再次创建时，model中会再增加其新的对应Presenter的View</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">52:07.186  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @b79a950</span><br><span class="line">52:07.207  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P_id: @b79a950</span><br></pre></td></tr></table></figure><p>当不再有Presenter持有Model时，Model会被释放<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    if (mViews.size()&#x3D;&#x3D;0)&#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public final void clear() &#123;</span><br><span class="line">    handler.removeMessages(0x01);</span><br><span class="line">    handler &#x3D; null;</span><br><span class="line">    mModel &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="六-补充BaseActivity和BaseService"><a href="#六-补充BaseActivity和BaseService" class="headerlink" title="六.补充BaseActivity和BaseService"></a>六.补充BaseActivity和BaseService</h3><p>是属于逻辑层的两个方法，用于逻辑与界面分离时，当逻辑层添加了新的接口时，界面并不需要，或者没来得及实现时，在逻辑层的BaseActivity和BaseService中添加了接口，界面层就不需要去实现。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSpanned使用笔记</title>
      <link href="2021/01/20/XSpanned%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/20/XSpanned%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-使用"><a href="#二-使用" class="headerlink" title="二.使用"></a>二.使用</h3><ul><li><strong>初始化</strong><br>把textview控件传过去即可<br>append传入要显示的字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TextView mTextview &#x3D; findViewById(R.id.text);</span><br><span class="line">SpanUtils.with(mTextview)</span><br><span class="line">        .append(getString(R.string.text)) </span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure><ul><li><strong>设置字体大小</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;X&quot;)</span><br><span class="line">.setFontSize(50)</span><br><span class="line">.append(&quot;Y&quot;)</span><br><span class="line">.setFontSize(150)</span><br><span class="line">.append(&quot;Z&quot;)</span><br><span class="line">.setFontSize(20)</span><br></pre></td></tr></table></figure><p><img src="Image1.png" alt="iamge"></p><ul><li><strong>前景色、背景色</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setForegroundColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image2.png" alt="iamge"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setBackgroundColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image3.png" alt="iamge"></p><ul><li><strong>设置引用线颜色</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setQuoteColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image4.png" alt="iamge"></p><ul><li><strong>设置缩进</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setLeadingMargin(50, &#x2F;*第一行缩进值*&#x2F; 0 &#x2F;*其余行缩进值*&#x2F;)</span><br></pre></td></tr></table></figure><p>设置前<br><img src="Image5.png" alt="iamge"><br>设置后<br><img src="Image6.png" alt="iamge"></p><ul><li><strong>设置行高</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    public static final int ALIGN_BOTTOM   &#x3D; 0;</span><br><span class="line">    public static final int ALIGN_BASELINE &#x3D; 1;</span><br><span class="line">    public static final int ALIGN_CENTER   &#x3D; 2;</span><br><span class="line">    public static final int ALIGN_TOP      &#x3D; 3;</span><br><span class="line">*&#x2F;</span><br><span class="line">.setLineHeight(100&#x2F;*行高*&#x2F;,SpanUtils.ALIGN_CENTER&#x2F;*重心*&#x2F;)</span><br></pre></td></tr></table></figure><p>设置前<br><img src="Image7.png" alt="iamge"><br>设置后<br><img src="Image8.png" alt="iamge"></p><ul><li><strong>字体比例</strong><br>修改前：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.append(getString(R.string.text))</span><br></pre></td></tr></table></figure><p><img src="Image9.png" alt="iamge"><br>修改后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontProportion((float) 1.9) &#x2F;&#x2F;整体比例</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontXProportion((float) 1.5)&#x2F;&#x2F;宽度比例</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontXProportion((float) 0.3)&#x2F;&#x2F;宽度比例</span><br></pre></td></tr></table></figure><p><img src="Image10.png" alt="iamge"></p><ul><li><strong>删除线、下划线</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setStrikethrough() &#x2F;&#x2F;删除线</span><br></pre></td></tr></table></figure><p><img src="Image11.png" alt="iamge"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setUnderline() &#x2F;&#x2F;下划线</span><br></pre></td></tr></table></figure><p><img src="Image12.png" alt="iamge"></p><ul><li><strong>设置粗体、斜体</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBold()           &#x2F;&#x2F;设置粗体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setItalic()         &#x2F;&#x2F;设置斜体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBoldItalic()     &#x2F;&#x2F;设置粗斜体</span><br></pre></td></tr></table></figure><p><img src="Image13.png" alt="iamge"></p><ul><li><strong>设置字体</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.DEFAULT_BOLD)       &#x2F;&#x2F;设置字体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.SANS_SERIF)       &#x2F;&#x2F;设置字体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.SERIF)       &#x2F;&#x2F;设置字体</span><br></pre></td></tr></table></figure><p><img src="Image14.png" alt="iamge"></p><ul><li><strong>设置单独点击事件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;点击事件1&quot;)</span><br><span class="line">.setClickSpan(new ClickableSpan() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        XLog.i(&quot;&#x2F;&#x2F;设置点击事件1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)      &#x2F;&#x2F;设置点击事件</span><br><span class="line">.append(&quot;点击事件2&quot;)</span><br><span class="line">.setClickSpan(getColor(R.color.colorAccent4),true, new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        XLog.i(&quot;&#x2F;&#x2F;设置点击事件2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)      &#x2F;&#x2F;设置点击事件</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-01-12 00:29:12.802 13577-13577&#x2F;com.softwinner.app I&#x2F;MainActivity.java: [ (MainActivity.java:75)#onClick ] &#x2F;&#x2F;设置点击事件1</span><br><span class="line">2021-01-12 00:29:13.190 13577-13577&#x2F;com.softwinner.app I&#x2F;MainActivity.java: [ (MainActivity.java:82)#onClick ] &#x2F;&#x2F;设置点击事件2</span><br></pre></td></tr></table></figure><ul><li><strong>超链接</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setUrl(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)            &#x2F;&#x2F;设置超链接</span><br></pre></td></tr></table></figure><p><img src="Image15.png" alt="iamge"><br>点击会跳转浏览器<br><img src="Image16.png" alt="iamge"></p><ul><li><p><strong>设置模糊</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.SOLID)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.OUTER)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.INNER)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.NORMAL)           &#x2F;&#x2F;设置模糊</span><br></pre></td></tr></table></figure><p><img src="Image17.png" alt="iamge"></p></li><li><p><strong>设置阴影</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setShadow(15,5,5,getColor(R.color.colorAccent1))         &#x2F;&#x2F;设置阴影</span><br></pre></td></tr></table></figure><p><img src="Image18.png" alt="iamge"></p><ul><li><strong>追加图片</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;追加图片&quot;)</span><br><span class="line">.appendImage(R.drawable.ic_launcher_background,SpanUtils.ALIGN_BOTTOM)       &#x2F;&#x2F;追加图片</span><br></pre></td></tr></table></figure><p><img src="Image19.png" alt="iamge"></p><ul><li><strong>追加空格</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;追加图片&quot;)</span><br><span class="line">.appendSpace(20)       &#x2F;&#x2F;追加空白</span><br><span class="line">.append(&quot;追加图片&quot;)</span><br></pre></td></tr></table></figure><p><img src="Image20.png" alt="iamge"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Spanned </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XService使用笔记</title>
      <link href="2021/01/06/XService%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/06/XService%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><p><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">Service</a><br><a href="https://github.com/itemuse/XMusic/blob/master/app/src/main/java/com/tw/music/MusicService.java" target="_blank" rel="noopener">MusicService.java</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="二-使用方法"><a href="#二-使用方法" class="headerlink" title="二.使用方法"></a>二.使用方法</h3><ul><li><strong>启动服务</strong><br>提供三种传参启动方法<br><img src="Image1.png" alt="image"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XService.startService(TestService.class);</span><br><span class="line">XService.startService(new Intent(this,TestService.class));</span><br><span class="line">XService.startService(&quot;com.xy.app.TestService&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* Start the service.</span><br><span class="line">*</span><br><span class="line">* @param intent The intent.</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void startService(Intent intent) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O) &#123;</span><br><span class="line">            XApp.getApp().startForegroundService(intent);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            XApp.getApp().startService(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>停止服务</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XService.stopService(TestService.class);</span><br><span class="line">XService.stopService(new Intent(this,TestService.class));</span><br><span class="line">XService.unbindService(mConnection);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Stop the service.</span><br><span class="line"> *</span><br><span class="line"> * @param intent The intent.</span><br><span class="line"> * @return &#123;@code true&#125;: success&lt;br&gt;&#123;@code false&#125;: fail</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean stopService(@NonNull Intent intent) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return XApp.getApp().stopService(intent);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>*绑定服务</em><br><img src="Image2.png" alt="image"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">XService.bindService(&quot;com.softwinner.app.TestService&quot;,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">XService.bindService(new Intent(this,TestService.class),mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line"></span><br><span class="line">private ServiceConnection mConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><em>*绑定服务</em></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XService.unbindService(mConnection);</span><br></pre></td></tr></table></figure><ul><li><strong>查询存活服务</strong></li></ul><p>目前测试的情况，5.0 6.0 7.0可以查询到所有系统存货的服务，8.0 9.0 10.0上只可以查询到本进程的服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;String&gt; getAllRunningServices() &#123;</span><br><span class="line">    ActivityManager am &#x3D; (ActivityManager) App.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">    List&lt;RunningServiceInfo&gt; info &#x3D; am.getRunningServices(0x7FFFFFFF);</span><br><span class="line">    Set&lt;String&gt; names &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">    if (info &#x3D;&#x3D; null || info.size() &#x3D;&#x3D; 0) return null;</span><br><span class="line">    for (RunningServiceInfo aInfo : info) &#123;</span><br><span class="line">        names.add(aInfo.service.getClassName());</span><br><span class="line">    &#125;</span><br><span class="line">    return names;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>查询服务是否存活</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isServiceRunning(@NonNull final String className) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ActivityManager am &#x3D; (ActivityManager) App.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        List&lt;RunningServiceInfo&gt; info &#x3D; am.getRunningServices(0x7FFFFFFF);</span><br><span class="line">        if (info &#x3D;&#x3D; null || info.size() &#x3D;&#x3D; 0) return false;</span><br><span class="line">        for (RunningServiceInfo aInfo : info) &#123;</span><br><span class="line">            if (className.equals(aInfo.service.getClassName())) return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; catch (Exception ignore) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>使用service注意</strong><br>使用了startservice，也用了bindservice的情况下启用一个服务。<br>未stopservice之前，unbindservice服务是不会被销毁。<br>未unbindservice之前，stopservice服务是不会被销毁的。</p></li><li><p><strong>前台服务和后台服务区别</strong></p></li></ul><div class="table-container"><table><thead><tr><th>前台服务</th><th>后台服务</th></tr></thead><tbody><tr><td>会在通知一栏显示 ONGOING 的 Notification，当服务被终止的时候，通知一栏的 Notification 也会消失，这样对于用户有一定的通知作用。常见的如音乐播放服务。</td><td>默认的服务即为后台服务，即不会在通知一栏显示 ONGOING 的 Notification。当服务被终止的时候，用户是看不到效果的。某些不需要运行或终止提示的服务，如天气更新，日期同步，邮件同步等。</td></tr></tbody></table></div><h3 id="三-8-0之后的服务"><a href="#三-8-0之后的服务" class="headerlink" title="三.8.0之后的服务"></a>三.8.0之后的服务</h3><ul><li><p>Android 8.0 之前<br>创建前台服务的方式通常是先创建一个后台服务，然后将该服务推到前台。</p></li><li><p>Android 8.0 之后<br>系统不允许后台应用创建后台服务。 引入了一种全新的方法，即 Context.startForegroundService()，以在前台启动新服务。</p></li></ul><p>在系统创建服务后，应用有五秒的时间来调用该服务的 startForeground() 方法以显示新服务的用户可见通知。</p><p>如果应用在此时间限制内未调用 startForeground()，则系统将停止服务并声明此应用为 ANR。</p><p>以我的音乐服务为例,在onStartCommand方法里增加一个Notification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MusicService extends MService&lt;MusicPresenter&gt; implements MusicView &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Notification.Builder builder &#x3D; new Notification.Builder(XApp.getApp());</span><br><span class="line">        Intent nfIntent &#x3D; new Intent(this, MusicActivity.class);</span><br><span class="line">        builder.setContentIntent(PendingIntent.</span><br><span class="line">                getActivity(this, 0, nfIntent, 0))</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(this.getResources(),R.drawable.ic_launcher))</span><br><span class="line">                .setContentTitle(&quot;微音正在后台运行&quot;)</span><br><span class="line">                .setSmallIcon(R.drawable.ic_launcher)</span><br><span class="line">                .setContentText(&quot;要显示的内容&quot;)</span><br><span class="line">                .setWhen(System.currentTimeMillis());</span><br><span class="line">        if (android.os.Build.VERSION.SDK_INT &gt;&#x3D; android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">            NotificationChannel notificationChannel &#x3D; new NotificationChannel(&quot;1&quot;, &quot;Name&quot;,NotificationManager.IMPORTANCE_MIN);</span><br><span class="line">            notificationChannel.enableLights(false);&#x2F;&#x2F;如果使用中的设备支持通知灯，则说明此通知通道是否应显示灯</span><br><span class="line">            notificationChannel.setShowBadge(false);&#x2F;&#x2F;是否显示角标</span><br><span class="line">            notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_SECRET);</span><br><span class="line">            NotificationManager manager &#x3D; (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">            manager.createNotificationChannel(notificationChannel);</span><br><span class="line">            builder.setChannelId(&quot;1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Notification notification &#x3D; builder.build(); &#x2F;&#x2F; 获取构建好的Notification</span><br><span class="line">        notification.defaults &#x3D; Notification.DEFAULT_SOUND; &#x2F;&#x2F;设置为默认的声音</span><br><span class="line">        &#x2F;&#x2F; 参数一：唯一的通知标识；参数二：通知消息。</span><br><span class="line">         startForeground(110, notification);&#x2F;&#x2F; 开始前台服务</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<br>Android O 后台应用想启动服务就老老实实的加个notification给用户看，表示你自己在后台占着资源，杀不杀由用户决定，偷偷地在后台跑没有framework帮忙想都别想，一个anr+crash套餐了解一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- activity： Context.startForegroundService() </span><br><span class="line">- Service：startForeground(int id, Notification notification)（id must not be 0）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> xlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用弹出对话框整理</title>
      <link href="2020/12/14/%E5%B8%B8%E7%94%A8%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E7%90%86/"/>
      <url>2020/12/14/%E5%B8%B8%E7%94%A8%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><ul><li><a href="https://github.com/itemuse/Dialog" target="_blank" rel="noopener">Dialog</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-普通对话框"><a href="#二-普通对话框" class="headerlink" title="二.普通对话框"></a>二.普通对话框</h3><p><img src="1.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**普通对话框**&#x2F;</span><br><span class="line">private void showNormalDialog()&#123;</span><br><span class="line">    final AlertDialog.Builder normalDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    normalDialog.setIcon(R.mipmap.tr_step_left_normal);</span><br><span class="line">    normalDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    normalDialog.setMessage(&quot;DiaLog Message&quot;);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Positive&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.setNegativeButton(&quot;Negative&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Negative&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-普通对话框-增加第三个选择按钮"><a href="#四-普通对话框-增加第三个选择按钮" class="headerlink" title="四.普通对话框 增加第三个选择按钮"></a>四.普通对话框 增加第三个选择按钮</h3><p><img src="2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**普通对话框 增加第三个选择按钮**&#x2F;</span><br><span class="line">private void showMultiBtnDialog()&#123;</span><br><span class="line">    AlertDialog.Builder normalDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    normalDialog.setIcon(R.mipmap.tr_step_left_normal);</span><br><span class="line">    normalDialog.setTitle(&quot;DiaLog Title&quot;).setMessage(&quot;DiaLog Message&quot;);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Positive&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.setNeutralButton(&quot;Neutral2&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Neutral2&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.setNegativeButton(&quot;Negative&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">            showToast(&quot;Negative&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 创建实例并显示</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-列表选择对话框"><a href="#五-列表选择对话框" class="headerlink" title="五.列表选择对话框"></a>五.列表选择对话框</h3><p><img src="3.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**列表选择对话框**&#x2F;</span><br><span class="line">private void showListDialog() &#123;</span><br><span class="line">    final String[] items &#x3D; &#123; &quot;items1&quot;,&quot;items2&quot;,&quot;items3&quot;,&quot;items4&quot; &#125;;</span><br><span class="line">    AlertDialog.Builder listDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    listDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    listDialog.setItems(items, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">            showToast(&quot;点击 &quot;+items[which]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    listDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-列表单选对话框"><a href="#六-列表单选对话框" class="headerlink" title="六.列表单选对话框"></a>六.列表单选对话框</h3><p><img src="4.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**列表单选对话框**&#x2F;</span><br><span class="line">int mChoice;</span><br><span class="line">private void showSingleChoiceDialog()&#123;</span><br><span class="line">    final String[] items &#x3D; &#123; &quot;items1&quot;,&quot;items2&quot;,&quot;items3&quot;,&quot;items4&quot; &#125;;</span><br><span class="line">    AlertDialog.Builder singleChoiceDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    singleChoiceDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    &#x2F;&#x2F; 第二个参数是默认选项，此处设置为0</span><br><span class="line">    singleChoiceDialog.setSingleChoiceItems(items, mChoice,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    mChoice &#x3D; which;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    singleChoiceDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    if (mChoice !&#x3D; -1) &#123;</span><br><span class="line">                        showToast(&quot;选择 &quot;+items[mChoice]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    singleChoiceDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七-列表多选对话框"><a href="#七-列表多选对话框" class="headerlink" title="七.列表多选对话框"></a>七.列表多选对话框</h3><p><img src="5.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**列表多选对话框**&#x2F;</span><br><span class="line">ArrayList&lt;String&gt; mChoices &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">final boolean initChoiceSets[]&#x3D;&#123;false,false,false,false&#125;;</span><br><span class="line">private void showMultiChoiceDialog() &#123;</span><br><span class="line">    final String[] items &#x3D; &#123; &quot;items1&quot;,&quot;items2&quot;,&quot;items3&quot;,&quot;items4&quot; &#125;;</span><br><span class="line">    AlertDialog.Builder multiChoiceDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    multiChoiceDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    multiChoiceDialog.setMultiChoiceItems(items, initChoiceSets,</span><br><span class="line">            new DialogInterface.OnMultiChoiceClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which,</span><br><span class="line">                                    boolean isChecked) &#123;</span><br><span class="line">                    initChoiceSets[which] &#x3D; isChecked;</span><br><span class="line">                    if (isChecked) &#123;</span><br><span class="line">                        mChoices.add(items[which]);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        String  s  &#x3D; items[which];</span><br><span class="line">                        Log.i(&quot;md&quot;,&quot; findInterIdex(mChoices,s):  &quot;+findInterIdex(mChoices,s));</span><br><span class="line">                        mChoices.remove(findInterIdex(mChoices,s));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    multiChoiceDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    int size &#x3D; mChoices.size();</span><br><span class="line">                    String str &#x3D; &quot;&quot;;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; size; i++) &#123;</span><br><span class="line">                        str +&#x3D; mChoices.get(i) ;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    showToast(&quot;选择了 &quot;+str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    multiChoiceDialog.show();</span><br><span class="line">&#125;</span><br><span class="line">public static int findInterIdex(List&lt;String&gt; nums, String target)&#123;</span><br><span class="line">    return Collections.binarySearch(nums,target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八-进度弹出框"><a href="#八-进度弹出框" class="headerlink" title="八.进度弹出框"></a>八.进度弹出框</h3><p><img src="6.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**进度弹出框**&#x2F;</span><br><span class="line">private void showProgressDialog() &#123;</span><br><span class="line">    final int MAX_PROGRESS &#x3D; 100;</span><br><span class="line">    final ProgressDialog progressDialog &#x3D;</span><br><span class="line">            new ProgressDialog(MainActivity.this);</span><br><span class="line">    progressDialog.setProgress(0);</span><br><span class="line">    progressDialog.setTitle(&quot;ProgressDialog Title&quot;);</span><br><span class="line">    progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class="line">    progressDialog.setMax(MAX_PROGRESS);</span><br><span class="line">    progressDialog.show();</span><br><span class="line">    &#x2F;* 模拟进度增加的过程</span><br><span class="line">     * 新开一个线程，每个100ms，进度增加1</span><br><span class="line">     *&#x2F;</span><br><span class="line">    new Thread(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            int progress&#x3D; 0;</span><br><span class="line">            while (progress &lt; MAX_PROGRESS)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(100);</span><br><span class="line">                    progress++;</span><br><span class="line">                    progressDialog.setProgress(progress);</span><br><span class="line">                &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 进度达到最大值后，窗口消失</span><br><span class="line">            progressDialog.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九-输入对话框"><a href="#九-输入对话框" class="headerlink" title="九.输入对话框"></a>九.输入对话框</h3><p><img src="7.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**输入对话框**&#x2F;</span><br><span class="line">private void showInputDialog() &#123;</span><br><span class="line">    final EditText editText &#x3D; new EditText(MainActivity.this);</span><br><span class="line">    AlertDialog.Builder inputDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    inputDialog.setTitle(&quot;AlertDialog Title&quot;).setView(editText);</span><br><span class="line">    inputDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;输入了 &quot;+editText.getText().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十-自定义输入对话框"><a href="#十-自定义输入对话框" class="headerlink" title="十.自定义输入对话框"></a>十.自定义输入对话框</h3><p><img src="8.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**自定义输入对话框</span><br><span class="line">private void showCustomizeDialog() &#123;</span><br><span class="line">    AlertDialog.Builder customizeDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    final View dialogView &#x3D; LayoutInflater.from(MainActivity.this)</span><br><span class="line">            .inflate(R.layout.dialog_customize,null);</span><br><span class="line">    customizeDialog.setTitle(&quot;自定义AlertDialog Title&quot;);</span><br><span class="line">    customizeDialog.setView(dialogView);</span><br><span class="line">    dialogView.findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View view) &#123;</span><br><span class="line">            showToast(&quot;输入了 &quot;+((EditText)dialogView.findViewById(R.id.edit_text)).getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    customizeDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 自定义View --&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:gravity&#x3D;&quot;bottom&quot;</span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;edit_text&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;btn&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:src&#x3D;&quot;@mipmap&#x2F;tr_step_left_normal&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="十一：二级对话选择框"><a href="#十一：二级对话选择框" class="headerlink" title="十一：二级对话选择框"></a>十一：二级对话选择框</h3><p><a href="https://freedomyouth.gitee.io/2021/02/27/%E4%BA%8C%E7%BA%A7%E9%80%89%E6%8B%A9%E6%A1%86%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/">二级选择框使用笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlertDialog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity基础篇</title>
      <link href="2020/05/18/Activity%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>2020/05/18/Activity%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是Activity"><a href="#一-什么是Activity" class="headerlink" title="一.什么是Activity"></a>一.什么是Activity</h3><p>Activity是Android应用程序核心组件中最基本的一个，是用户和程序交互的窗口，一个activity通常对应一个单独的视图，一个APP由一个或者多个activity构成，activity用于显示信息给用户，并且之间可以相互进行跳转，activity之间的跳转有返回值。</p><p>每一个activity都被定义为一个独立的类，他继承了Android中的android.app.Activity，在Activity类中将使用setContentView方法来显示由视图控件组成的用户界面，并对用户通过这些视图控件所出发的时间做出响应。</p><h3 id="二-activity的四种状态"><a href="#二-activity的四种状态" class="headerlink" title="二.activity的四种状态"></a>二.activity的四种状态</h3><ol><li><p>激活状态，此时activity运行在屏幕前台</p></li><li><p>暂停状态，此时activity失去焦点，但是用户仍然可以看到（例如这个activity上遮盖了一个透明的或者非全屏的activity）</p></li><li><p>停止状态，此时activity被其他activity完全覆盖</p></li><li><p>销毁状态，此时activity将会被系统清理出内存</p></li></ol><h3 id="三-activity的回调函数"><a href="#三-activity的回调函数" class="headerlink" title="三.activity的回调函数"></a>三.activity的回调函数</h3><p>android系统根据生命周期的不同阶段唤起对应的回调函数来执行代码，从启动到销毁一个activity有着一套有序的回调函数。</p><ul><li><p>onCreate()<br>创建，activity初次创建时被调用，该方法中一般进行一些静态设置。</p></li><li><p>onStart()<br>运行，activity对用户即将可见的时候调用</p></li><li><p>onResume()<br>获取焦点，当activity将要与用户进行交互时候调用</p></li><li><p>onPause()<br>失去焦点，当系统要启动一个其他的activity时调用（在其他activity显示之前调用）</p></li><li><p>onStop()<br>暂停，当另外一个activity恢复并遮盖当前activity，导致其对用户不可见时调用。</p></li><li><p>onDestroy()<br>销毁，在activity被销毁前所调用的最后一个方法</p></li><li><p>onRestart()<br>重新启动</p></li></ul><p>这七个方法贯穿整个activity的生命周期。<br>一张图来表示</p><p><img src="img1.jpg" alt=""></p><h3 id="四-activity的启动与销毁"><a href="#四-activity的启动与销毁" class="headerlink" title="四.activity的启动与销毁"></a>四.activity的启动与销毁</h3><p>大多数的APP都包含多个activity，不论这些activity是主activity还是为了响应用户行为而新建的，系统都会调用新的activity实例中的onCreate()方法，通常情况下我们会在onCreate()方法内声明一些UI元素或者定义一些成员变量等基本操作，但onCreate()方法中劲量少做事情，以免程序启动太久都看不到界面。</p><p>一旦onCreate()操作结束，系统会立即执行这个activity的onStart()方法和onResume()方法，最终使得activity停留在Resumed状态，直到一些因素发生变化才会改编这个状态，例如切换到另外一个activity或者退出程序。</p><p>一旦我们退出软件，系统会执行activity的onDestroy()方法，将activity从系统中完全移除，我们通常是在执行了 onPause() and onStop() 之后再调用onDestroy() 。</p><h3 id="五-activity的暂停与恢复"><a href="#五-activity的暂停与恢复" class="headerlink" title="五.activity的暂停与恢复"></a>五.activity的暂停与恢复</h3><p>在使用app的过程中，运行的activity经常会被其他组件挡住，例如提示电量不足的提示框等， activity可见但不可操作，这个时候activity就会调用onPause()方法进去Pause状态，这个方法会停止当前activity进行的操作，并保存那些有可能需要长期保存的信息，如果用户从暂停状态返回到activity，系统会恢复那些数据并执行onResume()方法。</p><h3 id="六-activity的停止与重启"><a href="#六-activity的停止与重启" class="headerlink" title="六.activity的停止与重启"></a>六.activity的停止与重启</h3><p>当我们从APP-A切换到APP-B之后，APP-A会调用onStop()方法，在onStop()方法中我们一般释放一些不再需要的资源</p><p>当我们从stop状态回到前台时候，会调用onRestart()方法，系统再调用onStart()方法，</p><h3 id="七-activity的生命周期"><a href="#七-activity的生命周期" class="headerlink" title="七.activity的生命周期"></a>七.activity的生命周期</h3><p>activity的生命周期可以根据不同的标准分为完整生命周期、可见生命周期和前台生命周期。</p><p>从activity最初调用onCreate()方法到最终调用onDestroy()方法的整个过程称之为完整生命周期，在onCreate()方法中设置全局状态，在onDestroy()方法中释放所有资源。</p><p>从activity调用onStart()方法到调用对应的onStop()方法的过程称之为可见生命周期，在这个过程中，activity都是对用户可见的（但不一定可以操作）</p><p>从activity调用onResume()开始到调用onPause()的整个过程称之为前台生命周期，这段时间内这个activity处于其他所有activity的前面，用户可以与之进行交互。</p><h3 id="八-演示"><a href="#八-演示" class="headerlink" title="八.演示"></a>八.演示</h3><p>我们创建一个android工程，然后重写那些方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.Menu;</span><br><span class="line">import android.view.MenuItem;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        System.out.println(&quot;执行onCreate...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onStart();</span><br><span class="line">        System.out.println(&quot;执行onStart...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onResume();</span><br><span class="line">        System.out.println(&quot;执行onResume...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onPause();</span><br><span class="line">        System.out.println(&quot;执行onPause...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStop() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onStop();</span><br><span class="line">        System.out.println(&quot;执行onStop...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        System.out.println(&quot;执行onDestroy...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onRestart() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onRestart();</span><br><span class="line">        System.out.println(&quot;执行onRestart...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在模拟器中运行，查看日志</p><p><img src="img2.jpg" alt=""></p><p>然后我们按home返回到桌面</p><p><img src="img3.jpg" alt=""></p><p>按菜单键，选择回到刚才的界面</p><p><img src="img4.jpg" alt=""></p><p>按返回键退出activity</p><p><img src="img5.jpg" alt=""></p><h3 id="九-如何创建一个activity"><a href="#九-如何创建一个activity" class="headerlink" title="九.如何创建一个activity"></a>九.如何创建一个activity</h3><p>新建一个activity步骤如下</p><p>1）在src中新建一个类继承activity，并重写其onCreate()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyActivity.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line"></span><br><span class="line">public class MyActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.my_activity_layout);&#x2F;&#x2F; 使用setContentView方法显示一个布局文件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）在res—-layout中创建一个布局文件，用以显示界面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">my_activity_layout.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;这是一个TextView&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>3）在AndroidManiFest.xml中注册这个activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">AndroidManiFest.xml</span><br><span class="line"></span><br><span class="line">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    package&#x3D;&quot;com.example.activitytest&quot;</span><br><span class="line">    android:versionCode&#x3D;&quot;1&quot;</span><br><span class="line">    android:versionName&#x3D;&quot;1.0&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;uses-sdk</span><br><span class="line">        android:minSdkVersion&#x3D;&quot;19&quot;</span><br><span class="line">        android:targetSdkVersion&#x3D;&quot;19&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt;</span><br><span class="line">        &lt;!-- 注册一个activity --&gt;</span><br><span class="line">        &lt;activity android:name&#x3D;&quot;com.example.activitytest.MyActivity&quot; &gt;</span><br><span class="line">   &lt;!-- 如果是主activity，需要添加如下过滤器来告诉系统这是入口 --&gt;</span><br><span class="line">   &lt;intent-filter&gt;</span><br><span class="line">       &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">       &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br><span class="line">    &lt;&#x2F;application&gt;</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure><p>　　这样，一个activity就创建成功了。</p><h3 id="十-如何关闭一个activity"><a href="#十-如何关闭一个activity" class="headerlink" title="十.如何关闭一个activity"></a>十.如何关闭一个activity</h3><p>只要按下返回键就可以销毁当前activity，但是假如我们希望通过代码方式来销毁activity，可以使用activity类提供的finish()方法来实现。</p><p>修改一下上面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MyActivity.java</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">public class MyActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.my_activity_layout);&#x2F;&#x2F; 使用setContentView方法显示一个布局文件</span><br><span class="line"></span><br><span class="line">        Button button &#x3D; (Button) findViewById(R.id.finishActivity); &#x2F;&#x2F; 找到这个按钮</span><br><span class="line">        button.setOnClickListener(new OnClickListener() &#123; &#x2F;&#x2F; 给这个按钮添加一个点击事件</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onClick(View v) &#123;</span><br><span class="line">       finish(); &#x2F;&#x2F; 当点击按钮时，销毁这个activity</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        System.out.println(&quot;onDestroy方法被调用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;这是一个TextView&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;finishActivity&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;关闭这个activity&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>这时候运行该程序，点击按钮，这个activity就会被关闭。</p><h3 id="十一-finish-和onDestroy-有什么区别"><a href="#十一-finish-和onDestroy-有什么区别" class="headerlink" title="十一.finish()和onDestroy()有什么区别"></a>十一.finish()和onDestroy()有什么区别</h3><p>从上面的代码运行结果来看，控制台上输出了“onDestroy方法被调用”，由此可见，在执行finish()时执行了onDestroy()方法。</p><p>实际上他们的区别在于 onDestroy()是生命周期方法，是你的Activity结束的时候由Android系统调用的，你不能直接调用onDestroy()来结束你的Activity,一般做法是调用finish()。</p><h3 id="十二-四种LaunchMode"><a href="#十二-四种LaunchMode" class="headerlink" title="十二.四种LaunchMode"></a>十二.四种LaunchMode</h3><p>史上最详细扔物线讲解<a href="https://www.bilibili.com/video/BV1CA41177Se" target="_blank" rel="noopener">Android 面试黑洞——当我按下 Home 键再切回来，会发生什么？</a>  </p><p>清单配置文件钟,可使用android:launchMode=”standard|singleInstance|single Task|singleTop”四种模式来控制Acivity任务栈。</p><ol><li><p>standard<br>每次激活Activity时(startActivity)，都创建Activity实例，并放入任务栈；<br><img src="img6.jpg" alt=""></p></li><li><p>singleTop<br>如果某个Activity自己激活自己，即任务栈栈顶就是该Activity，则不需要创建，其余情况都要创建Activity实例；<br><img src="img7.jpg" alt=""></p></li><li><p>singleTask<br>如果要激活的那个Activity在任务栈中存在该实例，则不需要创建，只需要把此Activity放入栈顶，并把该Activity以上的Activity实例都pop；<br><img src="img8.jpg" alt=""></p></li><li><p>singleInstance<br>singleInstance模式会将启动的Activity放置的不同的栈结构中。<br><img src="img9.jpg" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读闹钟代码</title>
      <link href="2018/07/21/%E8%A7%A3%E8%AF%BB%E9%97%B9%E9%92%9F%E4%BB%A3%E7%A0%81/"/>
      <url>2018/07/21/%E8%A7%A3%E8%AF%BB%E9%97%B9%E9%92%9F%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一-源码传送门："><a href="#一-源码传送门：" class="headerlink" title="一.源码传送门："></a>一.源码传送门：</h3><ul><li><a href="https://github.com/itemuse/AlarmManagerClock" target="_blank" rel="noopener">AlarmManagerClock</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-界面截图"><a href="#二-界面截图" class="headerlink" title="二.界面截图"></a>二.界面截图</h3><p><img src="ui.png" alt="界面"></p><h3 id="三-类"><a href="#三-类" class="headerlink" title="三.类"></a>三.类</h3><ul><li><p><strong>AlarmActivity.java</strong><br>是处理弹出提示窗口的一个Activity；</p></li><li><p><strong>AlarmAlertActivity.java</strong><br>Main类，设置时间周期等操作</p></li><li><strong>AlarmOpreation.java</strong><br>核心逻辑处理类，负责计算周期时间，然后将时间通过AlarmManager发送定时广播；</li><li><strong>AlarmReceiver.java</strong><br>广播类，负责处理3发送的广播类型，弹出1；</li><li><strong>AlarmsSetting.java</strong><br>设置的时间信息的存取类；</li><li><strong>SharedPreferenceUtil.java</strong><br>配合5的一个存储类；</li><li><strong>TimePickerFragment.java</strong><br>设置时间的工具类；</li><li><strong>WeekGridAdpter.java</strong><br>设置星期的工具类；</li></ul><h3 id="四-顺着去看"><a href="#四-顺着去看" class="headerlink" title="四.顺着去看"></a>四.顺着去看</h3><p><strong>核心api：Android原生定时器AlarmManager</strong></p><ul><li>从<strong>AlarmActivity</strong>点击时间开始</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onClick(View v) &#123;</span><br><span class="line">switch (v.getId()) &#123;</span><br><span class="line">case R.id.switch_in: &#x2F;&#x2F;上班打卡开关</span><br><span class="line">if (v.isSelected()) &#123;</span><br><span class="line">alarmsSetting.setInEnble(false);</span><br><span class="line">v.setSelected(false);</span><br><span class="line">AlarmOpreation.cancelAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_IN);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">alarmsSetting.setInEnble(true);</span><br><span class="line">v.setSelected(true);</span><br><span class="line">AlarmOpreation.enableAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_IN, alarmsSetting);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case R.id.switch_out:&#x2F;&#x2F;下班打卡开关</span><br><span class="line">if (v.isSelected()) &#123;</span><br><span class="line">alarmsSetting.setOutEnble(false);</span><br><span class="line">v.setSelected(false);</span><br><span class="line">AlarmOpreation.cancelAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_OUT);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">alarmsSetting.setOutEnble(true);</span><br><span class="line">v.setSelected(true);</span><br><span class="line">AlarmOpreation.enableAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_OUT, alarmsSetting);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case R.id.set_in_time: &#x2F;&#x2F;设置上班时间</span><br><span class="line">showTimePickerDialog(AlarmsSetting.ALARM_SETTING_TYPE_IN);</span><br><span class="line">break;</span><br><span class="line">case R.id.set_out_time:&#x2F;&#x2F;设置下班时间</span><br><span class="line">showTimePickerDialog(AlarmsSetting.ALARM_SETTING_TYPE_OUT);</span><br><span class="line">break;</span><br><span class="line">case R.id.btn_dynamic: &#x2F;&#x2F;灵活打卡</span><br><span class="line">showSingSelect();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中设置时间的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void showTimePickerDialog(final int type) &#123;</span><br><span class="line">TimePickerFragment timePicker &#x3D; new TimePickerFragment();</span><br><span class="line">if (type &#x3D;&#x3D; AlarmsSetting.ALARM_SETTING_TYPE_IN) &#123;</span><br><span class="line">timePicker.setTime(alarmsSetting.getInHour(), alarmsSetting.getInMinutes());</span><br><span class="line">&#125; else &#123;</span><br><span class="line">timePicker.setTime(alarmsSetting.getOutHour(), alarmsSetting.getOutMinutes());</span><br><span class="line">&#125;</span><br><span class="line">timePicker.show(getFragmentManager(), &quot;timePicker&quot;);</span><br><span class="line">timePicker.setOnSelectListener(new TimePickerFragment.OnSelectListener() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void getValue(int hourOfDay, int minute) &#123;</span><br><span class="line">setTime1(type,hourOfDay,minute);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TimePickerFragment窗口</strong><br>此类实质上就是继承至 <strong>DialogFragment</strong>调用 TimePickerDialog向外提供获取小时和分钟的接口！</li><li><strong>WeekGridAdpter.java</strong><br>而星期的周期复杂些，此行星期选项列表是一排 GridView,WeekGridAdpter就是它的 Adapter，在构造方法的 GetView中，可以看出，大神将周一至周日，组成一个二进制数据：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if(v.isSelected())&#123;</span><br><span class="line">    selected &#x3D; selected - (int)(1 &lt;&lt; position);</span><br><span class="line">    if(selected &lt;&#x3D; 0) &#123;&#x2F;&#x2F;至少选一个</span><br><span class="line">        selected &#x3D; selected + (int)(1 &lt;&lt; position);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    v.setSelected(false);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    selected &#x3D; selected + (int)(1 &lt;&lt; position);</span><br><span class="line">    v.setSelected(true);</span><br><span class="line">&#125;</span><br><span class="line">if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN)&#123;</span><br><span class="line">    alarmsSetting.setInDays(selected);</span><br><span class="line">&#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT)&#123;</span><br><span class="line">    alarmsSetting.setOutDays(selected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入对应参数到<strong>AlarmOpreation</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AlarmOpreation.cancelAlert(context,type);</span><br><span class="line">AlarmOpreation.enableAlert(context, type, alarmsSetting);</span><br></pre></td></tr></table></figure><ul><li><strong>AlarmOpreation.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">释放</span><br><span class="line">**&#x2F;</span><br><span class="line">public static void cancelAlert(Context context, int type) &#123;</span><br><span class="line">AlarmManager mAlarmManager &#x3D; (AlarmManager)</span><br><span class="line">context.getSystemService(Context.ALARM_SERVICE);</span><br><span class="line">Intent intent &#x3D; new Intent(AlarmsSetting.ALARM_ALERT_ACTION);</span><br><span class="line">intent.putExtra(&quot;type&quot;, type);</span><br><span class="line">intent.setClass(context, AlarmReceiver.class);</span><br><span class="line">PendingIntent pi &#x3D; PendingIntent.getBroadcast(context, type, intent,</span><br><span class="line">PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class="line">mAlarmManager.cancel(pi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置:主要是将存储好的时间设置信息（小时，分钟，星期），通过 cacluteNextAlarm方法设置成一个特殊的 Calendar值用于定时，然后将对应的 type和 Action组成一个通过广播 pi！通过 AlarmManager的 set方法定时， mAlarmManager.set(AlarmManager.RTC_WAKEUP,mCalendar.getTimeInMillis(),pi);，定时将 pi中的内容发送出去！<br>核心就是这样！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">设置</span><br><span class="line">**&#x2F;</span><br><span class="line">public static void enableAlert(Context context, int type, AlarmsSetting alarmsSetting) &#123;</span><br><span class="line">if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN &amp;&amp; !alarmsSetting.isInEnble())&#123;</span><br><span class="line">return ;</span><br><span class="line">&#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT &amp;&amp; !alarmsSetting.isOutEnble())&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int rantime &#x3D; alarmsSetting.getDynamic();</span><br><span class="line">AlarmManager mAlarmManager &#x3D; (AlarmManager)</span><br><span class="line">context.getSystemService(Context.ALARM_SERVICE);</span><br><span class="line">int hours &#x3D; 0,minute&#x3D;0,dayOfweek&#x3D;0;</span><br><span class="line">if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN)&#123;</span><br><span class="line">hours &#x3D; alarmsSetting.getInHour();</span><br><span class="line">minute&#x3D;alarmsSetting.getInMinutes();</span><br><span class="line">dayOfweek &#x3D; alarmsSetting.getInDays();</span><br><span class="line">&#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT)&#123;</span><br><span class="line">hours &#x3D; alarmsSetting.getOutHour();</span><br><span class="line">minute&#x3D;alarmsSetting.getOutMinutes();</span><br><span class="line">dayOfweek&#x3D;alarmsSetting.getOutDays();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理成循环周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public static Calendar cacluteNextAlarm(int hour, int minute, int dayOfweek)&#123;</span><br><span class="line">Calendar mCalendar &#x3D; Calendar.getInstance();</span><br><span class="line">mCalendar.setTimeInMillis(System.currentTimeMillis());</span><br><span class="line">mCalendar.set(Calendar.HOUR_OF_DAY,hour);</span><br><span class="line">mCalendar.set(Calendar.MINUTE, minute);</span><br><span class="line">int differDays &#x3D; getNextAlarmDifferDays(dayOfweek,mCalendar.get(Calendar.DAY_OF_WEEK), mCalendar.getTimeInMillis());</span><br><span class="line">int nextYear &#x3D; getNextAlarmYear(mCalendar.get(Calendar.YEAR), mCalendar.get(Calendar.DAY_OF_YEAR), mCalendar.getActualMaximum(Calendar.DAY_OF_YEAR), differDays);</span><br><span class="line">int nextMonth &#x3D; getNextAlarmMonth(mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH), mCalendar.getActualMaximum(Calendar.DATE), differDays);</span><br><span class="line">int nextDay &#x3D; getNextAlarmDay(mCalendar.get(Calendar.DAY_OF_MONTH), mCalendar.getActualMaximum(Calendar.DATE), differDays);</span><br><span class="line">mCalendar.set(Calendar.YEAR,nextYear);</span><br><span class="line">mCalendar.set(Calendar.MONTH, nextMonth % 12);&#x2F;&#x2F;月份从0开始</span><br><span class="line">mCalendar.set(Calendar.DAY_OF_MONTH, nextDay);</span><br><span class="line">mCalendar.set(Calendar.SECOND, 0);</span><br><span class="line">mCalendar.set(Calendar.MILLISECOND, 0);</span><br><span class="line">return mCalendar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#x2F;&#x2F;获取下次闹钟相差的天数</span><br><span class="line">private static int getNextAlarmDifferDays(int data, int currentDayOfWeek,long timeInMills)&#123;</span><br><span class="line">int nextDayOfWeek &#x3D;  getNextDayOfWeek(data, currentDayOfWeek,timeInMills);</span><br><span class="line">return currentDayOfWeek&lt;&#x3D;nextDayOfWeek?(nextDayOfWeek-currentDayOfWeek):(7 - currentDayOfWeek + nextDayOfWeek);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;考虑年进位的情况</span><br><span class="line">private static int getNextAlarmYear(int year,int dayOfYears, int actualMaximum, int differDays) &#123;</span><br><span class="line">int temp &#x3D; actualMaximum-dayOfYears-differDays;</span><br><span class="line">return temp &gt;&#x3D; 0?year:year+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;考虑月进位的情况</span><br><span class="line">private static int getNextAlarmMonth(int month,int dayOfMonth,int actualMaximum, int differDays) &#123;</span><br><span class="line">int temp &#x3D; actualMaximum-dayOfMonth-differDays;</span><br><span class="line">return temp &gt;&#x3D; 0?month:month+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取下次闹钟的day</span><br><span class="line">private static int getNextAlarmDay(int thisDayOfMonth, int actualMaximum, int differDays) &#123;</span><br><span class="line">int temp &#x3D; actualMaximum - thisDayOfMonth-differDays;</span><br><span class="line">if (temp&lt;0)&#123;</span><br><span class="line">return thisDayOfMonth + differDays - actualMaximum;</span><br><span class="line">&#125;</span><br><span class="line">return thisDayOfMonth + differDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取下次显示是星期几</span><br><span class="line">private static int getNextDayOfWeek(int data, int cWeek,long timeInMillis) &#123;</span><br><span class="line">int tempBack &#x3D; data &gt;&gt; cWeek - 1;</span><br><span class="line">int tempFront &#x3D; data ;</span><br><span class="line"></span><br><span class="line">if(tempBack%2&#x3D;&#x3D;1)&#123;</span><br><span class="line">if(System.currentTimeMillis()&lt;timeInMillis)  return cWeek;</span><br><span class="line">&#125;</span><br><span class="line">tempBack &#x3D; tempBack&gt;&gt;1;</span><br><span class="line">int m&#x3D;1,n&#x3D;0;</span><br><span class="line">while (tempBack !&#x3D; 0) &#123;</span><br><span class="line">if (tempBack % 2 &#x3D;&#x3D; 1 ) return cWeek + m;</span><br><span class="line">tempBack &#x3D; tempBack &#x2F; 2;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">while(n&lt;cWeek)&#123;</span><br><span class="line">if (tempFront % 2 &#x3D;&#x3D; 1)  return n+1;</span><br><span class="line">tempFront &#x3D;tempFront&#x2F;2;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过<strong>SharedPreferenceUtil</strong>将设置的值存储下来</p><p>当设置好定时器后，系统就会在指定的时间发送广播过来通知</p><ul><li><strong>AlarmReceiver.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        alarmsSetting &#x3D; new AlarmsSetting(context);</span><br><span class="line">        int type &#x3D; intent.getIntExtra(&quot;type&quot;,0);</span><br><span class="line">&#x2F;&#x2F;        Log.e(&quot;#######################&quot;, &quot;getRecevier_ACtion&quot; + intent.getAction());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果已经设置闹钟w不可用，先拦截</span><br><span class="line">        if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN &amp;&amp; !alarmsSetting.isInEnble())&#123;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT &amp;&amp; !alarmsSetting.isOutEnble())&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(intent.getAction().equals(AlarmsSetting.ALARM_ALERT_ACTION) &amp;&amp; type !&#x3D;0) &#123;</span><br><span class="line">            SimpleDateFormat formatter &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日——HH时mm分ss秒SSS毫秒&quot;);</span><br><span class="line">            Log.e(&quot;###########此次闹钟#######&quot;, &quot;alarmsSetting.getNextAlarm()&quot; + formatter.format(new Date(alarmsSetting.getNextAlarm())));</span><br><span class="line">            Log.e(&quot;###########当前系统时间###&quot;, &quot;System.currentTimeMillis()&quot; + formatter.format(new Date(System.currentTimeMillis())));</span><br><span class="line">            if (alarmsSetting.getNextAlarm() + 1000 * 30 &lt; System.currentTimeMillis())&#123;&#x2F;&#x2F;解决闹钟广播比设置时间闹钟快的问题</span><br><span class="line">                Log.e(&quot;###########无效闹钟#######&quot;, &quot;不执行&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(&quot;###########准备弹出提示框###&quot;, &quot; &quot;);</span><br><span class="line">            intent.setClass(context, AlarmAlertActivity.class);</span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            context.startActivity(intent);</span><br><span class="line">            AlarmOpreation.cancelAlert(context, type);</span><br><span class="line">            AlarmOpreation.enableAlert(context, type, new AlarmsSetting(context));</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            AlarmOpreation.cancelAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_IN);</span><br><span class="line">            AlarmOpreation.enableAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_IN, new AlarmsSetting(context));</span><br><span class="line">            AlarmOpreation.cancelAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_OUT);</span><br><span class="line">            AlarmOpreation.enableAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_OUT, new AlarmsSetting(context));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlarmManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="2018/01/17/MarkDown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>2018/01/17/MarkDown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Markdown"><a href="#一-Markdown" class="headerlink" title="一.Markdown"></a>一.Markdown</h3><p>是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><h3 id="二-代码"><a href="#二-代码" class="headerlink" title="二.代码"></a>二.代码</h3><ol><li><p><strong>单行代码：</strong><br>代码之间分别用一个反引号包起来<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;create database hero;&#96;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><code>create database hero;</code></p></li><li><p><strong>代码块：</strong><br>代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-字体"><a href="#三-字体" class="headerlink" title="三.字体"></a>三.字体</h3><ol><li><p><strong>加粗</strong><br>要加粗的文字左右分别用两个*号包起来</p></li><li><p><strong>斜体</strong><br>要倾斜的文字左右分别用一个*号包起来</p></li><li><p><strong>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</p></li><li><p><strong>删除线</strong><br>要加删除线的文字左右分别用两个~~号包起来</p></li></ol><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><p>  <strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h3 id="四-引用"><a href="#四-引用" class="headerlink" title="四.引用"></a>四.引用</h3><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h3 id="五-分割线"><a href="#五-分割线" class="headerlink" title="五.分割线"></a>五.分割线</h3><p>三个 - 或者 * 都可以。</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure></p><p><strong>效果如下：</strong></p><hr><hr><p>可以看到，显示效果是一样的。</p><h3 id="六-图片"><a href="#六-图片" class="headerlink" title="六.图片"></a>六.图片</h3><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br></pre></td></tr></table></figure><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;</span><br><span class="line">u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong><br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p><h3 id="七-超链接"><a href="#七-超链接" class="headerlink" title="七.超链接"></a>七.超链接</h3><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure><br>title可加可不加<br><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="八-列表"><a href="#八-列表" class="headerlink" title="八.列表"></a>八.列表</h3><ol><li><p><strong>无序列表</strong><br><strong>语法：</strong><br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p><strong>效果如下：</strong></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul></li><li><p><strong>有序列表</strong><br><strong>语法：</strong><br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>注意：序号跟内容之间要有空格<br><strong>效果如下：</strong></p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol></li><li><p><strong>列表嵌套</strong><br>上一级和下一级之间敲三个空格即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 一级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 一级有序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">2. 一级有序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ol></li></ol><h3 id="九-表格"><a href="#九-表格" class="headerlink" title="九.表格"></a>九.表格</h3><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure><br><strong>第二行分割表头和内容。</strong></p><ul><li>两边加：表示文字居中</li><li>右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</li></ul><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|最强技能|排位名次</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><div class="table-container"><table><thead><tr><th>姓名</th><th style="text-align:center">最强技能</th><th style="text-align:right">排位名次</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table></div><h3 id="十-标题"><a href="#十-标题" class="headerlink" title="十.标题"></a>十.标题</h3><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p><strong>注：</strong>标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><p>作者：高鸿祥<br>链接：<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite的介绍及使用</title>
      <link href="2017/11/08/SQLite%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>2017/11/08/SQLite%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h3><p>零零散散钻研了2天的SQLite的，终于有个基本的认识，说来没脸，正式工作20个月了，还真没用过的SQLite存储数据，因为我负责的公司项目都不需要联网，没有什么复杂的数据需存储，一般用SharedPreferences处理就行了！</p><h3 id="二-SQLite的介绍"><a href="#二-SQLite的介绍" class="headerlink" title="二.SQLite的介绍"></a>二.SQLite的介绍</h3><p>SQLite是一款轻型的数据库，它的设计目标是嵌入式的，占用资源非常低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持Windows / Linux / Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如Tcl，PHP，Java，C ++，.Net等，还有ODBC接口，同样比起Mysql，PostgreSQL这两款开源世界着名的数据库管理系统来讲，它的处理速度比他们都快。</p><p><strong>特点：</strong></p><ul><li>轻量级：它是进程内的数据库引擎，因此不存在数据库的客户端和服务器</li><li>单一文件：数据库中所有的信息（比如表，视图等）都包含在一个文件内这个文件可以自由复制到其它目录或其它机器上</li><li>不需要安装</li><li>跨平台/可移植</li><li>开源</li></ul><h3 id="三-SQLiteDatabase的介绍"><a href="#三-SQLiteDatabase的介绍" class="headerlink" title="三.SQLiteDatabase的介绍"></a>三.SQLiteDatabase的介绍</h3><p><strong>SQLite数据类型</strong></p><p>一般数据采用的固定的数据类型，而SQLite采用的是动态数据类型，会根据存入值自动判断。<br>SQLite具有以下五种常用的数据类型：</p><div class="table-container"><table><thead><tr><th>类型</th><th>释义</th></tr></thead><tbody><tr><td>NULL</td><td>这个值为空值</td></tr><tr><td>VARCHAR（n）</td><td>长度</td></tr><tr><td>CHAR（n）</td><td>长度固定为n的字串，n不能超过254.</td></tr><tr><td>INTEGER</td><td>值被标识为整数，依据值的大小可以依次被字段，n不能超过存储为1,2,3,4,5,6,7,8。</td></tr><tr><td>REAL</td><td>所有值都是浮动的数值，被存储为8字节的IEEE浮动标记序号。</td></tr><tr><td>TEXT</td><td>值为文本字符串，使用数据库编码存储（TUTF-8，UTF-16BE或UTF-16-LE）。</td></tr><tr><td>BLOB</td><td>值是BLOB数据块，以输入的数据格式进行存储。如何输入就如何存储，不改变格式。</td></tr><tr><td>DATA</td><td>包含了年份，月份，日期。</td></tr><tr><td>TIME</td><td>包含了小时，分钟，秒。</td></tr></tbody></table></div><p><strong>常用方法：</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>释义</th></tr></thead><tbody><tr><td>openOrCreateDatabase(String path,SQLiteDatabase.CursorFactory factory)</td><td>打开或创建数据库</td></tr><tr><td>insert(String table,String nullColumnHack,ContentValues values)</td><td>插入一条记录</td></tr><tr><td>delete(String table,String whereClause,String[] whereArgs)</td><td>删除一条记录</td></tr><tr><td>query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy)</td><td>查询一条记录</td></tr><tr><td>update(String table,ContentValues values,String whereClause,String[] whereArgs)</td><td>修改记录</td></tr><tr><td>execSQL(String sql)</td><td>执行一条SQL语句</td></tr><tr><td>close()</td><td>关闭数据库</td></tr></tbody></table></div><h3 id="四-一步一步实现"><a href="#四-一步一步实现" class="headerlink" title="四.一步一步实现"></a>四.一步一步实现</h3><p><img src="640.jpg" alt="image"></p><p><strong>创建一个继承在SQLiteOpenHelper的类</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String sql &#x3D; &quot;create table if not exists &quot; + TABLE_NAME + &quot; (Version integer , Id integer primary key, CustomName text, OrderPrice integer, Country text)&quot;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate(SQLiteDatabase sqLiteDatabase)&#123;</span><br><span class="line">    sqLiteDatabase.execSQL(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onUpgrade(SQLiteDatabase sqLiteDatabase,int oldVersion, int newVersion)&#123;        </span><br><span class="line">    String sql &#x3D; &quot;DROP TABLE IF EXISTS &quot; + TABLE_NAME;</span><br><span class="line">     sqLiteDatabase.execSQL(sql);</span><br><span class="line">     onCreate(sqLiteDatabase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>创建一个OrderDao用于处理所有的数据操作，在OrderDao中实例化OrderDBHelper</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class OrderDao&#123;</span><br><span class="line">  </span><br><span class="line">public OrderDao(Context context)&#123;</span><br><span class="line">    </span><br><span class="line">    this.context &#x3D; context;</span><br><span class="line">    ordersDBHelper &#x3D; new OrderDBHelper(context,null, null, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>增/删/改/查</strong><br>对于“增删改”这种对表内容变换的操作，我们需要先调用getWritableDatabase（），在执行的时候可以调用通用的execSQL（String sql）方法或对应的操作API：insert（），delete（），更新（）。</p><p>而对“查”，需要调用getReadableDatabase（），这时就不能使用execSQL方法了，得使用查询（）或rawQuery（）方法</p><p><strong>增</strong></p><ul><li>首先填充一些数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 初始化数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">        db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">        db.beginTransaction();</span><br><span class="line">        db.execSQL(&quot;insert into &quot; + OrderDBHelper.TABLE_NAME +&quot; ( Id, CustomName, OrderPrice, Country) values ( 1, &#39;Arc&#39;, 100, &#39;China&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot;+OrderDBHelper.TABLE_NAME +&quot; ( Id, CustomName, OrderPrice, Country) values ( 2, &#39;Bor&#39;, 200, &#39;USA&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot;+ OrderDBHelper.TABLE_NAME +&quot; ( Id, CustomName, OrderPrice, Country) values ( 3, &#39;Cut&#39;, 500, &#39;Japan&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot;+ OrderDBHelper.TABLE_NAME + &quot; ( Id, CustomName, OrderPrice, Country) values ( 4, &#39;Bor&#39;, 300, &#39;USA&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot; + OrderDBHelper.TABLE_NAME + &quot; ( Id, CustomName, OrderPrice, Country) values ( 5, &#39;Arc&#39;, 600, &#39;China&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot; + OrderDBHelper.TABLE_NAME + &quot; ( Id, CustomName, OrderPrice, Country) values ( 6, &#39;Doom&#39;, 200, &#39;China&#39;)&quot;);</span><br><span class="line">        db.setTransactionSuccessful();</span><br></pre></td></tr></table></figure><ul><li>增加一条数据：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 新增一条数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">        db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">        db.beginTransaction();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; insert into Orders(Id, CustomName, OrderPrice, Country) values (7, &quot;Jne&quot;, 700, &quot;China&quot;);    </span><br><span class="line">        ContentValues contentValues &#x3D; new ContentValues();</span><br><span class="line">        contentValues.put(&quot;Id&quot;, 7);</span><br><span class="line">        contentValues.put(&quot;CustomName&quot;, &quot;Jne&quot;);</span><br><span class="line">        contentValues.put(&quot;OrderPrice&quot;, 700);</span><br><span class="line">        contentValues.put(&quot;Country&quot;, &quot;China&quot;);</span><br><span class="line">        db.insertOrThrow(OrderDBHelper.TABLE_NAME, null, contentValues);</span><br><span class="line">        db.setTransactionSuccessful(); </span><br><span class="line">        return true;</span><br></pre></td></tr></table></figure><p><strong>删</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">    db.beginTransaction();</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F; delete from Orders where Id &#x3D; 7     </span><br><span class="line">   db.delete(OrderDBHelper.TABLE_NAME, &quot;Id &#x3D; ?&quot;, new String[]&#123;String.valueOf(7)&#125;);      </span><br><span class="line">     db.setTransactionSuccessful();</span><br></pre></td></tr></table></figure><br>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    public int delete(String table, &#x2F;&#x2F;表名          </span><br><span class="line">    String whereClause,&#x2F;&#x2F;删除条目判断   </span><br><span class="line">    String[] whereArgs &#x2F;&#x2F;删除位置) &#123;</span><br><span class="line">        acquireReference();      </span><br><span class="line">        try&#123;            </span><br><span class="line">            SQLiteStatement statement &#x3D;  new SQLiteStatement(this, &quot;DELETE FROM &quot; + table +  (!TextUtils.isEmpty(whereClause) ? &quot; WHERE &quot; + whereClause : &quot;&quot;), whereArgs);</span><br><span class="line">            try&#123;</span><br><span class="line">                return statement.executeUpdateDelete(); </span><br><span class="line">            &#125;finally &#123;            </span><br><span class="line">                statement.close();       &#125;      </span><br><span class="line">            &#125;</span><br><span class="line">        finally&#123;</span><br><span class="line">            releaseReference(); </span><br><span class="line">             &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>改</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">db.beginTransaction();</span><br><span class="line">&#x2F;&#x2F; update Orders set OrderPrice &#x3D; 800 where Id &#x3D; 6</span><br><span class="line">ContentValues cv &#x3D; new ContentValues();</span><br><span class="line">cv.put(&quot;OrderPrice&quot;, 800); </span><br><span class="line">&#x2F;&#x2F;需要改的内容</span><br><span class="line">db.update(OrderDBHelper.TABLE_NAME,                </span><br><span class="line"> cv,&quot;Id &#x3D; ?&quot;,new String[]&#123;String.valueOf(6)&#125;);</span><br><span class="line">&#x2F;&#x2F;需要改的位置</span><br><span class="line">db.setTransactionSuccessful();</span><br></pre></td></tr></table></figure></p><p><strong>查</strong><br><img src="641.PNG" alt="IMAGE"></p><ul><li>单数据查询：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        db &#x3D; ordersDBHelper.getReadableDatabase();</span><br><span class="line">        &#x2F;&#x2F; select * from Orders where CustomName &#x3D; &#39;Bor&#39;</span><br><span class="line">        cursor &#x3D; db.query(OrderDBHelper.TABLE_NAME,&#x2F;&#x2F;table:表名称</span><br><span class="line">                        ORDER_COLUMNS,        &#x2F;&#x2F;columns:列名称数组               </span><br><span class="line">                        &quot;CustomName &#x3D; ?&quot;, &#x2F;&#x2F;selection:条件字句，相当于where</span><br><span class="line">                        new String[] &#123;name&#125;, &#x2F;&#x2F;selectionArgs:条件字句，参数数组</span><br><span class="line">                        null, &#x2F;&#x2F;orderBy:排序列</span><br><span class="line">                        null, &#x2F;&#x2F;having:分组条件</span><br><span class="line">                        null);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;orderBy:排序列</span><br><span class="line">       if (cursor.getCount() &gt; 0) &#123; &#x2F;&#x2F;将cursor数据放到Order队列中</span><br><span class="line">        List&lt;Order&gt; orderList &#x3D; new ArrayList&lt;Order&gt;(cursor.getCount());        </span><br><span class="line">        while (cursor.moveToNext()) &#123;</span><br><span class="line">            Order order &#x3D; parseOrder(cursor);</span><br><span class="line">            orderList.add(order);            </span><br><span class="line">            &#125;</span><br><span class="line">        return orderList;         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总数查询：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db &#x3D; ordersDBHelper.getReadableDatabase();</span><br><span class="line">&#x2F;&#x2F; select count(Id) from Orders where Country &#x3D; &#39;China&#39;</span><br><span class="line">cursor &#x3D; db.query(OrderDBHelper.TABLE_NAME,new String[]&#123;</span><br><span class="line">    &quot;COUNT(Id)&quot;&#125;,                &quot;Country &#x3D; ?&quot;,             </span><br><span class="line">new String[] &#123;&quot;China&quot;&#125;,null, null, null);</span><br><span class="line"></span><br><span class="line">if (cursor.moveToFirst()) &#123;</span><br><span class="line">    count &#x3D; cursor.getInt(0);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>比较查询：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db &#x3D; ordersDBHelper.getReadableDatabase();</span><br><span class="line">&#x2F;&#x2F; select Id, CustomName, Max(OrderPrice) as OrderPrice, Country from Orders</span><br><span class="line">cursor &#x3D; db.query(OrderDBHelper.TABLE_NAME, new String[]&#123;</span><br><span class="line">    &quot;Version&quot;,&quot;Id&quot;,&quot;CustomName&quot;,</span><br><span class="line">    &quot;Max(OrderPrice) as OrderPrice&quot;,</span><br><span class="line">    &quot;Country&quot;&#125;,null, null, null, null, null);</span><br><span class="line">       </span><br><span class="line">if (cursor.getCount() &gt; 0)&#123;</span><br><span class="line">        if (cursor.moveToFirst()) &#123;                </span><br><span class="line">            return parseOrder(cursor);            </span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
