<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XNewWork使用笔记</title>
      <link href="2021/03/31/XNewWork%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/31/XNewWork%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码"><a href="#一-代码" class="headerlink" title="一.代码"></a>一.代码</h3><p><a href="https://github.com/itemuse/XTester/tree/master/network" target="_blank" rel="noopener">XTester-network</a><br><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/network/XNetwork.java" target="_blank" rel="noopener">xlib-Network</a></p><h3 id="二-demo"><a href="#二-demo" class="headerlink" title="二.demo"></a>二.demo</h3><p><img src="img.gif" alt="img"></p><h3 id="三-方法"><a href="#三-方法" class="headerlink" title="三.方法"></a>三.方法</h3><ul><li><h4 id="打开网络设置界面"><a href="#打开网络设置界面" class="headerlink" title="打开网络设置界面"></a>打开网络设置界面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Open the settings of wireless.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void openWirelessSettings() &#123;</span><br><span class="line">    getApp().startActivity(</span><br><span class="line">            new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS)</span><br><span class="line">                    .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断网络是否连接"><a href="#判断网络是否连接" class="headerlink" title="判断网络是否连接"></a>判断网络是否连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">public static boolean isConnected() &#123;</span><br><span class="line">    NetworkInfo info &#x3D; getActiveNetworkInfo();</span><br><span class="line">    return info !&#x3D; null &amp;&amp; info.isConnected();</span><br><span class="line">&#125;</span><br><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">private static NetworkInfo getActiveNetworkInfo() &#123;</span><br><span class="line">    ConnectivityManager cm &#x3D;</span><br><span class="line">            (ConnectivityManager) getApp().getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">    if (cm &#x3D;&#x3D; null) return null;</span><br><span class="line">    return cm.getActiveNetworkInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断网络是否可用"><a href="#判断网络是否可用" class="headerlink" title="判断网络是否可用"></a>判断网络是否可用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(INTERNET)</span><br><span class="line">public static boolean isAvailableByDns(final String domain) &#123;</span><br><span class="line">    final String realDomain &#x3D; TextUtils.isEmpty(domain) ? &quot;www.baidu.com&quot; : domain;</span><br><span class="line">    InetAddress inetAddress;</span><br><span class="line">    try &#123;</span><br><span class="line">        inetAddress &#x3D; InetAddress.getByName(realDomain);</span><br><span class="line">        return inetAddress !&#x3D; null;</span><br><span class="line">    &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断移动数据是否打开"><a href="#判断移动数据是否打开" class="headerlink" title="判断移动数据是否打开"></a>判断移动数据是否打开</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(MODIFY_PHONE_STATE)</span><br><span class="line">public static boolean getMobileDataEnabled() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        TelephonyManager tm &#x3D;</span><br><span class="line">                (TelephonyManager) getApp().getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">        if (tm &#x3D;&#x3D; null) return false;</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O)  &#123;</span><br><span class="line">                return tm.isDataEnabled();</span><br><span class="line">        &#125;</span><br><span class="line">        @SuppressLint(&quot;PrivateApi&quot;)</span><br><span class="line">        Method getMobileDataEnabledMethod &#x3D;</span><br><span class="line">                tm.getClass().getDeclaredMethod(&quot;getDataEnabled&quot;);</span><br><span class="line">        if (null !&#x3D; getMobileDataEnabledMethod) &#123;</span><br><span class="line">            return (boolean) getMobileDataEnabledMethod.invoke(tm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断网络是否是移动数据"><a href="#判断网络是否是移动数据" class="headerlink" title="判断网络是否是移动数据"></a>判断网络是否是移动数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">public static boolean isMobileData() &#123;</span><br><span class="line">    NetworkInfo info &#x3D; getActiveNetworkInfo();</span><br><span class="line">    return null !&#x3D; info</span><br><span class="line">            &amp;&amp; info.isAvailable()</span><br><span class="line">            &amp;&amp; info.getType() &#x3D;&#x3D; ConnectivityManager.TYPE_MOBILE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断网络是否是-4G、5G"><a href="#判断网络是否是-4G、5G" class="headerlink" title="判断网络是否是 4G、5G"></a>判断网络是否是 4G、5G</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return whether using 4G.</span><br><span class="line"> * &lt;p&gt;Must hold &#123;@code &lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot; &#x2F;&gt;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">public static boolean is4G() &#123;</span><br><span class="line">    NetworkInfo info &#x3D; getActiveNetworkInfo();</span><br><span class="line">    return info !&#x3D; null</span><br><span class="line">            &amp;&amp; info.isAvailable()</span><br><span class="line">            &amp;&amp; info.getSubtype() &#x3D;&#x3D; TelephonyManager.NETWORK_TYPE_LTE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Return whether using 4G.</span><br><span class="line"> * &lt;p&gt;Must hold &#123;@code &lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot; &#x2F;&gt;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">public static boolean is5G() &#123;</span><br><span class="line">    NetworkInfo info &#x3D; getActiveNetworkInfo();</span><br><span class="line">    return info !&#x3D; null</span><br><span class="line">            &amp;&amp; info.isAvailable()</span><br><span class="line">            &amp;&amp; info.getSubtype() &#x3D;&#x3D; TelephonyManager.NETWORK_TYPE_NR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">private static NetworkInfo getActiveNetworkInfo() &#123;</span><br><span class="line">    ConnectivityManager cm &#x3D;</span><br><span class="line">            (ConnectivityManager) getApp().getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">    if (cm &#x3D;&#x3D; null) return null;</span><br><span class="line">    return cm.getActiveNetworkInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断-wifi-是否打开"><a href="#判断-wifi-是否打开" class="headerlink" title="判断 wifi 是否打开"></a>判断 wifi 是否打开</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(ACCESS_WIFI_STATE)</span><br><span class="line">public static boolean getWifiEnabled() &#123;</span><br><span class="line">    @SuppressLint(&quot;WifiManagerLeak&quot;)</span><br><span class="line">    WifiManager manager &#x3D; (WifiManager) getApp().getSystemService(WIFI_SERVICE);</span><br><span class="line">    if (manager &#x3D;&#x3D; null) return false;</span><br><span class="line">    return manager.isWifiEnabled();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="打开或关闭-wifi"><a href="#打开或关闭-wifi" class="headerlink" title="打开或关闭 wifi"></a>打开或关闭 wifi</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(CHANGE_WIFI_STATE)</span><br><span class="line">public static void setWifiEnabled(final boolean enabled) &#123;</span><br><span class="line">    @SuppressLint(&quot;WifiManagerLeak&quot;)</span><br><span class="line">    WifiManager manager &#x3D; (WifiManager) getApp().getSystemService(WIFI_SERVICE);</span><br><span class="line">    if (manager &#x3D;&#x3D; null) return;</span><br><span class="line">    if (enabled &#x3D;&#x3D; manager.isWifiEnabled()) return;</span><br><span class="line">    manager.setWifiEnabled(enabled);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断-wifi-是否连接状态"><a href="#判断-wifi-是否连接状态" class="headerlink" title="判断 wifi 是否连接状态"></a>判断 wifi 是否连接状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">public static boolean isWifiConnected() &#123;</span><br><span class="line">    ConnectivityManager cm &#x3D;</span><br><span class="line">            (ConnectivityManager) getApp().getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">    if (cm &#x3D;&#x3D; null) return false;</span><br><span class="line">    NetworkInfo ni &#x3D; cm.getActiveNetworkInfo();</span><br><span class="line">    return ni !&#x3D; null &amp;&amp; ni.getType() &#x3D;&#x3D; ConnectivityManager.TYPE_WIFI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取当前网络类型"><a href="#获取当前网络类型" class="headerlink" title="获取当前网络类型"></a>获取当前网络类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(ACCESS_NETWORK_STATE)</span><br><span class="line">public static NetworkType getNetworkType() &#123;</span><br><span class="line">    if (isEthernet()) &#123;</span><br><span class="line">        return NetworkType.NETWORK_ETHERNET;</span><br><span class="line">    &#125;</span><br><span class="line">    NetworkInfo info &#x3D; getActiveNetworkInfo();</span><br><span class="line">    if (info !&#x3D; null &amp;&amp; info.isAvailable()) &#123;</span><br><span class="line">        if (info.getType() &#x3D;&#x3D; ConnectivityManager.TYPE_WIFI) &#123;</span><br><span class="line">            return NetworkType.NETWORK_WIFI;</span><br><span class="line">        &#125; else if (info.getType() &#x3D;&#x3D; ConnectivityManager.TYPE_MOBILE) &#123;</span><br><span class="line">            switch (info.getSubtype()) &#123;</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_GSM:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_GPRS:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_CDMA:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_EDGE:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_1xRTT:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_IDEN:</span><br><span class="line">                    return NetworkType.NETWORK_2G;</span><br><span class="line"></span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_TD_SCDMA:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_EVDO_A:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_UMTS:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_EVDO_0:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_HSDPA:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_HSUPA:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_HSPA:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_EVDO_B:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_EHRPD:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_HSPAP:</span><br><span class="line">                    return NetworkType.NETWORK_3G;</span><br><span class="line"></span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_IWLAN:</span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_LTE:</span><br><span class="line">                    return NetworkType.NETWORK_4G;</span><br><span class="line"></span><br><span class="line">                case TelephonyManager.NETWORK_TYPE_NR:</span><br><span class="line">                    return NetworkType.NETWORK_5G;</span><br><span class="line">                default:</span><br><span class="line">                    String subtypeName &#x3D; info.getSubtypeName();</span><br><span class="line">                    if (subtypeName.equalsIgnoreCase(&quot;TD-SCDMA&quot;)</span><br><span class="line">                            || subtypeName.equalsIgnoreCase(&quot;WCDMA&quot;)</span><br><span class="line">                            || subtypeName.equalsIgnoreCase(&quot;CDMA2000&quot;)) &#123;</span><br><span class="line">                        return NetworkType.NETWORK_3G;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return NetworkType.NETWORK_UNKNOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return NetworkType.NETWORK_UNKNOWN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NetworkType.NETWORK_NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取-IP-地址"><a href="#获取-IP-地址" class="headerlink" title="获取 IP 地址"></a>获取 IP 地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the ip address.</span><br><span class="line"> * &lt;p&gt;Must hold &#123;@code &lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @param useIPv4 True to use ipv4, false otherwise.</span><br><span class="line"> * @return the ip address</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequiresPermission(INTERNET)</span><br><span class="line">public static String getIPAddress(final boolean useIPv4) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; nis &#x3D; NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        LinkedList&lt;InetAddress&gt; adds &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line">        while (nis.hasMoreElements()) &#123;</span><br><span class="line">            NetworkInterface ni &#x3D; nis.nextElement();</span><br><span class="line">            &#x2F;&#x2F; To prevent phone of xiaomi return &quot;10.0.2.15&quot;</span><br><span class="line">            if (!ni.isUp() || ni.isLoopback()) continue;</span><br><span class="line">            Enumeration&lt;InetAddress&gt; addresses &#x3D; ni.getInetAddresses();</span><br><span class="line">            while (addresses.hasMoreElements()) &#123;</span><br><span class="line">                adds.addFirst(addresses.nextElement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (InetAddress add : adds) &#123;</span><br><span class="line">            if (!add.isLoopbackAddress()) &#123;</span><br><span class="line">                String hostAddress &#x3D; add.getHostAddress();</span><br><span class="line">                boolean isIPv4 &#x3D; hostAddress.indexOf(&#39;:&#39;) &lt; 0;</span><br><span class="line">                if (useIPv4) &#123;</span><br><span class="line">                    if (isIPv4) return hostAddress;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (!isIPv4) &#123;</span><br><span class="line">                        int index &#x3D; hostAddress.indexOf(&#39;%&#39;);</span><br><span class="line">                        return index &lt; 0</span><br><span class="line">                                ? hostAddress.toUpperCase()</span><br><span class="line">                                : hostAddress.substring(0, index).toUpperCase();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (SocketException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取域名-IP-地址"><a href="#获取域名-IP-地址" class="headerlink" title="获取域名 IP 地址"></a>获取域名 IP 地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(INTERNET)</span><br><span class="line">public static String getDomainAddress(final String domain) &#123;</span><br><span class="line">    InetAddress inetAddress;</span><br><span class="line">    try &#123;</span><br><span class="line">        inetAddress &#x3D; InetAddress.getByName(domain);</span><br><span class="line">        return inetAddress.getHostAddress();</span><br><span class="line">    &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="根据-WiFi-获取网络-IP-地址"><a href="#根据-WiFi-获取网络-IP-地址" class="headerlink" title="根据 WiFi 获取网络 IP 地址"></a>根据 WiFi 获取网络 IP 地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequiresPermission(ACCESS_WIFI_STATE)</span><br><span class="line">public static String getIpAddressByWifi() &#123;</span><br><span class="line">    @SuppressLint(&quot;WifiManagerLeak&quot;)</span><br><span class="line">    WifiManager wm &#x3D; (WifiManager) getApp().getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">    if (wm &#x3D;&#x3D; null) return &quot;&quot;;</span><br><span class="line">    return Formatter.formatIpAddress(wm.getDhcpInfo().ipAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="网络状态改变监听器"><a href="#网络状态改变监听器" class="headerlink" title="网络状态改变监听器"></a>网络状态改变监听器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">XNetwork.registerNetworkStatusChangedListener(new XNetwork.OnNetworkStatusChangedListener() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void onDisconnected() &#123;</span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         public void onConnected(XNetwork.NetworkType networkType) &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></li><li><h4 id="wifi列表更新监听器"><a href="#wifi列表更新监听器" class="headerlink" title="wifi列表更新监听器"></a>wifi列表更新监听器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">XNetwork.addOnWifiChangedConsumer(new XApp.Consumer&lt;WifiScanResults&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(WifiScanResults wifiScanResults) &#123;</span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></li><li><h4 id="获取-WIFI-列表"><a href="#获取-WIFI-列表" class="headerlink" title="获取 WIFI 列表"></a>获取 WIFI 列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WifiScanResults wifiScanResults &#x3D; XNetwork.getWifiScanResult();</span><br><span class="line">List&lt;ScanResult&gt; scanResults &#x3D; wifiScanResults.getFilterResults();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> NetWork </tag>
            
            <tag> TelephonyManager </tag>
            
            <tag> WifiManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewPager2使用笔记</title>
      <link href="2021/03/30/ViewPager2%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/30/ViewPager2%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><p><a href="https://github.com/itemuse/XTester/tree/master/fragment+tab+viewpager2" target="_blank" rel="noopener">XTester-fragment+tab+viewpager2</a></p><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.google.android.material:material:1.2.1&#39;</span><br><span class="line">implementation &#39;androidx.viewpager:viewpager:1.0.0&#39;</span><br></pre></td></tr></table></figure><h3 id="三-实现"><a href="#三-实现" class="headerlink" title="三.实现"></a>三.实现</h3><ul><li><h4 id="基本效果"><a href="#基本效果" class="headerlink" title="基本效果"></a>基本效果</h4><ul><li>xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.viewpager.widget.ViewPager</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;_vp&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mViewPager &#x3D; findViewById(R.id.viewpager2);</span><br><span class="line">mAdapter &#x3D; new ViewPager2Adapter(this);</span><br><span class="line">mViewPager.setAdapter(mAdapter);</span><br><span class="line">mViewPager.setOrientation(ViewPager2.ORIENTATION_HORIZONTAL); &#x2F;&#x2F;设置ViewPager2滑动方向  ORIENTATION_VERTICAL</span><br><span class="line">fragments.add(new Fragment1(mViewPager));</span><br><span class="line">fragments.add(new Fragment2(mViewPager));</span><br></pre></td></tr></table></figure></li><li><p>FragmentStateAdapter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class ViewPager2Adapter extends FragmentStateAdapter &#123;</span><br><span class="line">    public ViewPager2Adapter(FragmentActivity fragmentActivity) &#123;</span><br><span class="line">        super(fragmentActivity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Fragment createFragment(int position) &#123;</span><br><span class="line">        return fragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return fragments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>横向效果图<br><img src="img1.gif" alt="IMG"></li><li>纵向效果图<br><img src="img2.gif" alt="IMG"></li></ul></li><li><h4 id="根据PageTransformer做渐变效果"><a href="#根据PageTransformer做渐变效果" class="headerlink" title="根据PageTransformer做渐变效果"></a>根据PageTransformer做渐变效果</h4><ul><li>ViewPager2.PageTransformer<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    public class MyPageTransformer implements ViewPager2.PageTransformer &#123;</span><br><span class="line"></span><br><span class="line">    private static final float ROT_MAX &#x3D; 20.0f;</span><br><span class="line">    private float mRot;</span><br><span class="line">    private static float MIN_SCALE &#x3D; 0.75f;</span><br><span class="line">    private static float MIN_ALPHA &#x3D; 0.5f;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param view     滑动中的那个view</span><br><span class="line">     * @param position</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void transformPage(View view, float position) &#123;</span><br><span class="line"></span><br><span class="line">        int pageWidth &#x3D; view.getWidth();</span><br><span class="line">        if (position &lt; -1) &#123; &#x2F;&#x2F; [-Infinity,-1)&#x2F;&#x2F;This page is way off-screen to the left.</span><br><span class="line">            view.setAlpha(0);</span><br><span class="line">        &#125; else if (position &lt;&#x3D; 0) &#123; &#x2F;&#x2F; [-1,0]Use &#x2F;&#x2F;the default slide transition when moving to the left page</span><br><span class="line">            view.setAlpha(1);</span><br><span class="line">            view.setTranslationX(0);</span><br><span class="line">            view.setScaleX(1);</span><br><span class="line">            view.setScaleY(1);</span><br><span class="line">        &#125; else if (position &lt;&#x3D; 1) &#123; &#x2F;&#x2F; (0,1]&#x2F;&#x2F; Fade the page out.</span><br><span class="line">            view.setAlpha(1 - position);</span><br><span class="line">            &#x2F;&#x2F; Counteract the default slide transition</span><br><span class="line">            view.setTranslationX(pageWidth * -position);</span><br><span class="line">            &#x2F;&#x2F; Scale the page down (between MIN_SCALE and 1)</span><br><span class="line">            float scaleFactor &#x3D; MIN_SCALE + (1 - MIN_SCALE)</span><br><span class="line">                    * (1 - Math.abs(position));</span><br><span class="line">            view.setScaleX(scaleFactor);</span><br><span class="line">            view.setScaleY(scaleFactor);</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; (1,+Infinity]</span><br><span class="line">            &#x2F;&#x2F; This page is way off-screen to the right.</span><br><span class="line">            view.setAlpha(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>activity中设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mViewPager.setPageTransformer(new MyPageTransformer());</span><br></pre></td></tr></table></figure></li><li>横向效果图<br><img src="img4.gif" alt="IMG"></li><li>纵向效果图<br><img src="img3.gif" alt="IMG"></li></ul></li><li><h4 id="与Tab联动"><a href="#与Tab联动" class="headerlink" title="与Tab联动"></a>与Tab联动</h4><ul><li>xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &lt;com.google.android.material.tabs.TabLayout</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    app:tabGravity&#x3D;&quot;fill&quot;</span><br><span class="line">    app:tabMode&#x3D;&quot;fixed&quot;</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;_tab&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line">&lt;&#x2F;com.google.android.material.tabs.TabLayout&gt;</span><br></pre></td></tr></table></figure></li><li>abLayoutMediator<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private TabLayoutMediator mediator;</span><br><span class="line">private List&lt;String&gt; mTitle;</span><br><span class="line">TabLayout mTabLayout;</span><br><span class="line">    ...</span><br><span class="line">        mTitle &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        mTitle.add(&quot;播放界面&quot;);</span><br><span class="line">        mTitle.add(&quot;歌曲界面&quot;);</span><br><span class="line">    mTabLayout &#x3D; (TabLayout)findViewById(R.id._tab);</span><br><span class="line">       mediator &#x3D; new TabLayoutMediator(mTabLayout, mViewPager, new TabLayoutMediator.TabConfigurationStrategy() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onConfigureTab(TabLayout.Tab tab, int position) &#123;</span><br><span class="line">            TextView tabView &#x3D; new TextView(Activity.this);</span><br><span class="line">            tabView.setText(mTitle.get(position));</span><br><span class="line">            tabView.setTextColor(getColor(R.color.design_default_color_primary));</span><br><span class="line">            tab.setCustomView(tabView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mediator.attach();</span><br></pre></td></tr></table></figure></li><li>效果图<br><img src="img5.gif" alt="IMG"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fragment </tag>
            
            <tag> tab </tag>
            
            <tag> viewpager2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PackageManager基础</title>
      <link href="2021/03/25/PackageManager%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/25/PackageManager%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/app/XApplication.java" target="_blank" rel="noopener">xlib-Application</a></li><li><a href="https://github.com/itemuse/XTester/tree/master/packagemanger" target="_blank" rel="noopener">XTester-packagemanger</a></li></ul><h3 id="二-引用方式"><a href="#二-引用方式" class="headerlink" title="二.引用方式"></a>二.引用方式</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidManifest.xml中添加UID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:sharedUserId&#x3D;&quot;android.uid.system&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-demo"><a href="#三-demo" class="headerlink" title="三.demo"></a>三.demo</h3><p><img src="list.gif" alt="list"></p><h3 id="四-PackageManager几个方法"><a href="#四-PackageManager几个方法" class="headerlink" title="四.PackageManager几个方法"></a>四.PackageManager几个方法</h3><ul><li><h4 id="判断APP是否安装"><a href="#判断APP是否安装" class="headerlink" title="判断APP是否安装"></a>判断APP是否安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return whether the app is installed.</span><br><span class="line"> *</span><br><span class="line"> * @param pkgName The name of the package.</span><br><span class="line"> * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isAppInstalled(@NonNull final String pkgName) &#123;</span><br><span class="line">    PackageManager packageManager &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">    try &#123;</span><br><span class="line">        return packageManager.getApplicationInfo(pkgName, 0) !&#x3D; null;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断APP是否DEBUG版本"><a href="#判断APP是否DEBUG版本" class="headerlink" title="判断APP是否DEBUG版本"></a>判断APP是否DEBUG版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * Return whether it is a debug application.</span><br><span class="line">  *</span><br><span class="line">  * @param packageName The name of the package.</span><br><span class="line">  * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line">  *&#x2F;</span><br><span class="line"> public static boolean isAppDebug(final String packageName) &#123;</span><br><span class="line">     if (isSpace(packageName)) return false;</span><br><span class="line">     try &#123;</span><br><span class="line">         PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">         ApplicationInfo ai &#x3D; pm.getApplicationInfo(packageName, 0);</span><br><span class="line">         return ai !&#x3D; null &amp;&amp; (ai.flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) !&#x3D; 0;</span><br><span class="line">     &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         return false;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断APP是否系统应用"><a href="#判断APP是否系统应用" class="headerlink" title="判断APP是否系统应用"></a>判断APP是否系统应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return whether it is a system application.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isAppSystem(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return false;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        ApplicationInfo ai &#x3D; pm.getApplicationInfo(packageName, 0);</span><br><span class="line">        return ai !&#x3D; null &amp;&amp; (ai.flags &amp; ApplicationInfo.FLAG_SYSTEM) !&#x3D; 0;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="判断APP是否正在运行"><a href="#判断APP是否正在运行" class="headerlink" title="判断APP是否正在运行"></a>判断APP是否正在运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return whether application is running.</span><br><span class="line"> *</span><br><span class="line"> * @param pkgName The name of the package.</span><br><span class="line"> * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isAppRunning(@NonNull final String pkgName) &#123;</span><br><span class="line">    int uid;</span><br><span class="line">    PackageManager packageManager &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">    try &#123;</span><br><span class="line">        ApplicationInfo ai &#x3D; packageManager.getApplicationInfo(pkgName, 0);</span><br><span class="line">        if (ai &#x3D;&#x3D; null) return false;</span><br><span class="line">        uid &#x3D; ai.uid;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    ActivityManager am &#x3D; (ActivityManager) XApp.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">    if (am !&#x3D; null) &#123;</span><br><span class="line">        List&lt;ActivityManager.RunningTaskInfo&gt; taskInfo &#x3D; am.getRunningTasks(Integer.MAX_VALUE);</span><br><span class="line">        if (taskInfo !&#x3D; null &amp;&amp; taskInfo.size() &gt; 0) &#123;</span><br><span class="line">            for (ActivityManager.RunningTaskInfo aInfo : taskInfo) &#123;</span><br><span class="line">                if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.Q) &#123;</span><br><span class="line">                    if (pkgName.equals(aInfo.baseActivity.getPackageName())) &#123;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ActivityManager.RunningServiceInfo&gt; serviceInfo &#x3D; am.getRunningServices(Integer.MAX_VALUE);</span><br><span class="line">        if (serviceInfo !&#x3D; null &amp;&amp; serviceInfo.size() &gt; 0) &#123;</span><br><span class="line">            for (ActivityManager.RunningServiceInfo aInfo : serviceInfo) &#123;</span><br><span class="line">                if (uid &#x3D;&#x3D; aInfo.uid) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP图标"><a href="#获取APP图标" class="headerlink" title="获取APP图标"></a>获取APP图标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s icon.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s icon</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static Drawable getAppIcon(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return null;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        PackageInfo pi &#x3D; pm.getPackageInfo(packageName, 0);</span><br><span class="line">        return pi &#x3D;&#x3D; null ? null : pi.applicationInfo.loadIcon(pm);</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP名"><a href="#获取APP名" class="headerlink" title="获取APP名"></a>获取APP名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s name.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s name</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String getAppName(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return &quot;&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        PackageInfo pi &#x3D; pm.getPackageInfo(packageName, 0);</span><br><span class="line">        return pi &#x3D;&#x3D; null ? null : pi.applicationInfo.loadLabel(pm).toString();</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP路径"><a href="#获取APP路径" class="headerlink" title="获取APP路径"></a>获取APP路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s path.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s path</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String getAppPath(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return &quot;&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        PackageInfo pi &#x3D; pm.getPackageInfo(packageName, 0);</span><br><span class="line">        return pi &#x3D;&#x3D; null ? null : pi.applicationInfo.sourceDir;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP版名"><a href="#获取APP版名" class="headerlink" title="获取APP版名"></a>获取APP版名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s version name.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s version name</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String getAppVersionName(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return &quot;&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        PackageInfo pi &#x3D; pm.getPackageInfo(packageName, 0);</span><br><span class="line">        return pi &#x3D;&#x3D; null ? null : pi.versionName;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP版本号"><a href="#获取APP版本号" class="headerlink" title="获取APP版本号"></a>获取APP版本号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s version code.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s version code</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getAppVersionCode(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return -1;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        PackageInfo pi &#x3D; pm.getPackageInfo(packageName, 0);</span><br><span class="line">        return pi &#x3D;&#x3D; null ? -1 : pi.versionCode;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP签名"><a href="#获取APP签名" class="headerlink" title="获取APP签名"></a>获取APP签名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s signature.</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s signature</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static Signature[] getAppSignature(final String packageName) &#123;</span><br><span class="line">    if (isSpace(packageName)) return null;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        @SuppressLint(&quot;PackageManagerGetSignatures&quot;)</span><br><span class="line">        PackageInfo pi &#x3D; pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);</span><br><span class="line">        return pi &#x3D;&#x3D; null ? null : pi.signatures;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP的UI-ID"><a href="#获取APP的UI-ID" class="headerlink" title="获取APP的UI-ID"></a>获取APP的UI-ID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s user-ID.</span><br><span class="line"> *</span><br><span class="line"> * @param pkgName The name of the package.</span><br><span class="line"> * @return the application&#39;s signature for MD5 value</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getAppUid(String pkgName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ApplicationInfo ai &#x3D; XApp.getApp().getPackageManager().getApplicationInfo(pkgName, 0);</span><br><span class="line">        if (ai !&#x3D; null) &#123;</span><br><span class="line">            return ai.uid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取APP信息"><a href="#获取APP信息" class="headerlink" title="获取APP信息"></a>获取APP信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s information.</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;name of package&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;icon&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;name&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;path of package&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;version name&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;version code&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;is system&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;&#x2F;ul&gt;</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s information</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static AppInfo getAppInfo(final String packageName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        if (pm &#x3D;&#x3D; null) return null;</span><br><span class="line">        return getBean(pm, pm.getPackageInfo(packageName, 0));</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取-设置APP启用-禁用状态"><a href="#获取-设置APP启用-禁用状态" class="headerlink" title="获取/设置APP启用/禁用状态"></a>获取/设置APP启用/禁用状态</h4><ul><li>设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param packageName to hidden or show app</span><br><span class="line"> * @param enable true ENABLED ; false DISABLED</span><br><span class="line"> * need android:sharedUserId&#x3D;&quot;android.uid.system&quot;</span><br><span class="line"> *&#x2F;</span><br><span class="line">public void changeAppState(String packageName, boolean enable)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager packageManager &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        if(enable)&#123;</span><br><span class="line">            packageManager.setApplicationEnabledSetting(packageName,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,0);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            packageManager.setApplicationEnabledSetting(packageName,PackageManager.COMPONENT_ENABLED_STATE_DISABLED,0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        XLog.debug(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>获取<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   &#x2F;**</span><br><span class="line"> * @return</span><br><span class="line"> * -1 no intalled</span><br><span class="line"> *  1 ENABLED</span><br><span class="line"> *  2 DISABLED</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public int getAppState(String packageName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager packageManager &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        return packageManager.getApplicationEnabledSetting(packageName);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        XLog.debug(e.getMessage());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="获取-设置Activity启用-禁用状态"><a href="#获取-设置Activity启用-禁用状态" class="headerlink" title="获取/设置Activity启用/禁用状态"></a>获取/设置Activity启用/禁用状态</h4><ul><li>获取<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @return</span><br><span class="line"> * -1 no intalled</span><br><span class="line"> *  1 ENABLED</span><br><span class="line"> *  2 DISABLED</span><br><span class="line"> *&#x2F;</span><br><span class="line">public int getActivityState(ComponentName componentName)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager packageManager &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        return packageManager.getComponentEnabledSetting(componentName);</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param componentName to hidden or show activity</span><br><span class="line"> * @param enable true ENABLED ; false DISABLED</span><br><span class="line"> * need android:sharedUserId&#x3D;&quot;android.uid.system&quot;</span><br><span class="line"> *&#x2F;</span><br><span class="line">public void changActivityState(ComponentName componentName,boolean enable)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager packageManager &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        if (enable)&#123;</span><br><span class="line">            packageManager.setComponentEnabledSetting(componentName,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,0);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            packageManager.setComponentEnabledSetting(componentName,PackageManager.COMPONENT_ENABLED_STATE_DISABLED,0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        XLog.debug(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ComponentName mComponentName<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mComponentName &#x3D; new ComponentName(&quot;cn.xy.windowmanager&quot;,&quot;cn.xy.windowmanager.MainActivity&quot;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="获取APP信息-1"><a href="#获取APP信息-1" class="headerlink" title="获取APP信息"></a>获取APP信息</h4><ul><li>获取系统所有APP信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 获取系统所有APP信息</span><br><span class="line"> * Return the applications&#39; information.</span><br><span class="line"> *</span><br><span class="line"> * @return the applications&#39; information</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static List&lt;AppInfo&gt; getAppsInfo() &#123;</span><br><span class="line">    List&lt;AppInfo&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">    if (pm &#x3D;&#x3D; null) return list;</span><br><span class="line">    List&lt;PackageInfo&gt; installedPackages &#x3D; pm.getInstalledPackages(0);</span><br><span class="line">    for (PackageInfo pi : installedPackages) &#123;</span><br><span class="line">        AppInfo ai &#x3D; getBean(pm, pi);</span><br><span class="line">        if (ai &#x3D;&#x3D; null) continue;</span><br><span class="line">        list.add(ai);</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>获取某已安装APP信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s information.</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;name of package&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;icon&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;name&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;path of package&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;version name&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;version code&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;li&gt;is system&lt;&#x2F;li&gt;</span><br><span class="line"> * &lt;&#x2F;ul&gt;</span><br><span class="line"> *</span><br><span class="line"> * @param packageName The name of the package.</span><br><span class="line"> * @return the application&#39;s information</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static AppInfo getAppInfo(final String packageName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">        if (pm &#x3D;&#x3D; null) return null;</span><br><span class="line">        return getBean(pm, pm.getPackageInfo(packageName, 0));</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>获取某apk文件信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s package information.</span><br><span class="line"> * </span><br><span class="line"> * @return the application&#39;s package information</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static XApplication.AppInfo getApkInfo(final String apkFilePath) &#123;</span><br><span class="line">    if (isSpace(apkFilePath)) return null;</span><br><span class="line">    PackageManager pm &#x3D; XApp.getApp().getPackageManager();</span><br><span class="line">    if (pm &#x3D;&#x3D; null) return null;</span><br><span class="line">    PackageInfo pi &#x3D; pm.getPackageArchiveInfo(apkFilePath, 0);</span><br><span class="line">    if (pi &#x3D;&#x3D; null) return null;</span><br><span class="line">    ApplicationInfo appInfo &#x3D; pi.applicationInfo;</span><br><span class="line">    appInfo.sourceDir &#x3D; apkFilePath;</span><br><span class="line">    appInfo.publicSourceDir &#x3D; apkFilePath;</span><br><span class="line">    return getBean(pm, pi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>getBean<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private static AppInfo getBean(final PackageManager pm, final PackageInfo pi) &#123;</span><br><span class="line">    if (pi &#x3D;&#x3D; null) return null;</span><br><span class="line">    ApplicationInfo ai &#x3D; pi.applicationInfo;</span><br><span class="line">    String packageName &#x3D; pi.packageName;</span><br><span class="line">    String name &#x3D; ai.loadLabel(pm).toString();</span><br><span class="line">    Drawable icon &#x3D; ai.loadIcon(pm);</span><br><span class="line">    String packagePath &#x3D; ai.sourceDir;</span><br><span class="line">    String versionName &#x3D; pi.versionName;</span><br><span class="line">    int versionCode &#x3D; pi.versionCode;</span><br><span class="line">    boolean isSystem &#x3D; (ApplicationInfo.FLAG_SYSTEM &amp; ai.flags) !&#x3D; 0;</span><br><span class="line">    return new AppInfo(packageName, name, icon, packagePath, versionName, versionCode, isSystem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> PackageManager </tag>
            
            <tag> ActivityManger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XToast使用笔记</title>
      <link href="2021/03/21/XToast%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/21/XToast%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/toast/XToast.java" target="_blank" rel="noopener">xlib-Toast</a></li><li><a href="https://github.com/itemuse/XTester/tree/master/windowmanager" target="_blank" rel="noopener">XTester-windowmanager</a></li></ul><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidManifest.xml中添加弹出界面的activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-效果图"><a href="#三-效果图" class="headerlink" title="三.效果图"></a>三.效果图</h3><p><img src="img.gif" alt="im"></p><h3 id="四-需求和代码"><a href="#四-需求和代码" class="headerlink" title="四.需求和代码"></a>四.需求和代码</h3><p>工作中的需求，解决原生Toast在高版本平台发现连续点击之后不会弹出问题。<br>解决方法最终是使用WindowManager来替换原生Toast</p><ul><li>示例使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">XToast.getInstance()</span><br><span class="line">        .Text(&quot;AAAAAA&quot;)</span><br><span class="line">        .TextColor(R.color.colorPrimary) &#x2F;&#x2F;字体颜色</span><br><span class="line">        .TextSize(50) &#x2F;&#x2F;字体大小</span><br><span class="line">        .BackGroundColor(R.color.colorAccent) &#x2F;&#x2F;背景颜色</span><br><span class="line">        .LayoutParamsX(w) &#x2F;&#x2F;偏离XToast左边距离 受Gravity影响</span><br><span class="line">        .LayoutParamsY(h) &#x2F;&#x2F;偏离XToastY坐标距离 受Gravity影响</span><br><span class="line">        .Gravity(Gravity.BOTTOM) &#x2F;&#x2F;Toast显示位置的重心设置</span><br><span class="line">        .RoundedCorners(3) &#x2F;&#x2F;背景圆角大小</span><br><span class="line">        .ShowTime(XToast.LENGTH_SHORTSHORT) &#x2F;&#x2F;显示时长</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure>单例化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static XToast getInstance() &#123;</span><br><span class="line">if (mToastView &#x3D;&#x3D; null) &#123;</span><br><span class="line">mToastView &#x3D; new XToast(XApp.getApp());</span><br><span class="line">return mToastView;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return mToastView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过handler通讯，将实例创建在UI线程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private Handler mHandler &#x3D; new Handler(Looper.getMainLooper()) &#123;</span><br><span class="line">public void handleMessage(android.os.Message msg) &#123;</span><br><span class="line">if (msg.what &#x3D;&#x3D; HIDE) &#123;</span><br><span class="line">hide();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>给view设置圆角<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 设置视图裁剪的圆角半径</span><br><span class="line"> * @param radius 半径</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void setRoundedCorners(View view, final int radius) &#123;</span><br><span class="line">    if (view &#x3D;&#x3D; null) return;</span><br><span class="line">    if (radius &lt;&#x3D; 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (android.os.Build.VERSION.SDK_INT &gt;&#x3D; android.os.Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">        view.setOutlineProvider(new ViewOutlineProvider() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void getOutline(View view, Outline outline) &#123;</span><br><span class="line">                outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), radius);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        view.setClipToOutline(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其他的就是一些<a href="https://freedomer.com.cn/2020/05/28/WindowManager%E5%9F%BA%E7%A1%80/">WindowManager</a>创建流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> WindowManager </tag>
            
            <tag> Toast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidPdfViewer使用笔记</title>
      <link href="2021/03/19/AndroidPdfViewer%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/19/AndroidPdfViewer%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码"><a href="#一-代码" class="headerlink" title="一.代码"></a>一.代码</h3><ul><li><a href="https://github.com/barteksc/AndroidPdfViewer" target="_blank" rel="noopener">AndroidPdfViewer</a></li><li><a href="https://github.com/itemuse/XTester/tree/master/pdf" target="_blank" rel="noopener">XTester-pdf</a></li></ul><h3 id="二-效果图"><a href="#二-效果图" class="headerlink" title="二.效果图"></a>二.效果图</h3><p><img src="img.gif" alt="IMG"></p><h3 id="三-实现"><a href="#三-实现" class="headerlink" title="三.实现"></a>三.实现</h3><ul><li><p>准备</p><ul><li><p>build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.github.barteksc:android-pdf-viewer:3.2.0-beta.1&#39;</span><br></pre></td></tr></table></figure></li><li><p>权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.READ_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>Android10以上版本要在application中增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:requestLegacyExternalStorage&#x3D;&quot;true&quot;</span><br></pre></td></tr></table></figure><p>否则READ_EXTERNAL_STORAGE权限无效</p></li></ul></li><li><p>实现</p><ul><li><p>布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;FrameLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;activity_main&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.github.barteksc.pdfviewer.PDFView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;pdfView&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;FrameLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">PDFView.Configurator configurator;</span><br><span class="line"> public void LoadFile()&#123;</span><br><span class="line">     File newFile &#x3D; new File(Path);</span><br><span class="line">     File newFile_ &#x3D; new File(Path_);</span><br><span class="line">     if(newFile!&#x3D;null &amp;&amp; newFile.exists() &amp;&amp; newFile.canRead())&#123;</span><br><span class="line">         configurator &#x3D; pdfView.fromFile(newFile);</span><br><span class="line">     &#125;else if(newFile_!&#x3D;null &amp;&amp; newFile_.exists() &amp;&amp; newFile.canRead())&#123;</span><br><span class="line">         configurator &#x3D; pdfView.fromFile(newFile_);</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">         configurator &#x3D; pdfView.fromAsset(&quot;TWPDF.pdf&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     showPDFUI();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">  *     .pages(0, 2, 1, 3, 3, 3) &#x2F;&#x2F; 默认显示所有页面</span><br><span class="line">  *     .enableSwipe(true) &#x2F;&#x2F; 允许使用滑动来阻止改变页面</span><br><span class="line">  *     .swipeHorizontal(false) &#x2F;&#x2F;是否横向滑动显示</span><br><span class="line">  *     .enableDoubletap(true)</span><br><span class="line">  *     .defaultPage(0) &#x2F;&#x2F;默认进入的页面</span><br><span class="line">  *     &#x2F;&#x2F; 允许在当前页面上画一些东西，通常在屏幕中间可见</span><br><span class="line">  *     .onDraw(onDrawListener)</span><br><span class="line">  *     &#x2F;&#x2F; 允许在所有页面上画一些东西，单独为每一页。仅对可见页面调用</span><br><span class="line">  *     .onDrawAll(onDrawListener)</span><br><span class="line">  *     .onLoad(onLoadCompleteListener) &#x2F;&#x2F; 加载文档并开始呈现后调用</span><br><span class="line">  *     .onPageChange(onPageChangeListener)</span><br><span class="line">  *     .onPageScroll(onPageScrollListener)</span><br><span class="line">  *     .onError(onErrorListener)</span><br><span class="line">  *     .onPageError(onPageErrorListener)</span><br><span class="line">  *     .onRender(onRenderListener) &#x2F;&#x2F; 第一次呈现文档后调用</span><br><span class="line">  *     &#x2F;&#x2F; 点击一次调用，如果已处理则返回true，如果切换滚动句柄可见性返回false</span><br><span class="line">  *     .onTap(onTapListener)</span><br><span class="line">  *     .onLongPress(onLongPressListener)</span><br><span class="line">  *     .enableAnnotationRendering(false) &#x2F;&#x2F; 呈现注释(例如注释、颜色或表单)</span><br><span class="line">  *     .password(null)</span><br><span class="line">  *     .scrollHandle(null)</span><br><span class="line">  *     .enableAntialiasing(true) &#x2F;&#x2F; 在低分辨率屏幕上改进渲染</span><br><span class="line">  *     &#x2F;&#x2F; dp中页面之间的间距。要定义间距颜色，设置视图背景</span><br><span class="line">  *     .spacing(0)</span><br><span class="line">  *     .autoSpacing(false) &#x2F;&#x2F; 添加动态间距以适应屏幕上的每个页面</span><br><span class="line">  *     .linkHandler(DefaultLinkHandler)</span><br><span class="line">  *     .pageFitPolicy(FitPolicy.WIDTH) &#x2F;&#x2F; 模式以适应视图中的页面</span><br><span class="line">  *     .fitEachPage(false) &#x2F;&#x2F; 将每个页面适应于视图，否则较小的页面相对于最大的页面缩放</span><br><span class="line">  *     .pageSnap(false) &#x2F;&#x2F; 将页面对齐到屏幕边界</span><br><span class="line">  *     .pageFling(false) &#x2F;&#x2F; 在ViewPager这样的单一页面上做一个短暂的改变</span><br><span class="line">  *     .nightMode(false) &#x2F;&#x2F; 切换夜间模式</span><br><span class="line">  *&#x2F;</span><br><span class="line"> private void showPDFUI()&#123;</span><br><span class="line">     configurator.enableSwipe(true)</span><br><span class="line">             .swipeHorizontal(true)</span><br><span class="line">             .enableDoubletap(false)</span><br><span class="line">             .fitEachPage(false)</span><br><span class="line">             .autoSpacing(true)</span><br><span class="line">             .pageFitPolicy(FitPolicy.WIDTH)</span><br><span class="line">             .onLoad(new OnLoadCompleteListener() &#123;</span><br><span class="line">                 @Override</span><br><span class="line">                 public void loadComplete(int nbPages) &#123;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">             .onPageChange(new OnPageChangeListener() &#123;</span><br><span class="line"></span><br><span class="line">                 @Override</span><br><span class="line">                 public void onPageChanged(int page, int pageCount) &#123;</span><br><span class="line">                     mPageCount &#x3D; pageCount;</span><br><span class="line">                     mPpagerIndex &#x3D; page;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">             .enableAnnotationRendering(false)</span><br><span class="line">             .password(null)</span><br><span class="line">             .scrollHandle(null)</span><br><span class="line">             .enableAntialiasing(true)</span><br><span class="line">             .spacing(0)</span><br><span class="line">             .pageSnap(true)</span><br><span class="line">             .nightMode(true)</span><br><span class="line">             .load();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>跳转至指定页面的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Go to the given page.</span><br><span class="line">     *</span><br><span class="line">     * @param page Page index.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void jumpTo(int page, boolean withAnimation) &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XScreen使用笔记</title>
      <link href="2021/03/15/XScreen%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/15/XScreen%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/screen/XScreen.java" target="_blank" rel="noopener">xlib-Screen</a></li><li><a href="https://github.com/itemuse/XTester/tree/master/screen" target="_blank" rel="noopener">XTester-screen</a></li></ul><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidManifest.xml中添加弹出界面的activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_SETTINGS&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-几个API示例"><a href="#三-几个API示例" class="headerlink" title="三.几个API示例"></a>三.几个API示例</h3><ul><li><h4 id="获取屏幕的宽度-高度"><a href="#获取屏幕的宽度-高度" class="headerlink" title="获取屏幕的宽度/高度"></a>获取屏幕的宽度/高度</h4><p>XScreen.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Return the width of screen, in pixel.</span><br><span class="line">   *</span><br><span class="line">   * @return the width of screen, in pixel</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static int getScreenWidth() &#123;</span><br><span class="line">      WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">      if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">      Point point &#x3D; new Point();</span><br><span class="line">      if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">          wm.getDefaultDisplay().getRealSize(point);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          wm.getDefaultDisplay().getSize(point);</span><br><span class="line">      &#125;</span><br><span class="line">      return point.x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Return the height of screen, in pixel.</span><br><span class="line">   *</span><br><span class="line">   * @return the height of screen, in pixel</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static int getScreenHeight() &#123;</span><br><span class="line">      WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">      if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">      Point point &#x3D; new Point();</span><br><span class="line">      if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">          wm.getDefaultDisplay().getRealSize(point);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          wm.getDefaultDisplay().getSize(point);</span><br><span class="line">      &#125;</span><br><span class="line">      return point.y;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取应用屏幕的宽度-高度"><a href="#获取应用屏幕的宽度-高度" class="headerlink" title="获取应用屏幕的宽度/高度"></a>获取应用屏幕的宽度/高度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Return the application&#39;s width of screen, in pixel.</span><br><span class="line">   *</span><br><span class="line">   * @return the application&#39;s width of screen, in pixel</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static int getAppScreenWidth() &#123;</span><br><span class="line">      WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">      if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">      Point point &#x3D; new Point();</span><br><span class="line">      wm.getDefaultDisplay().getSize(point);</span><br><span class="line">      return point.x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Return the application&#39;s height of screen, in pixel.</span><br><span class="line">   *</span><br><span class="line">   * @return the application&#39;s height of screen, in pixel</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static int getAppScreenHeight() &#123;</span><br><span class="line">      WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">      if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">      Point point &#x3D; new Point();</span><br><span class="line">      wm.getDefaultDisplay().getSize(point);</span><br><span class="line">      return point.y;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="获取屏幕密度-DPI"><a href="#获取屏幕密度-DPI" class="headerlink" title="获取屏幕密度/DPI"></a>获取屏幕密度/DPI</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Return the density of screen.</span><br><span class="line">   *</span><br><span class="line">   * @return the density of screen</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static float getScreenDensity() &#123;</span><br><span class="line">      return Resources.getSystem().getDisplayMetrics().density;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Return the screen density expressed as dots-per-inch.</span><br><span class="line">   *</span><br><span class="line">   * @return the screen density expressed as dots-per-inch</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static int getScreenDensityDpi() &#123;</span><br><span class="line">      return Resources.getSystem().getDisplayMetrics().densityDpi;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="设置屏幕为全屏-非全屏"><a href="#设置屏幕为全屏-非全屏" class="headerlink" title="设置屏幕为全屏/非全屏"></a>设置屏幕为全屏/非全屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Set non full screen.</span><br><span class="line"> *</span><br><span class="line"> * @param activity The activity.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void setNonFullScreen(@NonNull final Activity activity) &#123;</span><br><span class="line">    activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Toggle full screen.</span><br><span class="line"> *</span><br><span class="line"> * @param activity The activity.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void toggleFullScreen(@NonNull final Activity activity) &#123;</span><br><span class="line">    boolean isFullScreen &#x3D; isFullScreen(activity);</span><br><span class="line">    Window window &#x3D; activity.getWindow();</span><br><span class="line">    if (isFullScreen) &#123;</span><br><span class="line">        window.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        window.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Return whether screen is full.</span><br><span class="line"> *</span><br><span class="line"> * @param activity The activity.</span><br><span class="line"> * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isFullScreen(@NonNull final Activity activity) &#123;</span><br><span class="line">    int fullScreenFlag &#x3D; WindowManager.LayoutParams.FLAG_FULLSCREEN;</span><br><span class="line">    return (activity.getWindow().getAttributes().flags &amp; fullScreenFlag) &#x3D;&#x3D; fullScreenFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="设置屏幕为横屏-竖屏"><a href="#设置屏幕为横屏-竖屏" class="headerlink" title="设置屏幕为横屏/竖屏"></a>设置屏幕为横屏/竖屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Set the screen to landscape.</span><br><span class="line">   *</span><br><span class="line">   * @param activity The activity.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @SuppressLint(&quot;SourceLockedOrientationActivity&quot;)</span><br><span class="line">  public static void setLandscape(@NonNull final Activity activity) &#123;</span><br><span class="line">      activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Set the screen to portrait.</span><br><span class="line">   *</span><br><span class="line">   * @param activity The activity.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @SuppressLint(&quot;SourceLockedOrientationActivity&quot;)</span><br><span class="line">  public static void setPortrait(@NonNull final Activity activity) &#123;</span><br><span class="line">      activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">   * Return whether screen is landscape.</span><br><span class="line">   *</span><br><span class="line">   * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static boolean isLandscape() &#123;</span><br><span class="line">      return getApp().getResources().getConfiguration().orientation</span><br><span class="line">              &#x3D;&#x3D; Configuration.ORIENTATION_LANDSCAPE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Return whether screen is portrait.</span><br><span class="line">   *</span><br><span class="line">   * @return &#123;@code true&#125;: yes&lt;br&gt;&#123;@code false&#125;: no</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static boolean isPortrait() &#123;</span><br><span class="line">      return getApp().getResources().getConfiguration().orientation</span><br><span class="line">              &#x3D;&#x3D; Configuration.ORIENTATION_PORTRAIT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Return the rotation of screen.</span><br><span class="line">   *</span><br><span class="line">   * @param activity The activity.</span><br><span class="line">   * @return the rotation of screen</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static int getScreenRotation(@NonNull final Activity activity) &#123;</span><br><span class="line">      switch (activity.getWindowManager().getDefaultDisplay().getRotation()) &#123;</span><br><span class="line">          case Surface.ROTATION_0:</span><br><span class="line">              return 0;</span><br><span class="line">          case Surface.ROTATION_90:</span><br><span class="line">              return 90;</span><br><span class="line">          case Surface.ROTATION_180:</span><br><span class="line">              return 180;</span><br><span class="line">          case Surface.ROTATION_270:</span><br><span class="line">              return 270;</span><br><span class="line">          default:</span><br><span class="line">              return 0;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * Return the bitmap of screen.</span><br><span class="line">   *</span><br><span class="line">   * @param activity The activity.</span><br><span class="line">   * @return the bitmap of screen</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static Bitmap screenShot(@NonNull final Activity activity) &#123;</span><br><span class="line">      return screenShot(activity, false);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Return the bitmap of screen.</span><br><span class="line">   *</span><br><span class="line">   * @param activity          The activity.</span><br><span class="line">   * @param isDeleteStatusBar True to delete status bar, false otherwise.</span><br><span class="line">   * @return the bitmap of screen</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public static Bitmap screenShot(@NonNull final Activity activity, boolean isDeleteStatusBar) &#123;</span><br><span class="line">      View decorView &#x3D; activity.getWindow().getDecorView();</span><br><span class="line">      Bitmap bmp &#x3D; view2Bitmap(decorView);</span><br><span class="line">      DisplayMetrics dm &#x3D; new DisplayMetrics();</span><br><span class="line">      activity.getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">      if (isDeleteStatusBar) &#123;</span><br><span class="line">          int statusBarHeight &#x3D; XSystemUI.getStatusBarHeight();</span><br><span class="line">          return Bitmap.createBitmap(</span><br><span class="line">                  bmp,</span><br><span class="line">                  0,</span><br><span class="line">                  statusBarHeight,</span><br><span class="line">                  dm.widthPixels,</span><br><span class="line">                  dm.heightPixels - statusBarHeight</span><br><span class="line">          );</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          return Bitmap.createBitmap(bmp, 0, 0, dm.widthPixels, dm.heightPixels);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Set the duration of sleep.</span><br><span class="line"> * &lt;p&gt;Must hold &#123;@code &lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_SETTINGS&quot; &#x2F;&gt;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @param duration The duration.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequiresPermission(WRITE_SETTINGS)</span><br><span class="line">public static void setSleepDuration(final int duration) &#123;</span><br><span class="line">    Settings.System.putInt(</span><br><span class="line">            getApp().getContentResolver(),</span><br><span class="line">            Settings.System.SCREEN_OFF_TIMEOUT,</span><br><span class="line">            duration</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Return the duration of sleep.</span><br><span class="line"> *</span><br><span class="line"> * @return the duration of sleep.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getSleepDuration() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return Settings.System.getInt(</span><br><span class="line">                getApp().getContentResolver(),</span><br><span class="line">                Settings.System.SCREEN_OFF_TIMEOUT</span><br><span class="line">        );</span><br><span class="line">    &#125; catch (Settings.SettingNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return -123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-测试效果"><a href="#4-测试效果" class="headerlink" title="4. 测试效果"></a>4. 测试效果</h3><p><img src="img.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XZip使用笔记</title>
      <link href="2021/03/14/XZip%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/14/XZip%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/zip/XZip.java" target="_blank" rel="noopener">xlib-Zip</a></li><li><a href="https://github.com/itemuse/XTester/tree/master/zip" target="_blank" rel="noopener">XTester-zip</a></li></ul><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidManifest.xml中添加权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.READ_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>application:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:requestLegacyExternalStorage&#x3D;&quot;true&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-几个方法"><a href="#三-几个方法" class="headerlink" title="三.几个方法"></a>三.几个方法</h3><ul><li><h4 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h4><p>XZip.class<br>第一个传入的参数是需要压缩的文件路径<br>第二个传入的参数是解压后的文件路径<br>核心压缩代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Zip the file.</span><br><span class="line"> *</span><br><span class="line"> * @param srcFilePath The path of source file.</span><br><span class="line"> * @param zipFilePath The path of ZIP file.</span><br><span class="line"> * @return &#123;@code true&#125;: success&lt;br&gt;&#123;@code false&#125;: fail</span><br><span class="line"> * @throws IOException if an I&#x2F;O error has occurred</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean zipFile(final String srcFilePath,</span><br><span class="line">                              final String zipFilePath)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    return zipFile(XFile.getFileByPath(srcFilePath), XFile.getFileByPath(zipFilePath), null);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    private static boolean zipFile(final File srcFile,</span><br><span class="line">                               String rootPath,</span><br><span class="line">                               final ZipOutputStream zos,</span><br><span class="line">                               final String comment)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    rootPath &#x3D; rootPath + (XString.isSpace(rootPath) ? &quot;&quot; : File.separator) + srcFile.getName();</span><br><span class="line">    if (srcFile.isDirectory()) &#123;</span><br><span class="line">        File[] fileList &#x3D; srcFile.listFiles();</span><br><span class="line">        if (fileList &#x3D;&#x3D; null || fileList.length &lt;&#x3D; 0) &#123;</span><br><span class="line">            ZipEntry entry &#x3D; new ZipEntry(rootPath + &#39;&#x2F;&#39;);</span><br><span class="line">            entry.setComment(comment);</span><br><span class="line">            zos.putNextEntry(entry);</span><br><span class="line">            zos.closeEntry();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (File file : fileList) &#123;</span><br><span class="line">                if (!zipFile(file, rootPath, zos, comment)) return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        InputStream is &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            is &#x3D; new BufferedInputStream(new FileInputStream(srcFile));</span><br><span class="line">            ZipEntry entry &#x3D; new ZipEntry(rootPath);</span><br><span class="line">            entry.setComment(comment);</span><br><span class="line">            zos.putNextEntry(entry);</span><br><span class="line">            byte buffer[] &#x3D; new byte[BUFFER_LEN];</span><br><span class="line">            int len;</span><br><span class="line">            while ((len &#x3D; is.read(buffer, 0, BUFFER_LEN)) !&#x3D; -1) &#123;</span><br><span class="line">                zos.write(buffer, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">            zos.closeEntry();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (is !&#x3D; null) &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XZip.zipFile(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;a.jpg&quot;,&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;a.zip&quot;);</span><br><span class="line">XZip.zipFile(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;b.jpg&quot;,&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;b.zip&quot;);</span><br><span class="line">XZip.zipFile(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;c.jpg&quot;,&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;c.zip&quot;);</span><br></pre></td></tr></table></figure><p><img src="img1.gif" alt="im"></p></li><li><h4 id="批量压缩文件"><a href="#批量压缩文件" class="headerlink" title="批量压缩文件"></a>批量压缩文件</h4><p>XZip.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Zip the files.</span><br><span class="line"> *</span><br><span class="line"> * @param srcFiles    The source of files.</span><br><span class="line"> * @param zipFilePath The path of ZIP file.</span><br><span class="line"> * @return &#123;@code true&#125;: success&lt;br&gt;&#123;@code false&#125;: fail</span><br><span class="line"> * @throws IOException if an I&#x2F;O error has occurred</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean zipFiles(final Collection&lt;String&gt; srcFiles,</span><br><span class="line">                               final String zipFilePath)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    return zipFiles(srcFiles, zipFilePath, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量压缩第一个参数改为传入的文件路径集合<br>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; srcFiles &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">                srcFiles.add(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;a.jpg&quot;);</span><br><span class="line">                srcFiles.add(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;b.jpg&quot;);</span><br><span class="line">                srcFiles.add(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;c.jpg&quot;);</span><br><span class="line">                srcFiles.add(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;d.jpg&quot;);</span><br><span class="line">                srcFiles.add(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;e.jpg&quot;);</span><br><span class="line">                srcFiles.add(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;f.jpg&quot;);</span><br><span class="line">                XZip.zipFiles(srcFiles,&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;files.zip&quot;);</span><br></pre></td></tr></table></figure><p><img src="img2.gif" alt="im"></p></li><li><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><p>XZip.class<br>核心解压代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * Unzip the file.</span><br><span class="line">    *</span><br><span class="line">    * @param zipFilePath The path of ZIP file.</span><br><span class="line">    * @param destDirPath The path of destination directory.</span><br><span class="line">    * @return the unzipped files</span><br><span class="line">    * @throws IOException if unzip unsuccessfully</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public static List&lt;File&gt; unzipFile(final String zipFilePath,</span><br><span class="line">                                      final String destDirPath)</span><br><span class="line">           throws IOException &#123;</span><br><span class="line">       return unzipFileByKeyword(zipFilePath, destDirPath, null);</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">       &#x2F;**</span><br><span class="line">    * Unzip the file by keyword.</span><br><span class="line">    *</span><br><span class="line">    * @param zipFile The ZIP file.</span><br><span class="line">    * @param destDir The destination directory.</span><br><span class="line">    * @param keyword The keyboard.</span><br><span class="line">    * @return the unzipped files</span><br><span class="line">    * @throws IOException if unzip unsuccessfully</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public static List&lt;File&gt; unzipFileByKeyword(final File zipFile,</span><br><span class="line">                                               final File destDir,</span><br><span class="line">                                               final String keyword)</span><br><span class="line">           throws IOException &#123;</span><br><span class="line">       if (zipFile &#x3D;&#x3D; null || destDir &#x3D;&#x3D; null) return null;</span><br><span class="line">       List&lt;File&gt; files &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">       ZipFile zip &#x3D; new ZipFile(zipFile);</span><br><span class="line">       Enumeration&lt;?&gt; entries &#x3D; zip.entries();</span><br><span class="line">       try &#123;</span><br><span class="line">           if (XString.isSpace(keyword)) &#123;</span><br><span class="line">               while (entries.hasMoreElements()) &#123;</span><br><span class="line">                   ZipEntry entry &#x3D; ((ZipEntry) entries.nextElement());</span><br><span class="line">                   String entryName &#x3D; entry.getName().replace(&quot;\\&quot;, &quot;&#x2F;&quot;);</span><br><span class="line">                   if (entryName.contains(&quot;..&#x2F;&quot;)) &#123;</span><br><span class="line">                       Log.e(&quot;XZip&quot;, &quot;entryName: &quot; + entryName + &quot; is dangerous!&quot;);</span><br><span class="line">                       continue;</span><br><span class="line">                   &#125;</span><br><span class="line">                   if (!unzipChildFile(destDir, files, zip, entry, entryName)) return files;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               while (entries.hasMoreElements()) &#123;</span><br><span class="line">                   ZipEntry entry &#x3D; ((ZipEntry) entries.nextElement());</span><br><span class="line">                   String entryName &#x3D; entry.getName().replace(&quot;\\&quot;, &quot;&#x2F;&quot;);</span><br><span class="line">                   if (entryName.contains(&quot;..&#x2F;&quot;)) &#123;</span><br><span class="line">                       Log.e(&quot;XZip&quot;, &quot;entryName: &quot; + entryName + &quot; is dangerous!&quot;);</span><br><span class="line">                       continue;</span><br><span class="line">                   &#125;</span><br><span class="line">                   if (entryName.contains(keyword)) &#123;</span><br><span class="line">                       if (!unzipChildFile(destDir, files, zip, entry, entryName)) return files;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           zip.close();</span><br><span class="line">       &#125;</span><br><span class="line">       return files;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>第一个参数传入的是需要解压的文件路径<br>第二个参数传入的是解压后的文件存放的路径<br>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XZip.unzipFile(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;files.zip&quot;,&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;unzip&quot;);</span><br></pre></td></tr></table></figure><p><img src="img3.jpg" alt="IMG"></p></li><li><h4 id="解压带有关键字的文件"><a href="#解压带有关键字的文件" class="headerlink" title="解压带有关键字的文件"></a>解压带有关键字的文件</h4><p>XZip.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Unzip the file by keyword.</span><br><span class="line"> *</span><br><span class="line"> * @param zipFilePath The path of ZIP file.</span><br><span class="line"> * @param destDirPath The path of destination directory.</span><br><span class="line"> * @param keyword     The keyboard.</span><br><span class="line"> * @return the unzipped files</span><br><span class="line"> * @throws IOException if unzip unsuccessfully</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static List&lt;File&gt; unzipFileByKeyword(final String zipFilePath,</span><br><span class="line">                                            final String destDirPath,</span><br><span class="line">                                            final String keyword)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    return unzipFileByKeyword(XFile.getFileByPath(zipFilePath), XFile.getFileByPath(destDirPath), keyword);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对比解压文件多了一个传入匹配的字符<br>测试解压刚刚压缩的的files.zip文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XZip.unzipFileByKeyword(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;files.zip&quot;,</span><br><span class="line">                        &quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;unzip&quot;,&quot;a&quot;);</span><br></pre></td></tr></table></figure><p>运行后只会解压a.jpg文件                </p></li><li><h4 id="获取压缩文件中的文件路径链表"><a href="#获取压缩文件中的文件路径链表" class="headerlink" title="获取压缩文件中的文件路径链表"></a>获取压缩文件中的文件路径链表</h4><p>XZip.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the files&#39; path in ZIP file.</span><br><span class="line"> *</span><br><span class="line"> * @param zipFile The ZIP file.</span><br><span class="line"> * @return the files&#39; path in ZIP file</span><br><span class="line"> * @throws IOException if an I&#x2F;O error has occurred</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static List&lt;String&gt; getFilesPath(final File zipFile)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    if (zipFile &#x3D;&#x3D; null) return null;</span><br><span class="line">    List&lt;String&gt; paths &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    ZipFile zip &#x3D; new ZipFile(zipFile);</span><br><span class="line">    Enumeration&lt;?&gt; entries &#x3D; zip.entries();</span><br><span class="line">    while (entries.hasMoreElements()) &#123;</span><br><span class="line">        String entryName &#x3D; ((ZipEntry) entries.nextElement()).getName().replace(&quot;\\&quot;, &quot;&#x2F;&quot;);</span><br><span class="line">        if (entryName.contains(&quot;..&#x2F;&quot;)) &#123;</span><br><span class="line">            Log.e(&quot;XZip&quot;, &quot;entryName: &quot; + entryName + &quot; is dangerous!&quot;);</span><br><span class="line">            paths.add(entryName);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            paths.add(entryName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    zip.close();</span><br><span class="line">    return paths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入压缩文件，最终会遍历出文件后以List<String>的格式将文件传出<br>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XLog.i(XZip.getFilesPath(&quot;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;DCIM&#x2F;Alipay&#x2F;zip&#x2F;files.zip&quot;));</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xy.zip I&#x2F;MainActivity.java: [ (MainActivity.java:55)#onClick ] [a.jpg, b.jpg, c.jpg, d.jpg, e.jpg, f.jpg]</span><br></pre></td></tr></table></figure></li><li><h4 id="获取压缩文件中的注释链表"><a href="#获取压缩文件中的注释链表" class="headerlink" title="获取压缩文件中的注释链表"></a>获取压缩文件中的注释链表</h4><p>XZip.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the files&#39; comment in ZIP file.</span><br><span class="line"> *</span><br><span class="line"> * @param zipFile The ZIP file.</span><br><span class="line"> * @return the files&#39; comment in ZIP file</span><br><span class="line"> * @throws IOException if an I&#x2F;O error has occurred</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static List&lt;String&gt; getComments(final File zipFile)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    if (zipFile &#x3D;&#x3D; null) return null;</span><br><span class="line">    List&lt;String&gt; comments &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    ZipFile zip &#x3D; new ZipFile(zipFile);</span><br><span class="line">    Enumeration&lt;?&gt; entries &#x3D; zip.entries();</span><br><span class="line">    while (entries.hasMoreElements()) &#123;</span><br><span class="line">        ZipEntry entry &#x3D; ((ZipEntry) entries.nextElement());</span><br><span class="line">        comments.add(entry.getComment());</span><br><span class="line">    &#125;</span><br><span class="line">    zip.close();</span><br><span class="line">    return comments;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Zip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPermission使用笔记</title>
      <link href="2021/03/12/XPermission%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/12/XPermission%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/permissions/XPermission.java" target="_blank" rel="noopener">xlib-Permission</a></li><li><a href="https://github.com/itemuse/XTester/tree/master/permission" target="_blank" rel="noopener">XTester-permission</a></li></ul><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidManifest.xml中添加弹出界面的activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name&#x3D;&quot;cn.xy.library.util.permissions.UtilsTransActivity&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-几个常用的动态申请权限方法"><a href="#三-几个常用的动态申请权限方法" class="headerlink" title="三.几个常用的动态申请权限方法"></a>三.几个常用的动态申请权限方法</h3><ul><li><h4 id="申请单个权限"><a href="#申请单个权限" class="headerlink" title="申请单个权限"></a>申请单个权限</h4>AndroidManifest.xml中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.RECORD_AUDIO&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>java中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static String permission_RECORD_AUDIO &#x3D; &quot;android.permission.RECORD_AUDIO&quot;;</span><br><span class="line">public static String[] AidioPermissions &#x3D; &#123;</span><br><span class="line">    permission_RECORD_AUDIO</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&#x2F;**单个权限*&#x2F;</span><br><span class="line">            XPermission.permission(PermissionsContract.AidioPermissions).callback(new XPermission.SimpleCallback() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onGranted() &#123;</span><br><span class="line">                    XLog.i(&quot;同意&quot;);&#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onDenied() &#123;</span><br><span class="line">                    XLog.i(&quot;拒绝&quot;);&#125;</span><br><span class="line">            &#125;).request();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>申请<br><img src="image3.jpg" alt="im"><br>点击同意和拒绝都会有对应的回调</li><li><h4 id="申请多个权限"><a href="#申请多个权限" class="headerlink" title="申请多个权限"></a>申请多个权限</h4>AndroidManifest.xml中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.READ_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>java中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static String permission_READ_EXTERNAL_STORAGE &#x3D; &quot;android.permission.READ_EXTERNAL_STORAGE&quot;;</span><br><span class="line">public static String permission_WRITE_EXTERNAL_STORAGE &#x3D; &quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;;</span><br><span class="line">public static String[] FileReadPermissions &#x3D; &#123;</span><br><span class="line">        permission_READ_EXTERNAL_STORAGE</span><br><span class="line">        ,permission_WRITE_EXTERNAL_STORAGE&#125;;</span><br><span class="line">...</span><br><span class="line"> &#x2F;**权限组*&#x2F;</span><br><span class="line">            XPermission.permissionGroup(PermissionsContract.FileReadPermissions).callback(new XPermission.SimpleCallback() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onGranted() &#123;</span><br><span class="line">                    XLog.i(&quot;同意&quot;);&#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onDenied() &#123;</span><br><span class="line">                    XLog.i(&quot;拒绝&quot;);&#125;</span><br><span class="line">            &#125;).request();</span><br></pre></td></tr></table></figure>申请<br><img src="image1.jpg" alt="im"><br>同意后查看权限<br><img src="image2.jpg" alt="im"></li><li><h4 id="获取所有权限"><a href="#获取所有权限" class="headerlink" title="获取所有权限"></a>获取所有权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (String s:XPermission.getPermissions())&#123;</span><br><span class="line">                    XLog.i(s);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br></pre></td></tr></table></figure>打印<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.xy.permission I&#x2F;MainActivity.java: [ (MainActivity.java:33)#onClick ] android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">com.xy.permission I&#x2F;MainActivity.java: [ (MainActivity.java:33)#onClick ] android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">com.xy.permission I&#x2F;MainActivity.java: [ (MainActivity.java:33)#onClick ] android.permission.RECORD_AUDIO</span><br></pre></td></tr></table></figure></li><li><h4 id="判断某个权限是否授予"><a href="#判断某个权限是否授予" class="headerlink" title="判断某个权限是否授予"></a>判断某个权限是否授予</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XLog.i(XPermission.isGranted(PermissionsContract.AidioPermissions));</span><br></pre></td></tr></table></figure>打印<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xy.permission I&#x2F;MainActivity.java: [ (MainActivity.java:55)#onClick ] true</span><br></pre></td></tr></table></figure>用起来就是这么简单流畅，工具代码下次再补，准备睡觉。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Permission </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XTab使用笔记</title>
      <link href="2021/03/10/XTab%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/10/XTab%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/tab/XTab.java" target="_blank" rel="noopener">xlib-XTab</a></li><li>测试代码androidx<a href="https://github.com/itemuse/XTester/tree/master/fragment+tab+viewpager" target="_blank" rel="noopener">XTester-fragment+tab+viewpager</a></li><li>项目中使用非androidx版本<a href="https://github.com/itemuse/XMusic" target="_blank" rel="noopener">XMusic</a></li><li>效果图<br><img src="IMG.gif" alt="IMG"></li></ul><p>初衷是整理一个可以快速搭建该效果界面的一个框架，利于后期开发。</p><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-代码"><a href="#三-代码" class="headerlink" title="三.代码"></a>三.代码</h3><ul><li><h4 id="非androidx版本"><a href="#非androidx版本" class="headerlink" title="非androidx版本"></a>非androidx版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import android.support.v4.app.Fragment;</span><br><span class="line">import android.support.v4.app.FragmentManager;</span><br><span class="line">import android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line">import android.support.v4.view.ViewPager;</span><br><span class="line">import android.support.design.widget.TabLayout;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class XTab &#123;</span><br><span class="line">    public static void addTab(TabLayout tabLayout,</span><br><span class="line">                              ViewPager viewPager,</span><br><span class="line">                              final List&lt;Fragment&gt; fragment,</span><br><span class="line">                              final List&lt;String&gt; title,</span><br><span class="line">                              FragmentManager fragmentManager,</span><br><span class="line">                              int offscreenPageLimit,</span><br><span class="line">                              onPageSelected onPageSelected)&#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 预加载</span><br><span class="line">         *&#x2F;</span><br><span class="line">        viewPager.setOffscreenPageLimit(offscreenPageLimit);</span><br><span class="line">        viewPager.setAdapter(new FragmentPagerAdapter(fragmentManager) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Fragment getItem(int position) &#123;</span><br><span class="line">                return fragment.get(position);</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public int getCount() &#123;</span><br><span class="line">                return fragment.size();</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public CharSequence getPageTitle(int position) &#123;</span><br><span class="line">                return title.get(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onPageScrolled(int i, float v, int i1) &#123;&#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onPageSelected(int i) &#123;</span><br><span class="line">                onPageSelected.onPageSelected(i);&#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onPageScrollStateChanged(int i) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; TabLayout关联ViewPager</span><br><span class="line">        tabLayout.setupWithViewPager(viewPager);</span><br><span class="line">    &#125;</span><br><span class="line">    public interface onPageSelected&#123;</span><br><span class="line">        void onPageSelected(int position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="androidx版本代码，与非android的仅仅是引用上的差别"><a href="#androidx版本代码，与非android的仅仅是引用上的差别" class="headerlink" title="androidx版本代码，与非android的仅仅是引用上的差别"></a>androidx版本代码，与非android的仅仅是引用上的差别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line">import androidx.fragment.app.Fragment;</span><br><span class="line">import androidx.fragment.app.FragmentManager;</span><br><span class="line">import androidx.fragment.app.FragmentPagerAdapter;</span><br><span class="line">import androidx.viewpager.widget.ViewPager;</span><br><span class="line">import com.google.android.material.tabs.TabLayout;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>布局<br>非androidx：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;android.support.design.widget.TabLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        app:tabGravity&#x3D;&quot;fill&quot;</span><br><span class="line">        app:tabMode&#x3D;&quot;fixed&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line">    &lt;&#x2F;android.support.design.widget.TabLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.view.ViewPager</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&#x2F;&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>androidx：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;com.google.android.material.tabs.TabLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        app:tabGravity&#x3D;&quot;fill&quot;</span><br><span class="line">        app:tabMode&#x3D;&quot;fixed&quot;</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;_tab&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line">    &lt;&#x2F;com.google.android.material.tabs.TabLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.viewpager.widget.ViewPager</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;_vp&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>activity中添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;Fragment&gt; mFragment;</span><br><span class="line">    private List&lt;String&gt; mTitle;</span><br><span class="line">    private TabLayout mTabLayout;</span><br><span class="line">    private ViewPager mViewPager;</span><br><span class="line">    private void initFragment() &#123;</span><br><span class="line">        mTabLayout &#x3D; (TabLayout)findViewById(R.id.playview_tab);</span><br><span class="line">        mViewPager &#x3D; (ViewPager)findViewById(R.id.playview_midd_vp);</span><br><span class="line">        mFragment &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        mFragment.add(new fragment_00());</span><br><span class="line">        mFragment.add(new fragment_11());</span><br><span class="line">        mFragment.add(new fragment_22());</span><br><span class="line">        mFragment.add(new fragment_33());</span><br><span class="line">        mTitle &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        mTitle.add(&quot;歌曲&quot;);</span><br><span class="line">        mTitle.add(&quot;歌词&quot;);</span><br><span class="line">        mTitle.add(&quot;歌手&quot;);</span><br><span class="line">        mTitle.add(&quot;专辑&quot;);</span><br><span class="line">        XTab.addTab(mTabLayout,</span><br><span class="line">                mViewPager,</span><br><span class="line">                mFragment,</span><br><span class="line">                mTitle,</span><br><span class="line">                getSupportFragmentManager(),</span><br><span class="line">                1,</span><br><span class="line">                new XTab.onPageSelected() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onPageSelected(int position) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="一些方法的讲解"><a href="#一些方法的讲解" class="headerlink" title="一些方法的讲解"></a>一些方法的讲解</h4><ul><li><p><strong>viewPager</strong>中，<strong>viewPager.setOffscreenPageLimit(offscreenPageLimit);</strong>是设置应保留在页面两侧的页数，以花更少的时间进行布局<br>经过打印可以，当我设置为2时，启动后前三个fragment走到了<strong>onResume</strong>完成了预加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.xy.fragment I&#x2F;fragment_00.java: [ (fragment_00.java:27)#onResume ] execute</span><br><span class="line">com.xy.fragment I&#x2F;fragment_11.java: [ (fragment_11.java:27)#onResume ] execute</span><br><span class="line">com.xy.fragment I&#x2F;fragment_22.java: [ (fragment_22.java:28)#onResume ] execute</span><br></pre></td></tr></table></figure><p>而滑动到第四个时，第一个走了onpause</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xy.fragment I&#x2F;fragment_00.java: [ (fragment_00.java:39)#onPause ] execute</span><br></pre></td></tr></table></figure></li><li><p>而关于viewpager的<strong>addOnPageChangeListener</strong>方法监听中<br>onPageScrolled是实时的滑动的距离的绘测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * This method will be invoked when the current page is scrolled, either as part</span><br><span class="line"> * of a programmatically initiated smooth scroll or a user initiated touch scroll.</span><br><span class="line"> *</span><br><span class="line"> * @param position 当前显示的第一页的位置索引。 如果positionOffset不为零，则页面position + 1将可见。</span><br><span class="line"> * @param positionOffset Value from [0, 1) 指示与位置上的页面的偏移量。</span><br><span class="line"> * @param positionOffsetPixels Value 以像素为单位的值，指示与位置的偏移量。</span><br><span class="line"> *&#x2F;</span><br><span class="line">void onPageScrolled(int position, float positionOffset, @Px int positionOffsetPixels);</span><br></pre></td></tr></table></figure></li><li>onPageSelected是当前的页面位置</li><li><p>onPageScrollStateChanged是滑动状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Indicates that the pager is in an idle, settled state. The current page</span><br><span class="line"> * is fully in view and no animation is in progress.</span><br><span class="line"> * 空闲状态</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static final int SCROLL_STATE_IDLE &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Indicates that the pager is currently being dragged by the user.</span><br><span class="line"> * 滑动状态</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static final int SCROLL_STATE_DRAGGING &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Indicates that the pager is in the process of settling to a final position.</span><br><span class="line"> * 滑动完成，自动完成调整状态</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static final int SCROLL_STATE_SETTLING &#x3D; 2;</span><br></pre></td></tr></table></figure></li><li><p>在XTab工具类中我仅仅把onPageSelected的position值回传出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">XTab.addTab(mTabLayout, </span><br><span class="line">                mViewPager,</span><br><span class="line">                mFragment,</span><br><span class="line">                mTitle, </span><br><span class="line">                getSupportFragmentManager(),</span><br><span class="line">                2,</span><br><span class="line">                new XTab.onPageSelected() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onPageSelected(int position) &#123;</span><br><span class="line">                XToast.getInstance().Text(&quot;当前页面位置： &quot;+position).LayoutParamsY(750).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Fragment </tag>
            
            <tag> Tab </tag>
            
            <tag> ViewPager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二级选择框使用笔记</title>
      <link href="2021/02/27/%E4%BA%8C%E7%BA%A7%E9%80%89%E6%8B%A9%E6%A1%86%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/27/%E4%BA%8C%E7%BA%A7%E9%80%89%E6%8B%A9%E6%A1%86%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-效果图"><a href="#一-效果图" class="headerlink" title="一.效果图"></a>一.效果图</h3><p><img src="device.gif" alt="image"></p><h3 id="二-代码位置"><a href="#二-代码位置" class="headerlink" title="二.代码位置"></a>二.代码位置</h3><ul><li><a href="https://github.com/itemuse/XTester/tree/master/dialog" target="_blank" rel="noopener">XTester-Dialog</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="三-主要方法及监听器"><a href="#三-主要方法及监听器" class="headerlink" title="三.主要方法及监听器"></a>三.主要方法及监听器</h3><ul><li><p><strong>collapseGroup( int position)</strong><br>收起 position 位置的分组</p></li><li><p><strong>expandGroup(int position)</strong><br>展开position位置的分组</p></li><li><p><strong>isGroupExpanded(int position)</strong><br>判断position位置的分组是否展开</p></li><li><p><strong>setAdapter(ExpandableListAdapter adapter)</strong><br>给ExpandableListView 设置适配器</p></li><li><p><strong>setOnChildClickListener(OnChildClickListener listener)</strong><br>设置分组中子条目的点击监听器</p></li><li><p><strong>setOnGroupClickListener(OnGroupClickListener listener)</strong><br>设置分组的点击监听器</p></li><li><p><strong>setOnGroupCollapseListener(OnGroupCollapseListener listener)</strong><br>设置分组收起的监听器</p></li><li><p><strong>setOnGroupExpandListener(OnGroupExpandListener listener)</strong><br>设置分组展开的监听器</p></li></ul><h3 id="四-几个XML属性"><a href="#四-几个XML属性" class="headerlink" title="四.几个XML属性"></a>四.几个XML属性</h3><ul><li><p><strong>android:groupIndicator</strong><br>组指示器，取值可以是任意的Drawable对象。显示在 该分组的最左侧。如果不设置的话，默认是一个向下的箭头，点击展开内容之后会变成向上的箭头</p></li><li><p><strong>android:childIndicator</strong><br>子条目指示器，取值可以是任意的Drawable 对象。显示在分组中的每一个 子条目 的最左侧。没有默认图标。</p></li></ul><h3 id="五-用法"><a href="#五-用法" class="headerlink" title="五.用法"></a>五.用法</h3><ul><li><strong>首先要准备好要填充的一级列表的的数据和对应的二级列表数据</strong><br>demo一级列表一共是三个选项<br>所以会有三个子选项的选项集合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ParentList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.parent_item))&#123;</span><br><span class="line">    ParentList.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_1))&#123;</span><br><span class="line">    childLists1.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists2 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_2))&#123;</span><br><span class="line">    childLists2.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;String&gt; childLists3 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (CharSequence ss : getResources().getTextArray(R.array.child_3))&#123;</span><br><span class="line">    childLists3.add((String)ss);</span><br><span class="line">&#125;</span><br><span class="line">ChildLists &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">ChildLists.add(childLists1);</span><br><span class="line">ChildLists.add(childLists2);</span><br><span class="line">ChildLists.add(childLists3);</span><br></pre></td></tr></table></figure><ul><li><strong>把准备好的一级二级数据传入adapter</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mExpandableListView &#x3D; dialogView.findViewById(R.id.expandablelistview);</span><br><span class="line">final MultistageAdapter moAdapter &#x3D; new MultistageAdapter(this,ParentList, ChildLists, mParentmValue, mChildValue);</span><br><span class="line">mExpandableListView.setAdapter(moAdapter);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><strong>监听点击事件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;一级选项点击回调</span><br><span class="line">mExpandableListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) &#123;</span><br><span class="line">        mParentmValue2 &#x3D;  groupPosition;</span><br><span class="line">        mChildValue2 &#x3D; 0;</span><br><span class="line">        moAdapter.notifyDataSetChanged(mParentmValue2,mChildValue2); &#x2F;&#x2F;更新选中状态</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;二级选项点击回调</span><br><span class="line">mExpandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onChildClick(ExpandableListView parent, View v, int reverseTypePosition, int reverseCisPosition, long id) &#123;</span><br><span class="line">        mParentmValue2 &#x3D;  reverseTypePosition;</span><br><span class="line">        mChildValue2 &#x3D;  reverseCisPosition;</span><br><span class="line">        moAdapter.notifyDataSetChanged(mParentmValue2,mChildValue2);&#x2F;&#x2F;更新选中状态</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>确认框中处理</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void showConfirmDialog()&#123;</span><br><span class="line">    final AlertDialog.Builder normalDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    final String value &#x3D; ParentList.get(mParentmValue2)+&quot;&#x2F;&quot;+ChildLists.get(mParentmValue2).get(mChildValue);</span><br><span class="line">    normalDialog.setTitle(value);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;OK&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    mParentmValue &#x3D;  mParentmValue2;</span><br><span class="line">                    mChildValue &#x3D;  mChildValue2;</span><br><span class="line">                    Toast.makeText(getApplicationContext(),value,Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    ...</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-常用对话框笔记"><a href="#六-常用对话框笔记" class="headerlink" title="六.常用对话框笔记"></a>六.常用对话框笔记</h3><p><a href="https://freedomyouth.gitee.io/2020/12/14/%E5%B8%B8%E7%94%A8%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">常用对话框笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ExpandableListView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVP框架示例讲解</title>
      <link href="2021/01/26/MVP%E6%A1%86%E6%9E%B6%E7%A4%BA%E4%BE%8B%E8%AE%B2%E8%A7%A3/"/>
      <url>2021/01/26/MVP%E6%A1%86%E6%9E%B6%E7%A4%BA%E4%BE%8B%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-主要代码介绍"><a href="#二-主要代码介绍" class="headerlink" title="二.主要代码介绍"></a>二.主要代码介绍</h3><ul><li><strong>MActivity.class</strong><br>抽象MActivity代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MActivity&lt;P extends BasePresenter&gt; extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    public P mPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState)&#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart()&#123;</span><br><span class="line">        super.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">       super.onResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">      if(mPresenter !&#x3D; null)&#123;</span><br><span class="line">         mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">         mPresenter&#x3D;null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BaseActivity.class</strong><br>BaseActivity继承MActivity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseActivity extends MActivity&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MainActivity.class</strong><br>应用的MainActivity继承BaseActivity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends BaseActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        XService.startService(TestService.class);</span><br><span class="line">        XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">        XLog.i(&quot;Acticity持有的P: &quot;+mPresenter);</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MService.class</strong><br>抽象MService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public abstract class MService&lt; P extends BasePresenter&gt; extends Service &#123;</span><br><span class="line"></span><br><span class="line">   private static final String TAG &#x3D; &quot;XService&quot;;</span><br><span class="line">   public P mPresenter;</span><br><span class="line"></span><br><span class="line">   protected void initView()&#123;</span><br><span class="line">      if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">         mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">         if (this instanceof BaseView)&#123;</span><br><span class="line">            mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public IBinder onBind(Intent intent) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      initView();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">      return super.onStartCommand(intent, flags, startId);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * 获取 Presenter,P 为泛型,返回相对应的Presenter,(RadioPresenter&#x2F;BTPresenter&#x2F;MusicPresenter&#x2F;VideoPresenter&#x2F;)</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public abstract P getPresenter();</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onDestroy() &#123;</span><br><span class="line">      super.onDestroy();</span><br><span class="line">      mPresenter.delete();&#x2F;&#x2F;将 mPresenter 中的 view 删除，防止内存泄漏</span><br><span class="line">      mPresenter&#x3D;null;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BaseService.class</strong></li></ul><p>BaseService继承自MService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseService extends MService&lt;Presenter&gt; implements View &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TestService.class</strong><br>应用的TestService继承BaseService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestService extends BaseService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        mPresenter.onCreate();</span><br><span class="line">        XLog.i(&quot;Service持有的P: &quot;+mPresenter);</span><br><span class="line">        XLog.i(mPresenter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Presenter getPresenter() &#123;</span><br><span class="line">        return new Presenter(this);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BasePresenter.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePresenter&lt;V extends BaseView, M extends BaseModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public Context mContext;</span><br><span class="line">    private WeakReference&lt;V&gt; mWeakReference;</span><br><span class="line">    public M mModel;</span><br><span class="line">    public Handler mHandler &#x3D; new Handler();</span><br><span class="line">    public BasePresenter(Context context) &#123;</span><br><span class="line">        this.mContext&#x3D;context;</span><br><span class="line">        mModel &#x3D; getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取 model，实现该抽象类的子类必须实现此方法，之后就可以使用 mModel操作Model层业务逻辑</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public abstract M getModel();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将 view 添加到弱引用中</span><br><span class="line">     * @param view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void add(V view) &#123;</span><br><span class="line">        mWeakReference &#x3D; new WeakReference&lt;V&gt;(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取弱引用中的 view</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public V get() &#123;</span><br><span class="line">        return mWeakReference &#x3D;&#x3D; null ? null : mWeakReference.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除弱引用中的 view</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        if (mWeakReference !&#x3D; null) &#123;</span><br><span class="line">            mWeakReference.clear();</span><br><span class="line">            mWeakReference &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onDestroy()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Presenter.class</strong><br>Presenter则继承BasePresenter</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Presenter extends BasePresenter&lt;View, Model&gt; implements View&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-启动流程："><a href="#三-启动流程：" class="headerlink" title="三.启动流程："></a>三.启动流程：</h3><ul><li><strong>MainActivity启动</strong><br>创建时会创建并持有一个Presenter<br>Presenter.class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...   </span><br><span class="line"> protected void initView()&#123;</span><br><span class="line">        if (mPresenter &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mPresenter &#x3D; getPresenter();&#x2F;&#x2F;获取 mPresenter</span><br><span class="line">            if (this instanceof BaseView)&#123;</span><br><span class="line">                mPresenter.add((BaseView) this);&#x2F;&#x2F;将 view 传递到 mPresenter 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Presenter构建方法中会持有单例model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">@Override</span><br><span class="line">public Model getModel() &#123;</span><br><span class="line">    return Model.getInstant();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>紧接着调用Presenter的onCreate会将View传入Model<br>Presenter.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onCreate()&#123;</span><br><span class="line">    mModel.onCreate();</span><br><span class="line">    addView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addView()&#123;</span><br><span class="line">    mModel.setViews(this);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>添加到Model的Views集合<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static ArrayList&lt;View&gt; mViews&#x3D;new ArrayList&lt;View&gt;();</span><br><span class="line">...</span><br><span class="line">public void setViews(View mPV)&#123;</span><br><span class="line">    XLog.i(&quot;Model中增加P&quot;+mPV);</span><br><span class="line">    mViews.add(mPV);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45.831  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @26f08e</span><br><span class="line">45.832  I&#x2F;Model.java: [ (Model.java:27)#onCreate ] execute</span><br><span class="line">45.847  I&#x2F;Model.java: [ (Model.java:36)#onResume ] execute</span><br><span class="line">45.849  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@26f08e</span><br></pre></td></tr></table></figure><p>此时单例Model和Activity的Presenter就创建起来，Model中的生产出的值就会通过接口传出到Activity中<br>紧接着Activity启动并绑定Service</p><ul><li><strong>Service启动</strong><br>同理过程中也会创建一个Service的Presenter，紧接着Presenter也会把View添加到单例model的Views中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">45.900  I&#x2F;TestService.java: [ (TestService.java:21)#onCreate ] Service持有的P_id: @1a5879a</span><br><span class="line">45.901  I&#x2F;TestService.java: [ (TestService.java:22)#onCreate ] @1a5879a</span><br><span class="line">45.903  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P@1a5879a</span><br></pre></td></tr></table></figure><p>此时MVP框架的应用就创建完成，此时存活着一个Activity和对应的Presenter，一个Service和对应的Presenter，一个Model</p><h3 id="四-运行"><a href="#四-运行" class="headerlink" title="四.运行"></a>四.运行</h3><p>Model中生产的值通过遍历View分别传出<br>Model.class<br>我简单创建了一个Handler，每秒+1，并值传出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">private mHandler handler;</span><br><span class="line">private int i &#x3D; 0;</span><br><span class="line">private class mHandler extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        super.handleMessage(msg);</span><br><span class="line">        handler.removeMessages(0x01);</span><br><span class="line">        handler.sendEmptyMessageDelayed(0x01,1000);</span><br><span class="line">        ++i;</span><br><span class="line">        for (View mView : mViews) &#123;</span><br><span class="line">            XLog.i(mView+&quot; 发送传出处理的值：&quot;+i);</span><br><span class="line">            mView.onTime(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>该值首先会通过View传到对应的Presenter，紧接着传出到实现了View方法的Activity和Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onTime(int position) &#123;</span><br><span class="line">    get().onTime(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到来着Model的数据<br>MVP的特性才展现出来<br>打印如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">45.915  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：1</span><br><span class="line">45.918  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：1</span><br><span class="line">45.920  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：1</span><br><span class="line">45.924  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：1</span><br><span class="line"></span><br><span class="line">46.918  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：2</span><br><span class="line">46.920  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：2</span><br><span class="line">46.925  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：2</span><br><span class="line">46.926  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：2</span><br><span class="line"></span><br><span class="line">47.922  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @26f08e 发值：3</span><br><span class="line">47.923  I&#x2F;MainActivity.java: [ (MainActivity.java:81)#onTime ] @26f08e收值：3</span><br><span class="line">47.927  I&#x2F;Model.java: [ (Model.java:68)#handleMessage ] @1a5879a 发值：3</span><br><span class="line">47.928  I&#x2F;TestService.java: [ (TestService.java:47)#onTime ] @1a5879a收值：3</span><br></pre></td></tr></table></figure><h3 id="五-灵活添加和移除view"><a href="#五-灵活添加和移除view" class="headerlink" title="五.灵活添加和移除view"></a>五.灵活添加和移除view</h3><ul><li><strong>移除</strong><br>当Activity销毁时，通过onDestroy的方法除Model中对应Presenter的View，防止泄漏<br>Model.class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52:03.088  I&#x2F;Model.java: [ (Model.java:49)#onDestroy ] Model中去除P_id: @170acea</span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong><br>当Activity再次创建时，model中会再增加其新的对应Presenter的View</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">52:07.186  I&#x2F;MainActivity.java: [ (MainActivity.java:23)#onCreate ] Acticity持有的P_id: @b79a950</span><br><span class="line">52:07.207  I&#x2F;Model.java: [ (Model.java:15)#setViews ] Model中增加P_id: @b79a950</span><br></pre></td></tr></table></figure><p>当不再有Presenter持有Model时，Model会被释放<br>Model.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">public void onDestroy(View mPV) &#123;</span><br><span class="line">    XLog.i(&quot;Model中去除P&quot;+mPV);</span><br><span class="line">    mViews.remove(mPV);</span><br><span class="line">    if (mViews.size()&#x3D;&#x3D;0)&#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public final void clear() &#123;</span><br><span class="line">    handler.removeMessages(0x01);</span><br><span class="line">    handler &#x3D; null;</span><br><span class="line">    mModel &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="六-补充BaseActivity和BaseService"><a href="#六-补充BaseActivity和BaseService" class="headerlink" title="六.补充BaseActivity和BaseService"></a>六.补充BaseActivity和BaseService</h3><p>是属于逻辑层的两个方法，用于逻辑与界面分离时，当逻辑层添加了新的接口时，界面并不需要，或者没来得及实现时，在逻辑层的BaseActivity和BaseService中添加了接口，界面层就不需要去实现。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSpanned使用笔记</title>
      <link href="2021/01/20/XSpanned%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/20/XSpanned%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-使用"><a href="#三-使用" class="headerlink" title="三.使用"></a>三.使用</h3><ul><li><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h4><p>把textview控件传过去即可<br>append传入要显示的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TextView mTextview &#x3D; findViewById(R.id.text);</span><br><span class="line">SpanUtils.with(mTextview)</span><br><span class="line">        .append(getString(R.string.text)) </span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure></li><li><h4 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a><strong>设置字体大小</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;X&quot;)</span><br><span class="line">.setFontSize(50)</span><br><span class="line">.append(&quot;Y&quot;)</span><br><span class="line">.setFontSize(150)</span><br><span class="line">.append(&quot;Z&quot;)</span><br><span class="line">.setFontSize(20)</span><br></pre></td></tr></table></figure><p><img src="Image1.png" alt="iamge"></p></li></ul><ul><li><h4 id="前景色、背景色"><a href="#前景色、背景色" class="headerlink" title="前景色、背景色"></a><strong>前景色、背景色</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setForegroundColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image2.png" alt="iamge"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setBackgroundColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image3.png" alt="iamge"></p></li><li><h4 id="设置引用线颜色"><a href="#设置引用线颜色" class="headerlink" title="设置引用线颜色"></a><strong>设置引用线颜色</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setQuoteColor(getColor(R.color.colorAccent1))</span><br></pre></td></tr></table></figure><p><img src="Image4.png" alt="iamge"></p></li><li><h4 id="设置缩进"><a href="#设置缩进" class="headerlink" title="设置缩进"></a><strong>设置缩进</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setLeadingMargin(50, &#x2F;*第一行缩进值*&#x2F; 0 &#x2F;*其余行缩进值*&#x2F;)</span><br></pre></td></tr></table></figure><p>设置前<br><img src="Image5.png" alt="iamge"><br>设置后<br><img src="Image6.png" alt="iamge"></p></li><li><h4 id="设置行高"><a href="#设置行高" class="headerlink" title="设置行高"></a><strong>设置行高</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    public static final int ALIGN_BOTTOM   &#x3D; 0;</span><br><span class="line">    public static final int ALIGN_BASELINE &#x3D; 1;</span><br><span class="line">    public static final int ALIGN_CENTER   &#x3D; 2;</span><br><span class="line">    public static final int ALIGN_TOP      &#x3D; 3;</span><br><span class="line">*&#x2F;</span><br><span class="line">.setLineHeight(100&#x2F;*行高*&#x2F;,SpanUtils.ALIGN_CENTER&#x2F;*重心*&#x2F;)</span><br></pre></td></tr></table></figure><p>设置前<br><img src="Image7.png" alt="iamge"><br>设置后<br><img src="Image8.png" alt="iamge"></p></li><li><h4 id="字体比例"><a href="#字体比例" class="headerlink" title="字体比例"></a><strong>字体比例</strong></h4><p>修改前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.append(getString(R.string.text))</span><br></pre></td></tr></table></figure><p><img src="Image9.png" alt="iamge"><br>修改后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontProportion((float) 1.9) &#x2F;&#x2F;整体比例</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontXProportion((float) 1.5)&#x2F;&#x2F;宽度比例</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setFontXProportion((float) 0.3)&#x2F;&#x2F;宽度比例</span><br></pre></td></tr></table></figure><p><img src="Image10.png" alt="iamge"></p></li><li><h4 id="删除线、下划线"><a href="#删除线、下划线" class="headerlink" title="删除线、下划线"></a><strong>删除线、下划线</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setStrikethrough() &#x2F;&#x2F;删除线</span><br></pre></td></tr></table></figure><p><img src="Image11.png" alt="iamge"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setUnderline() &#x2F;&#x2F;下划线</span><br></pre></td></tr></table></figure><p><img src="Image12.png" alt="iamge"></p></li><li><h4 id="设置粗体、斜体"><a href="#设置粗体、斜体" class="headerlink" title="设置粗体、斜体"></a><strong>设置粗体、斜体</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBold()           &#x2F;&#x2F;设置粗体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setItalic()         &#x2F;&#x2F;设置斜体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBoldItalic()     &#x2F;&#x2F;设置粗斜体</span><br></pre></td></tr></table></figure><p><img src="Image13.png" alt="iamge"></p></li><li><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a><strong>设置字体</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.DEFAULT_BOLD)       &#x2F;&#x2F;设置字体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.SANS_SERIF)       &#x2F;&#x2F;设置字体</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setTypeface(Typeface.SERIF)       &#x2F;&#x2F;设置字体</span><br></pre></td></tr></table></figure><p><img src="Image14.png" alt="iamge"></p></li><li><h4 id="设置单独点击事件"><a href="#设置单独点击事件" class="headerlink" title="设置单独点击事件"></a><strong>设置单独点击事件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;点击事件1&quot;)</span><br><span class="line">.setClickSpan(new ClickableSpan() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        XLog.i(&quot;&#x2F;&#x2F;设置点击事件1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)      &#x2F;&#x2F;设置点击事件</span><br><span class="line">.append(&quot;点击事件2&quot;)</span><br><span class="line">.setClickSpan(getColor(R.color.colorAccent4),true, new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        XLog.i(&quot;&#x2F;&#x2F;设置点击事件2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)      &#x2F;&#x2F;设置点击事件</span><br></pre></td></tr></table></figure><p>打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-01-12 00:29:12.802 13577-13577&#x2F;com.softwinner.app I&#x2F;MainActivity.java: [ (MainActivity.java:75)#onClick ] &#x2F;&#x2F;设置点击事件1</span><br><span class="line">2021-01-12 00:29:13.190 13577-13577&#x2F;com.softwinner.app I&#x2F;MainActivity.java: [ (MainActivity.java:82)#onClick ] &#x2F;&#x2F;设置点击事件2</span><br></pre></td></tr></table></figure></li><li><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a><strong>超链接</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setUrl(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)            &#x2F;&#x2F;设置超链接</span><br></pre></td></tr></table></figure><p><img src="Image15.png" alt="iamge"><br>点击会跳转浏览器<br><img src="Image16.png" alt="iamge"></p></li><li><h4 id="设置模糊"><a href="#设置模糊" class="headerlink" title="设置模糊"></a><strong>设置模糊</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.SOLID)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.OUTER)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.INNER)           &#x2F;&#x2F;设置模糊</span><br><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setBlur((float) 1, BlurMaskFilter.Blur.NORMAL)           &#x2F;&#x2F;设置模糊</span><br></pre></td></tr></table></figure><p><img src="Image17.png" alt="iamge"></p></li><li><h4 id="设置阴影"><a href="#设置阴影" class="headerlink" title="设置阴影"></a><strong>设置阴影</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(getString(R.string.text))</span><br><span class="line">.setShadow(15,5,5,getColor(R.color.colorAccent1))         &#x2F;&#x2F;设置阴影</span><br></pre></td></tr></table></figure><p><img src="Image18.png" alt="iamge"></p></li><li><h4 id="追加图片"><a href="#追加图片" class="headerlink" title="追加图片"></a><strong>追加图片</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;追加图片&quot;)</span><br><span class="line">.appendImage(R.drawable.ic_launcher_background,SpanUtils.ALIGN_BOTTOM)       &#x2F;&#x2F;追加图片</span><br></pre></td></tr></table></figure><p><img src="Image19.png" alt="iamge"></p></li><li><h4 id="追加空格"><a href="#追加空格" class="headerlink" title="追加空格"></a><strong>追加空格</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.append(&quot;追加图片&quot;)</span><br><span class="line">.appendSpace(20)       &#x2F;&#x2F;追加空白</span><br><span class="line">.append(&quot;追加图片&quot;)</span><br></pre></td></tr></table></figure><p><img src="Image20.png" alt="iamge"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xlib </tag>
            
            <tag> Spanned </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XService使用笔记</title>
      <link href="2021/01/06/XService%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/06/XService%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">xlib-Service</a></li><li><a href="https://github.com/itemuse/XMusic/blob/master/app/src/main/java/com/tw/music/MusicService.java" target="_blank" rel="noopener">XMusic-MusicService</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-引用"><a href="#二-引用" class="headerlink" title="二.引用"></a>二.引用</h3><ol><li><p>将JitPack存储库添加到您的构建文件中<br>将其添加到存储库末尾的root build.gradle中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">      repositories &#123;</span><br><span class="line">      ...</span><br><span class="line">      maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      ...</span><br><span class="line">      implementation &#39;com.github.itemuse:XLib:Tag&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 Application中init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cn.xy.library.XApp;</span><br><span class="line">      ...</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">      super.onCreate();</span><br><span class="line">      XApp.init(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-使用方法"><a href="#三-使用方法" class="headerlink" title="三.使用方法"></a>三.使用方法</h3><ul><li><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a><strong>启动服务</strong></h4><p>提供三种传参启动方法<br><img src="Image1.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XService.startService(TestService.class);</span><br><span class="line">XService.startService(new Intent(this,TestService.class));</span><br><span class="line">XService.startService(&quot;com.xy.app.TestService&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* Start the service.</span><br><span class="line">*</span><br><span class="line">* @param intent The intent.</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void startService(Intent intent) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O) &#123;</span><br><span class="line">            XApp.getApp().startForegroundService(intent);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            XApp.getApp().startService(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a><strong>停止服务</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XService.stopService(TestService.class);</span><br><span class="line">XService.stopService(new Intent(this,TestService.class));</span><br><span class="line">XService.unbindService(mConnection);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Stop the service.</span><br><span class="line"> *</span><br><span class="line"> * @param intent The intent.</span><br><span class="line"> * @return &#123;@code true&#125;: success&lt;br&gt;&#123;@code false&#125;: fail</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean stopService(@NonNull Intent intent) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return XApp.getApp().stopService(intent);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="绑定服务"><a href="#绑定服务" class="headerlink" title="绑定服务"></a><strong>绑定服务</strong></h4><p><img src="Image2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XService.bindService(TestService.class,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">XService.bindService(&quot;com.softwinner.app.TestService&quot;,mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">XService.bindService(new Intent(this,TestService.class),mConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line"></span><br><span class="line">private ServiceConnection mConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h4 id="绑定服务-1"><a href="#绑定服务-1" class="headerlink" title="*绑定服务"></a><em>*绑定服务</em></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XService.unbindService(mConnection);</span><br></pre></td></tr></table></figure></li><li><h4 id="查询存活服务"><a href="#查询存活服务" class="headerlink" title="查询存活服务"></a><strong>查询存活服务</strong></h4><p>目前测试的情况，5.0 6.0 7.0可以查询到所有系统存货的服务，8.0 9.0 10.0上只可以查询到本进程的服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;String&gt; getAllRunningServices() &#123;</span><br><span class="line">    ActivityManager am &#x3D; (ActivityManager) App.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">    List&lt;RunningServiceInfo&gt; info &#x3D; am.getRunningServices(0x7FFFFFFF);</span><br><span class="line">    Set&lt;String&gt; names &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">    if (info &#x3D;&#x3D; null || info.size() &#x3D;&#x3D; 0) return null;</span><br><span class="line">    for (RunningServiceInfo aInfo : info) &#123;</span><br><span class="line">        names.add(aInfo.service.getClassName());</span><br><span class="line">    &#125;</span><br><span class="line">    return names;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="查询服务是否存活"><a href="#查询服务是否存活" class="headerlink" title="查询服务是否存活"></a><strong>查询服务是否存活</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isServiceRunning(@NonNull final String className) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ActivityManager am &#x3D; (ActivityManager) App.getApp().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        List&lt;RunningServiceInfo&gt; info &#x3D; am.getRunningServices(0x7FFFFFFF);</span><br><span class="line">        if (info &#x3D;&#x3D; null || info.size() &#x3D;&#x3D; 0) return false;</span><br><span class="line">        for (RunningServiceInfo aInfo : info) &#123;</span><br><span class="line">            if (className.equals(aInfo.service.getClassName())) return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; catch (Exception ignore) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="使用service注意"><a href="#使用service注意" class="headerlink" title="使用service注意"></a><strong>使用service注意</strong></h4><p>使用了startservice，也用了bindservice的情况下启用一个服务。<br>未stopservice之前，unbindservice服务是不会被销毁。<br>未unbindservice之前，stopservice服务是不会被销毁的。</p></li><li><h4 id="前台服务和后台服务区别"><a href="#前台服务和后台服务区别" class="headerlink" title="前台服务和后台服务区别"></a><strong>前台服务和后台服务区别</strong></h4></li></ul><div class="table-container"><table><thead><tr><th>前台服务</th><th>后台服务</th></tr></thead><tbody><tr><td>会在通知一栏显示 ONGOING 的 Notification，当服务被终止的时候，通知一栏的 Notification 也会消失，这样对于用户有一定的通知作用。常见的如音乐播放服务。</td><td>默认的服务即为后台服务，即不会在通知一栏显示 ONGOING 的 Notification。当服务被终止的时候，用户是看不到效果的。某些不需要运行或终止提示的服务，如天气更新，日期同步，邮件同步等。</td></tr></tbody></table></div><h3 id="三-8-0之后的服务"><a href="#三-8-0之后的服务" class="headerlink" title="三.8.0之后的服务"></a>三.8.0之后的服务</h3><ul><li><p>Android 8.0 之前<br>创建前台服务的方式通常是先创建一个后台服务，然后将该服务推到前台。</p></li><li><p>Android 8.0 之后<br>系统不允许后台应用创建后台服务。 引入了一种全新的方法，即 Context.startForegroundService()，以在前台启动新服务。</p></li></ul><p>在系统创建服务后，应用有五秒的时间来调用该服务的 startForeground() 方法以显示新服务的用户可见通知。</p><p>如果应用在此时间限制内未调用 startForeground()，则系统将停止服务并声明此应用为 ANR。</p><p>以我的音乐服务为例,在onStartCommand方法里增加一个Notification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MusicService extends MService&lt;MusicPresenter&gt; implements MusicView &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Notification.Builder builder &#x3D; new Notification.Builder(XApp.getApp());</span><br><span class="line">        Intent nfIntent &#x3D; new Intent(this, MusicActivity.class);</span><br><span class="line">        builder.setContentIntent(PendingIntent.</span><br><span class="line">                getActivity(this, 0, nfIntent, 0))</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(this.getResources(),R.drawable.ic_launcher))</span><br><span class="line">                .setContentTitle(&quot;微音正在后台运行&quot;)</span><br><span class="line">                .setSmallIcon(R.drawable.ic_launcher)</span><br><span class="line">                .setContentText(&quot;要显示的内容&quot;)</span><br><span class="line">                .setWhen(System.currentTimeMillis());</span><br><span class="line">        if (android.os.Build.VERSION.SDK_INT &gt;&#x3D; android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">            NotificationChannel notificationChannel &#x3D; new NotificationChannel(&quot;1&quot;, &quot;Name&quot;,NotificationManager.IMPORTANCE_MIN);</span><br><span class="line">            notificationChannel.enableLights(false);&#x2F;&#x2F;如果使用中的设备支持通知灯，则说明此通知通道是否应显示灯</span><br><span class="line">            notificationChannel.setShowBadge(false);&#x2F;&#x2F;是否显示角标</span><br><span class="line">            notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_SECRET);</span><br><span class="line">            NotificationManager manager &#x3D; (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">            manager.createNotificationChannel(notificationChannel);</span><br><span class="line">            builder.setChannelId(&quot;1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Notification notification &#x3D; builder.build(); &#x2F;&#x2F; 获取构建好的Notification</span><br><span class="line">        notification.defaults &#x3D; Notification.DEFAULT_SOUND; &#x2F;&#x2F;设置为默认的声音</span><br><span class="line">        &#x2F;&#x2F; 参数一：唯一的通知标识；参数二：通知消息。</span><br><span class="line">         startForeground(110, notification);&#x2F;&#x2F; 开始前台服务</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<br>Android O 后台应用想启动服务就老老实实的加个notification给用户看，表示你自己在后台占着资源，杀不杀由用户决定，偷偷地在后台跑没有framework帮忙想都别想，一个anr+crash套餐了解一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- activity： Context.startForegroundService() </span><br><span class="line">- Service：startForeground(int id, Notification notification)（id must not be 0）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> xlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用弹出对话框整理</title>
      <link href="2020/12/14/%E5%B8%B8%E7%94%A8%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E7%90%86/"/>
      <url>2020/12/14/%E5%B8%B8%E7%94%A8%E5%BC%B9%E5%87%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/XTester/tree/master/dialog" target="_blank" rel="noopener">XTester-Dialog</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-普通对话框"><a href="#二-普通对话框" class="headerlink" title="二.普通对话框"></a>二.普通对话框</h3><p><img src="1.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**普通对话框**&#x2F;</span><br><span class="line">private void showNormalDialog()&#123;</span><br><span class="line">    final AlertDialog.Builder normalDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    normalDialog.setIcon(R.mipmap.tr_step_left_normal);</span><br><span class="line">    normalDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    normalDialog.setMessage(&quot;DiaLog Message&quot;);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Positive&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.setNegativeButton(&quot;Negative&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Negative&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-普通对话框-增加第三个选择按钮"><a href="#四-普通对话框-增加第三个选择按钮" class="headerlink" title="四.普通对话框 增加第三个选择按钮"></a>四.普通对话框 增加第三个选择按钮</h3><p><img src="2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**普通对话框 增加第三个选择按钮**&#x2F;</span><br><span class="line">private void showMultiBtnDialog()&#123;</span><br><span class="line">    AlertDialog.Builder normalDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    normalDialog.setIcon(R.mipmap.tr_step_left_normal);</span><br><span class="line">    normalDialog.setTitle(&quot;DiaLog Title&quot;).setMessage(&quot;DiaLog Message&quot;);</span><br><span class="line">    normalDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Positive&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.setNeutralButton(&quot;Neutral2&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;Neutral2&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    normalDialog.setNegativeButton(&quot;Negative&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">            showToast(&quot;Negative&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 创建实例并显示</span><br><span class="line">    normalDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-列表选择对话框"><a href="#五-列表选择对话框" class="headerlink" title="五.列表选择对话框"></a>五.列表选择对话框</h3><p><img src="3.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**列表选择对话框**&#x2F;</span><br><span class="line">private void showListDialog() &#123;</span><br><span class="line">    final String[] items &#x3D; &#123; &quot;items1&quot;,&quot;items2&quot;,&quot;items3&quot;,&quot;items4&quot; &#125;;</span><br><span class="line">    AlertDialog.Builder listDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    listDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    listDialog.setItems(items, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">            showToast(&quot;点击 &quot;+items[which]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    listDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-列表单选对话框"><a href="#六-列表单选对话框" class="headerlink" title="六.列表单选对话框"></a>六.列表单选对话框</h3><p><img src="4.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**列表单选对话框**&#x2F;</span><br><span class="line">int mChoice;</span><br><span class="line">private void showSingleChoiceDialog()&#123;</span><br><span class="line">    final String[] items &#x3D; &#123; &quot;items1&quot;,&quot;items2&quot;,&quot;items3&quot;,&quot;items4&quot; &#125;;</span><br><span class="line">    AlertDialog.Builder singleChoiceDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    singleChoiceDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    &#x2F;&#x2F; 第二个参数是默认选项，此处设置为0</span><br><span class="line">    singleChoiceDialog.setSingleChoiceItems(items, mChoice,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    mChoice &#x3D; which;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    singleChoiceDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    if (mChoice !&#x3D; -1) &#123;</span><br><span class="line">                        showToast(&quot;选择 &quot;+items[mChoice]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    singleChoiceDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七-列表多选对话框"><a href="#七-列表多选对话框" class="headerlink" title="七.列表多选对话框"></a>七.列表多选对话框</h3><p><img src="5.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**列表多选对话框**&#x2F;</span><br><span class="line">ArrayList&lt;String&gt; mChoices &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">final boolean initChoiceSets[]&#x3D;&#123;false,false,false,false&#125;;</span><br><span class="line">private void showMultiChoiceDialog() &#123;</span><br><span class="line">    final String[] items &#x3D; &#123; &quot;items1&quot;,&quot;items2&quot;,&quot;items3&quot;,&quot;items4&quot; &#125;;</span><br><span class="line">    AlertDialog.Builder multiChoiceDialog &#x3D; new AlertDialog.Builder(this);</span><br><span class="line">    multiChoiceDialog.setTitle(&quot;DiaLog Title&quot;);</span><br><span class="line">    multiChoiceDialog.setMultiChoiceItems(items, initChoiceSets,</span><br><span class="line">            new DialogInterface.OnMultiChoiceClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which,</span><br><span class="line">                                    boolean isChecked) &#123;</span><br><span class="line">                    initChoiceSets[which] &#x3D; isChecked;</span><br><span class="line">                    if (isChecked) &#123;</span><br><span class="line">                        mChoices.add(items[which]);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        String  s  &#x3D; items[which];</span><br><span class="line">                        Log.i(&quot;md&quot;,&quot; findInterIdex(mChoices,s):  &quot;+findInterIdex(mChoices,s));</span><br><span class="line">                        mChoices.remove(findInterIdex(mChoices,s));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    multiChoiceDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    int size &#x3D; mChoices.size();</span><br><span class="line">                    String str &#x3D; &quot;&quot;;</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; size; i++) &#123;</span><br><span class="line">                        str +&#x3D; mChoices.get(i) ;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    showToast(&quot;选择了 &quot;+str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    multiChoiceDialog.show();</span><br><span class="line">&#125;</span><br><span class="line">public static int findInterIdex(List&lt;String&gt; nums, String target)&#123;</span><br><span class="line">    return Collections.binarySearch(nums,target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八-进度弹出框"><a href="#八-进度弹出框" class="headerlink" title="八.进度弹出框"></a>八.进度弹出框</h3><p><img src="6.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**进度弹出框**&#x2F;</span><br><span class="line">private void showProgressDialog() &#123;</span><br><span class="line">    final int MAX_PROGRESS &#x3D; 100;</span><br><span class="line">    final ProgressDialog progressDialog &#x3D;</span><br><span class="line">            new ProgressDialog(MainActivity.this);</span><br><span class="line">    progressDialog.setProgress(0);</span><br><span class="line">    progressDialog.setTitle(&quot;ProgressDialog Title&quot;);</span><br><span class="line">    progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class="line">    progressDialog.setMax(MAX_PROGRESS);</span><br><span class="line">    progressDialog.show();</span><br><span class="line">    &#x2F;* 模拟进度增加的过程</span><br><span class="line">     * 新开一个线程，每个100ms，进度增加1</span><br><span class="line">     *&#x2F;</span><br><span class="line">    new Thread(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            int progress&#x3D; 0;</span><br><span class="line">            while (progress &lt; MAX_PROGRESS)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(100);</span><br><span class="line">                    progress++;</span><br><span class="line">                    progressDialog.setProgress(progress);</span><br><span class="line">                &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 进度达到最大值后，窗口消失</span><br><span class="line">            progressDialog.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九-输入对话框"><a href="#九-输入对话框" class="headerlink" title="九.输入对话框"></a>九.输入对话框</h3><p><img src="7.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**输入对话框**&#x2F;</span><br><span class="line">private void showInputDialog() &#123;</span><br><span class="line">    final EditText editText &#x3D; new EditText(MainActivity.this);</span><br><span class="line">    AlertDialog.Builder inputDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    inputDialog.setTitle(&quot;AlertDialog Title&quot;).setView(editText);</span><br><span class="line">    inputDialog.setPositiveButton(&quot;Positive&quot;,</span><br><span class="line">            new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    showToast(&quot;输入了 &quot;+editText.getText().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十-自定义输入对话框"><a href="#十-自定义输入对话框" class="headerlink" title="十.自定义输入对话框"></a>十.自定义输入对话框</h3><p><img src="8.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**自定义输入对话框</span><br><span class="line">private void showCustomizeDialog() &#123;</span><br><span class="line">    AlertDialog.Builder customizeDialog &#x3D;</span><br><span class="line">            new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">    final View dialogView &#x3D; LayoutInflater.from(MainActivity.this)</span><br><span class="line">            .inflate(R.layout.dialog_customize,null);</span><br><span class="line">    customizeDialog.setTitle(&quot;自定义AlertDialog Title&quot;);</span><br><span class="line">    customizeDialog.setView(dialogView);</span><br><span class="line">    dialogView.findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View view) &#123;</span><br><span class="line">            showToast(&quot;输入了 &quot;+((EditText)dialogView.findViewById(R.id.edit_text)).getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    customizeDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 自定义View --&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:gravity&#x3D;&quot;bottom&quot;</span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;edit_text&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;btn&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:src&#x3D;&quot;@mipmap&#x2F;tr_step_left_normal&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="十一：二级对话选择框"><a href="#十一：二级对话选择框" class="headerlink" title="十一：二级对话选择框"></a>十一：二级对话选择框</h3><p><a href="https://freedomyouth.gitee.io/2021/02/27/%E4%BA%8C%E7%BA%A7%E9%80%89%E6%8B%A9%E6%A1%86%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">二级选择框使用笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlertDialog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment基础</title>
      <link href="2020/05/29/Fragment%E5%9F%BA%E7%A1%80/"/>
      <url>2020/05/29/Fragment%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-来源："><a href="#一-来源：" class="headerlink" title="一.来源："></a>一.来源：</h3><blockquote><blockquote><p>摘自网络</p></blockquote></blockquote><h3 id="二-Fragment初探："><a href="#二-Fragment初探：" class="headerlink" title="二.Fragment初探："></a>二.Fragment初探：</h3><p>Fragment是activity的界面中的一部分或一种行为。你可以把多个Fragment们组合到一个activity中来创建一个多面界面，并且你可以在多个activity中重用一个Fragment。你可以把Fragment认为模块化的一段activity，它具有自己的生命周期，接收它自己的事件，并可以在activity运行时被添加或删除。</p><p>Fragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。然而，当activity运行时（在onResume()之后，onPause()之前），你可以单独地操作每个Fragment，比如添加或删除它们。当你在执行上述针对Fragment的事务时，你可以将事务添加到一个栈中，这个栈被activity管理，栈中的每一条都是一个Fragment的一次事务。有了这个栈，就可以反向执行Fragment的事务，这样就可以在Fragment级支持“返回”键（向后导航）。</p><p>当向activity中添加一个Fragment时，它须置于ViewGroup控件中，并且需定义Fragment自己的界面。你可以在layoutxml文件中声明Fragment，元素为：<fragment>；也可以在代码中创建Fragment，然后把它加入到ViewGroup控件中。然而，Fragment不一定非要放在activity的界面中，它可以隐藏在后台为actvitiy工作。</p><p>设计的哲学：</p><p>为了让界面可以在平板上更好地展示，Android在3.0版本引入了Fragment(碎片)功能，通过官方文档中的这张图片可以很明显地看到Fragment的好处：</p><p><img src="img1.png" alt=""></p><p>注：左边为平板，右边为手持设备。</p><h3 id="三-Fragment的生命周期："><a href="#三-Fragment的生命周期：" class="headerlink" title="三.Fragment的生命周期："></a>三.Fragment的生命周期：</h3><p>因为Fragment必须嵌入在Acitivity中使用，所以Fragment的生命周期和它所在的Activity是密切相关的。</p><p>如果Activity是暂停状态，其中所有的Fragment都是暂停状态；如果Activity是stopped状态，这个Activity中所有的Fragment都不能被启动；如果Activity被销毁，那么它其中的所有Fragment都会被销毁。</p><p>但是，当Activity在活动状态，可以独立控制Fragment的状态，比如加上或者移除Fragment。</p><p>当这样进行fragment transaction（转换）的时候，可以把fragment放入Activity的back stack中，这样用户就可以进行返回操作。</p><p>使用Fragment时，需要继承Fragment或者Fragment的子类（DialogFragment, ListFragment, PreferenceFragment, WebViewFragment），所以Fragment的代码看起来和Activity的类似。</p><p>每当创建一个Fragment时，首先添加以下三个回调方法：</p><p>onCreate()：系统在创建Fragment的时候调用这个方法，这里应该初始化相关的组件，一些即便是被暂停或者被停止时依然需要保留的东西。<br>onCreateView()：当第一次绘制Fragment的UI时系统调用这个方法，该方法将返回一个View，如果Fragment不提供UI也可以返回null。注意，如果继承自ListFragment，onCreateView()默认的实现会返回一个ListView，所以不用自己实现。<br>onPause()：当用户离开Fragment时第一个调用这个方法，需要提交一些变化，因为用户很可能不再返回来。<br>将Fragment加载到Activity当中有两种方式：</p><p>方式一：添加Fragment到Activity的布局文件当中<br>方式二：在Activity的代码中动态添加Fragment<br>第一种方式虽然简单但灵活性不够。添加Fragment到Activity的布局文件当中,就等同于将Fragment及其视图与activity的视图绑定在一起，且在activity的生命周期过程中，无法切换fragment视图。</p><p>第二种方式比较复杂，但也是唯一一种可以在运行时控制fragment的方式（加载、移除、替换）。</p><p>下面将分别介绍一下。</p><p>　　</p><h3 id="四-在Activity的布局文件中添加Fragment：（不推荐）"><a href="#四-在Activity的布局文件中添加Fragment：（不推荐）" class="headerlink" title="四.在Activity的布局文件中添加Fragment：（不推荐）"></a>四.在Activity的布局文件中添加Fragment：（不推荐）</h3><p>平板的模拟器参数如下：</p><p><img src="img2.png" alt=""></p><p>然后新建一个工程文件。然后继续如下步骤：</p><p>（1）新建文件fragment_hello.xml和HelloFragment.java：</p><p>fragment_hello.xml代码如下：（即Fragment的布局文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line">    </span><br><span class="line">    &lt;EditText </span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:hint&#x3D;&quot;请输入内容&quot;&#x2F;&gt;</span><br><span class="line">    &lt;RatingBar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;ratingBar1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>HelloFragment.java代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragment01;</span><br><span class="line"></span><br><span class="line">import android.app.Fragment;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.LayoutInflater;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line">public class HelloFragment extends Fragment &#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState) &#123;</span><br><span class="line">        View view &#x3D; inflater.inflate(R.layout.fragment_hello, null);  &#x2F;&#x2F; View android.view.LayoutInflater.inflate(int resource, ViewGroup root) </span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点在于第19和20行，通过inflate()方法将自定义的fragment的布局加载进来。</p><p>19行代码中，第二个参数中，如果布局没有根，那就用null。</p><p>注：上方代码中，因为我们的程序是面对Android 4.0以上版本的，所以导入Fragment的包时，选择第一个：android.app.Fragment</p><p><img src="img3.png" alt=""></p><p>（2）将Fragment添加到Activity的布局中：</p><p>修改activity_main.xml的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;fragment_hello&quot;</span><br><span class="line">        android:name&#x3D;&quot;com.example.m01_fragment02.HelloFragment&quot;</span><br><span class="line">       android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>08行和09行是关键。其中android:name属性填上你自己创建的fragment的完整类名。如下图：</p><p><img src="img4.png" alt=""></p><p>当系统创建这个Activity的布局文件时，系统会实例化每一个fragment，并且调用它们的onCreateView()方法，来获得相应fragment的布局，并将返回值插入fragment标签所在的地方。</p><p>运行之后，效果如下：</p><p><img src="img5.png" alt=""></p><p>实际上，这种方式在开发中并不推荐，我们来介绍另外一种方法。</p><h3 id="五-在activity代码中添加fragment："><a href="#五-在activity代码中添加fragment：" class="headerlink" title="五.在activity代码中添加fragment："></a>五.在activity代码中添加fragment：</h3><p>【实例】点击左侧fragment中的按钮，弹出右侧的fragment。新建一个工程文件，然后步骤如下：</p><ol><li><p>将activity_main的布局分为两部分：左边占1/4，右边占3/4。修改activity_main.xml的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;left&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">        android:background&#x3D;&quot;#00BFFF&quot; &gt;</span><br><span class="line">        </span><br><span class="line">        &lt;Button </span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;button1&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;            </span><br><span class="line">            android:text&#x3D;&quot;显示&quot;&#x2F;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">         android:id&#x3D;&quot;@+id&#x2F;right&quot;       </span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;3&quot;</span><br><span class="line">        android:background&#x3D;&quot;#00FFFF&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>上方代码中，一个LinearLayout代表一个Fragment的容器，记得要给每个fragment加一个容器的id。上方代码的布局效果如下：<br><img src="img6.png" alt=""><br>既然两个fragment的空间都分配好了，接下来右边的Fragment写出来。</p></li><li><p>新建文件fragment_right.xml和RightFragment.java：<br>fragment_right.xml代码如下：（添加一个文本和按钮）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;textView1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;新闻内容&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;button2&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;Button&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>RightFragment.java代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragment03;</span><br><span class="line"></span><br><span class="line">import android.app.Fragment;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.LayoutInflater;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line">public class RightFragment extends Fragment &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState) &#123;</span><br><span class="line">        View view &#x3D; inflater.inflate(R.layout.fragment_right, null);</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着，我们修改上方onCreateView()方法中的代码，实现点击按钮，能够弹出吐司：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState) &#123;</span><br><span class="line">        View view &#x3D; inflater.inflate(R.layout.fragment_right, null);</span><br><span class="line">        Button button &#x3D; (Button)view.findViewById(R.id.button2);</span><br><span class="line">        button.setOnClickListener(new OnClickListener() &#123;            </span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Toast.makeText(getActivity(), &quot;我是fragment&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第04行代码：有一个单词view不要忘了。<br>第08行代码：第一个参数一定是getActivity，以此来获得父类的Activity</p></li><li><p>在activity代码中添加fragment：<br>点击MainActivity中左侧的按钮，弹出右侧的Fragment，<br>MainActivity.java的监听器部分的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> button.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">     </span><br><span class="line">     @Override</span><br><span class="line">     public void onClick(View v) &#123;</span><br><span class="line">  </span><br><span class="line">         &#x2F;&#x2F;步骤一：添加一个FragmentTransaction的实例</span><br><span class="line">         FragmentManager fragmentManager &#x3D;getFragmentManager();</span><br><span class="line">        FragmentTransaction transaction &#x3D; fragmentManager.beginTransaction();</span><br><span class="line">  </span><br><span class="line">        &#x2F;&#x2F;步骤二：用add()方法加上Fragment的对象rightFragment </span><br><span class="line">        RightFragment rightFragment &#x3D; new RightFragment();</span><br><span class="line">        transaction.add(R.id.right, rightFragment);</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;步骤三：调用commit()方法使得FragmentTransaction实例的改变生效</span><br><span class="line">        transaction.commit();                </span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>记住上面的三个步骤。<br>第12行代码是整个程序的核心。add()方法里的第一个参数是容器视图资源ID，而不是layout。容器视图资源ID有两个作用：<br>告知FragmentManager，fragment视图应该出现在activity视图的什么地方<br>是FragmentManager队列中fragment的唯一标识符<br>运行后，效果如下：<br><img src="img7.png" alt=""><br>点击左侧的按钮后，出现右侧的界面。点击右侧的按钮，弹出吐司。效果如下：<br><img src="img8.png" alt=""><br>当然，这个代码还不够成熟，因为还涉及到了生命周期没有处理。我们将在下一章节中进行讲解。</p></li></ol><h3 id="六-Fragment的生命周期初探："><a href="#六-Fragment的生命周期初探：" class="headerlink" title="六.Fragment的生命周期初探："></a>六.Fragment的生命周期初探：</h3><p>因为Fragment必须嵌入在Acitivity中使用，所以Fragment的生命周期和它所在的Activity是密切相关的。</p><p>如果Activity是暂停状态，其中所有的Fragment都是暂停状态；如果Activity是stopped状态，这个Activity中所有的Fragment都不能被启动；如果Activity被销毁，那么它其中的所有Fragment都会被销毁。</p><p>但是，当Activity在活动状态，可以独立控制Fragment的状态，比如加上或者移除Fragment。</p><p>当这样进行fragment transaction（转换）的时候，可以把fragment放入Activity的back stack中，这样用户就可以进行返回操作。</p><p>使用Fragment时，需要继承Fragment或者Fragment的子类（DialogFragment, ListFragment, PreferenceFragment, WebViewFragment），所以Fragment的代码看起来和Activity的类似。</p><p>每当创建一个Fragment时，首先添加以下三个回调方法：</p><p>onCreate()：系统在创建Fragment的时候调用这个方法，这里应该初始化相关的组件，一些即便是被暂停或者被停止时依然需要保留的东西。<br>onCreateView()：当第一次绘制Fragment的UI时系统调用这个方法，该方法将返回一个View，如果Fragment不提供UI也可以返回null。注意，如果继承自ListFragment，onCreateView()默认的实现会返回一个ListView，所以不用自己实现。<br>onPause()：当用户离开Fragment时第一个调用这个方法，需要提交一些变化，因为用户很可能不再返回来。<br>将Fragment加载到Activity当中有两种方式：</p><p>方式一：添加Fragment到Activity的布局文件当中<br>方式二：在Activity的代码中动态添加Fragment（荐）<br>第一种方式虽然简单但灵活性不够。添加Fragment到Activity的布局文件当中,就等同于将Fragment及其视图与activity的视图绑定在一起，且在activity的生命周期过程中，无法切换fragment视图。</p><p>第二种方式比较复杂，但也是唯一一种可以在运行时控制fragment的方式（加载、移除、替换）。</p><h3 id="七-Fragment的生命周期详解："><a href="#七-Fragment的生命周期详解：" class="headerlink" title="七.Fragment的生命周期详解："></a>七.Fragment的生命周期详解：</h3><p>先来看一下官方文档的图片吧：</p><p><img src="img9.png" alt=""></p><p>我们再把Activity的生命周期和Fragment的生命周期对比一下，就清楚很多了：</p><p><img src="img10.png" alt=""></p><p>我们还是在实例中来看一下Fragment的生命周期吧。</p><p>【实例】在MainActivity中加载一个Fragment：（完整版代码如下）</p><p>我们所创建的Fragment的布局文件fragment01.xml的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;RatingBar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;ratingBar1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;button1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;Button&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>MyFragment.java代码如下：（注意生命周期中每个方法的作用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">  package com.example.m01_fragmentlifecycle;</span><br><span class="line">  </span><br><span class="line">  import android.app.Activity;</span><br><span class="line">  import android.app.Fragment;</span><br><span class="line">  import android.os.Bundle;</span><br><span class="line">  import android.util.Log;</span><br><span class="line">  import android.view.LayoutInflater;</span><br><span class="line">  import android.view.View;</span><br><span class="line">  import android.view.ViewGroup;</span><br><span class="line"> </span><br><span class="line"> public class MyFragment extends Fragment &#123;</span><br><span class="line">     private final String TAG &#x3D; &quot;MyFragment&quot;;</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F;获得activity的传递的值</span><br><span class="line">     @Override</span><br><span class="line">     public void onAttach(Activity activity) &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onAttach(activity);</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onAttach&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;实例化成员变量</span><br><span class="line">     @Override</span><br><span class="line">     public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onCreate(savedInstanceState);</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onCreate&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;给当前的fragment绘制UI布局，可以使用线程更新UI</span><br><span class="line">     @Override</span><br><span class="line">     public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">             Bundle savedInstanceState) &#123;</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onCreateView&quot;);</span><br><span class="line">         View view &#x3D; inflater.inflate(R.layout.fragment01, null);</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         return view;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;表示activity执行oncreate方法完成了的时候会调用此方法</span><br><span class="line">     @Override</span><br><span class="line">     public void onActivityCreated(Bundle savedInstanceState) &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onActivityCreated(savedInstanceState);</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onActivityCreated&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;和activity一致</span><br><span class="line">     @Override</span><br><span class="line">     public void onStart() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onStart();</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onStart&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;和activity一致</span><br><span class="line">     @Override</span><br><span class="line">     public void onResume() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onResume();</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onResume&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;和activity一致</span><br><span class="line">     @Override</span><br><span class="line">     public void onPause() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onPause();</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onPause&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;和activity一致</span><br><span class="line">     @Override</span><br><span class="line">     public void onStop() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onStop();</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onStop&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;表示fragment销毁相关联的UI布局</span><br><span class="line">     @Override</span><br><span class="line">     public void onDestroyView() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onDestroyView();</span><br><span class="line">        Log.i(TAG, &quot;--MyFragment-&gt;&gt;onDestroyView&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;销毁fragment对象</span><br><span class="line">     @Override</span><br><span class="line">     public void onDestroy() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">         super.onDestroy();</span><br><span class="line">         Log.i(TAG, &quot;--MyFragment-&gt;&gt;onDestroy&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;脱离activity</span><br><span class="line">     @Override</span><br><span class="line">     public void onDetach() &#123;</span><br><span class="line">         &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onDetach();</span><br><span class="line">        Log.i(TAG, &quot;--MyFragment-&gt;&gt;onDetach&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>activity_main.xml的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;line&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>MainActivity.java的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragmentlifecycle;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.app.FragmentManager;</span><br><span class="line">import android.app.FragmentTransaction;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.view.Menu;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">    private final String TAG &#x3D; &quot;MainActivity&quot;;</span><br><span class="line">    private FragmentManager manager;</span><br><span class="line">    private FragmentTransaction transaction;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        manager &#x3D; getFragmentManager();</span><br><span class="line">        transaction &#x3D; manager.beginTransaction();</span><br><span class="line">        MyFragment fragment &#x3D; new MyFragment();</span><br><span class="line">        transaction.add(R.id.line, fragment);</span><br><span class="line">        transaction.commit();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onCreate&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onStart();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onStart&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onResume();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onResume&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onPause();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onPause&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStop() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onStop();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onStop&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onRestart() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onRestart();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onRestart&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        Log.i(TAG, &quot;--MainActivity-&gt;&gt;onDestroy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">        &#x2F;&#x2F; Inflate the menu; this adds items to the action bar if it is present.</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，上面的代码在每个生命周期的方法里都打印了日志，然后我们来运行一下程序，可以看到打印日志如下：</p><p>初次加载：（分成两部分来看）</p><p><img src="img11.png" alt=""></p><p>点击一下home键（或接入电话），打印日志如下：</p><p><img src="img12.png" alt=""></p><p>重新进入进入程序（或电话结束），打印日志如下：</p><p><img src="img13.png" alt=""></p><p>点击back键退出程序，打印日志如下：</p><p><img src="img14.png" alt=""></p><p>通过上面的日志，我们能够看出，Fragment和Activity的生命周期太相似了。只是有几个Activity中没有的新方法，需要重点介绍一下：</p><p>onAttach方法：Fragment和Activity建立关联的时候调用（获得activity的传递的值）<br>onCreateView方法：为Fragment创建视图（加载布局）时调用（给当前的fragment绘制UI布局，可以使用线程更新UI）<br>onActivityCreated方法：当Activity中的onCreate方法执行完后调用（表示activity执行oncreate方法完成了的时候会调用此方法）<br>onDestroyView方法：Fragment中的布局被移除时调用（表示fragment销毁相关联的UI布局）<br>onDetach方法：Fragment和Activity解除关联的时候调用（脱离activity）</p><h3 id="八-Fragment返回栈的管理："><a href="#八-Fragment返回栈的管理：" class="headerlink" title="八.Fragment返回栈的管理："></a>八.Fragment返回栈的管理：</h3><p>将Fragment添加到返回栈中：</p><p>假设现在我们有两个Fragment：Fragment01和Fragment02，我们现在从Fragment01的界面跳到Fragment02，然后按Back键，发现程序是直接退出了，而不是返回到Fragment01。如果现在想实现以下功能：从Fragment01的界面跳到Fragment02，然后按Back键，会返回到Fragment01。这个功能该怎么实现呢？这其实就利用到了返回栈的知识。</p><p>其实很简单，FragmentTransaction中提供了一个addToBackStack()方法，可以将一个事务添加到返回栈中。</p><p>我们先回顾一下之前动态加载Fragment的代码，然后在此基础之上，增加一行代码就可以将Fragment添加到返回栈中：（即第07行代码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;步骤一：添加一个FragmentTransaction的实例</span><br><span class="line">FragmentManager fragmentManager &#x3D;getFragmentManager();</span><br><span class="line">FragmentTransaction transaction &#x3D; fragmentManager.beginTransaction();</span><br><span class="line">&#x2F;&#x2F;步骤二：用add()方法加上Fragment的对象</span><br><span class="line">RightFragment rightFragment &#x3D; new RightFragment();</span><br><span class="line">transaction.add(R.id.right, rightFragment);</span><br><span class="line">transaction.addToBackStack(null);</span><br><span class="line">&#x2F;&#x2F;步骤三：调用commit()方法使得FragmentTransaction实例的改变生效</span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure><p>第07行代码：我们在事务提交之前调用了FragmentTransaction的addToBackStack()方法，它可以接受一个名字用于描述返回栈的状态，，一般传入null即可。</p><p>【实例】现在通过代码来实现以下界面（下面的图片为程序运行时加载的首页），并且把每一个Fragment都加入到返回栈当中去，然后观察其生命周期的变化。完整代码如下：</p><p><img src="img15.png" alt=""></p><p>首先新建工程文件m01_Fragment04，然后开始我们的代码之旅：</p><p>我们先把右侧的四个Fragment建起来吧：</p><p>Fragment01.java主要部分的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragment04;</span><br><span class="line"></span><br><span class="line">import android.app.Fragment;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.LayoutInflater;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line">public class Fragment01 extends Fragment &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState) &#123;</span><br><span class="line">        View view &#x3D; inflater.inflate(R.layout.f1, null);</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为避免啰嗦，这里就不把Fragment01生命周期中的其他函数罗列出来了，我们只要知道在实际代码中这些函数都是加了的。</p><p>Fragment01的布局文件f1.xml的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;textView1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;加载图片&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>然后依次新建出Fragment02、Fragment03、Fragment04的java代码和布局文件。</p><p>MainActivity的布局文件activity_main.xml代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;left&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;#CCCCCC&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;button1&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;加载图片&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;button2&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;海报管理&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;button3&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;照片管理&quot; &#x2F;&gt;</span><br><span class="line">   </span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;button4&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;新闻管理&quot; &#x2F;&gt;        </span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;right&quot;       </span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>其中，第一个LinearLayout表示左侧的按钮，第二个LinearLayout留给右边的Fragment。</p><p>MainActivity.java的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragment04;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.app.FragmentManager;</span><br><span class="line">import android.app.FragmentTransaction;</span><br><span class="line">import android.view.Menu;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity  implements OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    private FragmentManager manager;</span><br><span class="line">    private FragmentTransaction transaction;</span><br><span class="line">    private Button button1,button2,button3,button4;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    manager &#x3D; getFragmentManager();</span><br><span class="line">        button1 &#x3D; (Button)this.findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(this);</span><br><span class="line">        button2 &#x3D; (Button)this.findViewById(R.id.button2);</span><br><span class="line">        button2.setOnClickListener(this);</span><br><span class="line">        button3 &#x3D; (Button)this.findViewById(R.id.button3);</span><br><span class="line">        button3.setOnClickListener(this);</span><br><span class="line">        button4 &#x3D; (Button)this.findViewById(R.id.button4);</span><br><span class="line">        button4.setOnClickListener(this);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">        &#x2F;&#x2F; Inflate the menu; this adds items to the action bar if it is present.</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;通过点击不同的按钮，跳转到不同的Fragment</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        transaction &#x3D; manager.beginTransaction();</span><br><span class="line">        switch (v.getId()) &#123;</span><br><span class="line">        case R.id.button1:</span><br><span class="line">            Fragment01 fragment01 &#x3D; new Fragment01();</span><br><span class="line">            transaction.replace(R.id.right, fragment01, &quot;fragment01&quot;);</span><br><span class="line">            transaction.addToBackStack(&quot;fragment01&quot;);&#x2F;&#x2F; 添加到Activity管理的回退栈中。</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case R.id.button2:</span><br><span class="line">            Fragment02 fragment02 &#x3D; new Fragment02();</span><br><span class="line">            transaction.replace(R.id.right, fragment02, &quot;fragment02&quot;);</span><br><span class="line">            transaction.addToBackStack(&quot;fragment02&quot;);&#x2F;&#x2F; 添加到Activity管理的回退栈中。</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case R.id.button3:</span><br><span class="line">            Fragment03 fragment03 &#x3D; new Fragment03();</span><br><span class="line">            transaction.replace(R.id.right, fragment03, &quot;fragment03&quot;);</span><br><span class="line">            transaction.addToBackStack(&quot;fragment03&quot;);&#x2F;&#x2F; 添加到Activity管理的回退栈中。</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case R.id.button4:</span><br><span class="line">            Fragment04 fragment04 &#x3D; new Fragment04();</span><br><span class="line">            transaction.replace(R.id.right, fragment04, &quot;fragment04&quot;);</span><br><span class="line">            transaction.addToBackStack(&quot;fragment04&quot;);&#x2F;&#x2F; 添加到Activity管理的回退栈中。</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上当代码中，通过点击不同的按钮，就能跳到对应的Fragment，而这四个Fragment都已经加入到了返回栈当中。运行程序之后，也是这样的。</p><p>注意第46行和第72行，transaction = manager.beginTransaction()意味着开始，transaction.commit()意味着结束。</p><p>我们就其中的fragment01和fragment02来讨论一下他们的生命周期的变化：</p><p>运行程序后，界面如下，没有任何fragment被加载：</p><p><img src="img16.png" alt=""></p><p>点击左侧第一个按钮，加载fragment01：</p><p><img src="img17.png" alt=""></p><p>点击左侧第二个按钮，加载fragment02（此时fragment01被替换，并被压到了栈当中）：</p><p><img src="img18.png" alt=""></p><p>注：如果fragment01在替换的时候没有被压到栈中，那就会被销毁，在执行完onDestroyView()方法后，会继续执行onDestroy()和onDetach()方法。</p><p>按Back键，fragment01重新返回到屏幕：（fragment02被销毁）</p><p><img src="img19.png" alt=""></p><p>再按Back键，fragment01被销毁：</p><p><img src="img20.png" alt=""></p><p> 注：Fragment的返回栈由Activity管理；而Activity的返回栈由系统管理。</p><h3 id="九-接口回调的简单引入："><a href="#九-接口回调的简单引入：" class="headerlink" title="九.接口回调的简单引入："></a>九.接口回调的简单引入：</h3><p>我们先来看一个简单的接口回调的例子：</p><p>新建一个Java工程，然后新建一个包。然后新建一个A.java文件：</p><p>A.java代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.cn.callback;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public A() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;下载图片的操作</span><br><span class="line">    public void loadImage(String image_path,final CallBack callBack) &#123;</span><br><span class="line">        new Thread(new Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            public void run() &#123;</span><br><span class="line">                &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">                String msg &#x3D; &quot;Hello world&quot;;</span><br><span class="line">                callBack.getResult(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface CallBack &#123;</span><br><span class="line">        public void getResult(String result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第21至23行就是回调方法。</p><p>新建B.java，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.cn.callback;</span><br><span class="line"></span><br><span class="line">import com.cn.callback.A.CallBack;</span><br><span class="line"></span><br><span class="line">public class B &#123;</span><br><span class="line">    public B()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        A a &#x3D; new A();</span><br><span class="line">        a.loadImage(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;a.gif&quot;, new CallBack() &#123;</span><br><span class="line">            public void getResult(String result) &#123;</span><br><span class="line">                &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后程序运行的结果如下：</p><p>关于接口回调，有一个博客，不过现在还不能完全理解，附上链接：</p><p>一个经典例子让你彻彻底底理解java回调机制：<a href="http://blog.csdn.net/xiaanming/article/details/8703708" target="_blank" rel="noopener">http://blog.csdn.net/xiaanming/article/details/8703708</a></p><h3 id="十-Fragment和Activity的交互："><a href="#十-Fragment和Activity的交互：" class="headerlink" title="十.Fragment和Activity的交互："></a>十.Fragment和Activity的交互：</h3><ol><li><p>在Fragment中调用Activity中的方法：<br>Fragment可以通过getActivity()方法来获得Activity的实例，然后就可以调用一些例如findViewById()之类的方法。例如：<br>View listView = getActivity().findViewById(R.id.list);<br>但是注意调用getActivity()时，fragment必须和activity关联（attached to an activity），否则将会返回一个null。<br>另外，当碎片中需要使用Context对象时，也可以使用getActivity()方法，因此获取到的活动本身就是一个Context对象。<br>【实例】在Activity的EditText中输入一段文本，这个时候，点击Fragment中的按钮，让它弹出吐司，显示出对应的文本。<br>其实就是让Activity中的文本显示在Fragment中，Fragment的核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState) &#123;</span><br><span class="line">        View view &#x3D; inflater.inflate(R.layout.fragment_left, null);</span><br><span class="line">        button &#x3D; (Button) view.findViewById(R.id.button1);</span><br><span class="line">        button.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">                EditText editText &#x3D; (EditText) getActivity().findViewById(R.id.editText);</span><br><span class="line">                Toast.makeText(getActivity(), editText.getText().toString(), 1).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第09行代码是核心，通过getActivity()方法来获得Activity的实例，然后就可以调用findViewById()的方法得到其中的EditText控件。</p></li><li><p>在Activity中调用Fragment中的方法：（要用到接口回调）<br>activity也可以获得一个fragment的引用，从而调用fragment中的方法。获得fragment的引用要用FragmentManager，之后可以调用findFragmentById() 或者 findFragmentByTag()。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExampleFragment fragment &#x3D; (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</span><br></pre></td></tr></table></figure><p>具体例子稍后再讲。</p></li><li><p>Fragment与Fragment之间的通信：<br>既然Fragment和Activity之间的通信问题解决了，那Fragment与Fragment之间的通信也没有那么复杂。基本思路是：<br>首先在一个Fragment中可以得到与它相关联的Activity，然后再通过这个Activity去获取另外一个Fragment的实例，这样就实现了不同Fragment之间的通信。</p></li></ol><h3 id="十一-创建事件回调（在Activity中获取Fragment中的值）："><a href="#十一-创建事件回调（在Activity中获取Fragment中的值）：" class="headerlink" title="十一.创建事件回调（在Activity中获取Fragment中的值）："></a>十一.创建事件回调（在Activity中获取Fragment中的值）：</h3><p>一些情况下，可能需要fragment和activity共享事件，一个比较好的做法是在fragment里面定义一个回调接口，然后要求宿主activity实现这个接口。当activity通过这个接口接收到一个回调，它可以让同布局中的其他fragment分享这个信息。</p><p>例如，一个新闻显示应用在一个activity中有两个fragment，一个fragment A显示文章题目的列表，一个fragment B显示文章。所以当一个文章被选择的时候，fragment A必须通知activity，然后activity通知fragment B，让它显示这篇文章。（例子的代码见官方文档）</p><p>我们现在举一个其他的例子：</p><p>【实例】在Fragment中输入值，点击Activity中的按钮，弹出吐司，显示之前输入的值。其实就是让Fragment中的文本显示在Activity中</p><p>我们在平板的左侧加入一个fragment，完整代码如下：</p><p>fragment_left.xml代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;editText1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:ems&#x3D;&quot;10&quot; &gt;</span><br><span class="line">        &lt;requestFocus &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;EditText&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>其实就是加了一个EditText,方便在里面输入文本内容。</p><p>然后在frament中加一个接口回调，让它在Activity当中调用，方便获取输入文本的值。LeftFragment.java的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragment05;</span><br><span class="line"></span><br><span class="line">import android.app.Fragment;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.LayoutInflater;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line"></span><br><span class="line">public class LeftFragment extends Fragment &#123;</span><br><span class="line"></span><br><span class="line">    private Button button;</span><br><span class="line">    private EditText editText;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">            Bundle savedInstanceState) &#123;</span><br><span class="line">        View view &#x3D; inflater.inflate(R.layout.fragment_left, null);</span><br><span class="line">        editText &#x3D; (EditText) view.findViewById(R.id.editText1);</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;接口回调</span><br><span class="line">    public void getEditText(CallBack callBack) &#123;</span><br><span class="line">        String msg &#x3D; editText.getText().toString();</span><br><span class="line">        callBack.getResult(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface CallBack &#123;</span><br><span class="line">        public void getResult(String result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释如下：</p><p>第25行：一定要为editText加一个id，不然会报空指针异常的错误；</p><p>34至42行：添加一个接口回调，用于获取文本的值，然后稍后再Activity当中进行调用。</p><p>activity_main.xml的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class="line"></span><br><span class="line">     &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;left&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;224dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;#CCCCCC&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;editText1&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:ems&#x3D;&quot;10&quot; &gt;</span><br><span class="line">            &lt;requestFocus &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;EditText&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;button&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;获得Fragment的值&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt; </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>其实一共就两个线性布局，左边的现性布局留给fragment，右边的线性性局留给Activity。</p><p>MainActivity.java的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m01_fragment05;</span><br><span class="line"></span><br><span class="line">import com.example.m01_fragment05.LeftFragment.CallBack;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.app.FragmentManager;</span><br><span class="line">import android.app.FragmentTransaction;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.Menu;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">    private FragmentManager manager;</span><br><span class="line">    private FragmentTransaction transaction;</span><br><span class="line">    private Button button;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button &#x3D; (Button)findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;动态加载leftFragment</span><br><span class="line">        manager &#x3D; getFragmentManager();</span><br><span class="line">        transaction &#x3D; manager.beginTransaction();</span><br><span class="line">        final LeftFragment leftFragment &#x3D; new LeftFragment();</span><br><span class="line">        transaction.add(R.id.left, leftFragment, &quot;left&quot;);</span><br><span class="line">        transaction.commit();</span><br><span class="line">        button.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F;点击按钮后，通过接口回调，获取fragment当中EditText的值，并弹出吐司</span><br><span class="line">                leftFragment.getEditText(new CallBack()&#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void getResult(String result) &#123;</span><br><span class="line">                        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">                        Toast.makeText(MainActivity.this, result, 1).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">        &#x2F;&#x2F; Inflate the menu; this adds items to the action bar if it is present.</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在Activity当中动态加载Fragment，然后点击按钮，通过接口回调，获取fragment当中EditText的值，并弹出吐司。</p><p>程序运行后，在左侧的Fragment的EditText当中输入值，点击右侧的按钮，弹出吐司，效果如下：</p><p><img src="img21.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowManager基础</title>
      <link href="2020/05/28/WindowManager%E5%9F%BA%E7%A1%80/"/>
      <url>2020/05/28/WindowManager%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><p><a href="https://github.com/itemuse/XTester/tree/master/windowmanager" target="_blank" rel="noopener">XTester-WindowManager</a><br><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/screen/XScreen.java" target="_blank" rel="noopener">xlib-Screen</a><br>此文是在此基础上做的讲解,用于加深印象</p><h3 id="二-WindowManager介绍"><a href="#二-WindowManager介绍" class="headerlink" title="二.WindowManager介绍"></a>二.WindowManager介绍</h3><p>Android为我们提供的用于与窗口管理器进行交互的一个API！我们都知道App的界面都是 由一个个的Acitivty组成，而Activity又由View组成，当我们想显示一个界面的时候， 第一时间想起的是:Activity，对吧？又或者是Dialog和Toast。</p><p>但是有些情况下，前面这三者可能满足不了我们的需求，比如我们仅仅是一个简单的显示 用Activity显得有点多余了，而Dialog又需要Context对象，Toast又不可以点击… 对于以上的情况我们可以利用WindowManager这个东东添加View到屏幕上， 或者从屏幕上移除View！他就是管理Android窗口机制的一个接口，显示View的最底层！</p><h3 id="三-如何获得WindowManager实例"><a href="#三-如何获得WindowManager实例" class="headerlink" title="三.如何获得WindowManager实例"></a>三.如何获得WindowManager实例</h3><ul><li><h4 id="获得WindowManager对象"><a href="#获得WindowManager对象" class="headerlink" title="获得WindowManager对象:"></a>获得WindowManager对象:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WindowManager wManager &#x3D; getApplicationContext().getSystemService(Context. WINDOW_ SERVICE);</span><br></pre></td></tr></table></figure></li><li><h4 id="获得WindowManager-LayoutParams对象，为后续操作做准备"><a href="#获得WindowManager-LayoutParams对象，为后续操作做准备" class="headerlink" title="获得WindowManager.LayoutParams对象，为后续操作做准备"></a>获得WindowManager.LayoutParams对象，为后续操作做准备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WindowManager.LayoutParams wmParams&#x3D;new WindowManager.LayoutParams();</span><br></pre></td></tr></table></figure></li></ul><h3 id="四-WindowManager使用实例："><a href="#四-WindowManager使用实例：" class="headerlink" title="四.WindowManager使用实例："></a>四.WindowManager使用实例：</h3><ul><li><h4 id="实例1：获取屏幕宽高"><a href="#实例1：获取屏幕宽高" class="headerlink" title="实例1：获取屏幕宽高"></a>实例1：获取屏幕宽高</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the width of screen, in pixel.</span><br><span class="line"> *</span><br><span class="line"> * @return the width of screen, in pixel</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getScreenWidth() &#123;</span><br><span class="line">    WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">    Point point &#x3D; new Point();</span><br><span class="line">    if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">        wm.getDefaultDisplay().getRealSize(point);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        wm.getDefaultDisplay().getSize(point);</span><br><span class="line">    &#125;</span><br><span class="line">    return point.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Return the height of screen, in pixel.</span><br><span class="line"> *</span><br><span class="line"> * @return the height of screen, in pixel</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getScreenHeight() &#123;</span><br><span class="line">    WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">    Point point &#x3D; new Point();</span><br><span class="line">    if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">        wm.getDefaultDisplay().getRealSize(point);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        wm.getDefaultDisplay().getSize(point);</span><br><span class="line">    &#125;</span><br><span class="line">    return point.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取应用宽高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s width of screen, in pixel.</span><br><span class="line"> *</span><br><span class="line"> * @return the application&#39;s width of screen, in pixel</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getAppScreenWidth() &#123;</span><br><span class="line">    WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">    Point point &#x3D; new Point();</span><br><span class="line">    wm.getDefaultDisplay().getSize(point);</span><br><span class="line">    return point.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Return the application&#39;s height of screen, in pixel.</span><br><span class="line"> *</span><br><span class="line"> * @return the application&#39;s height of screen, in pixel</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int getAppScreenHeight() &#123;</span><br><span class="line">    WindowManager wm &#x3D; (WindowManager) getApp().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    if (wm &#x3D;&#x3D; null) return -1;</span><br><span class="line">    Point point &#x3D; new Point();</span><br><span class="line">    wm.getDefaultDisplay().getSize(point);</span><br><span class="line">    return point.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img1.jpg" alt=""></p></li><li><h4 id="实例2：设置窗口全屏显示"><a href="#实例2：设置窗口全屏显示" class="headerlink" title="实例2：设置窗口全屏显示"></a>实例2：设置窗口全屏显示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</span><br><span class="line">                WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">        getSupportActionBar().hide();</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="img2.jpg" alt=""></p></li><li><h4 id="实例3：保持屏幕常亮"><a href="#实例3：保持屏幕常亮" class="headerlink" title="实例3：保持屏幕常亮"></a>实例3：保持屏幕常亮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param activity</span><br><span class="line"> * @param keepScreenOn 是否开启屏幕常亮</span><br><span class="line"> *&#x2F;</span><br><span class="line">public void setKeepScreenOn(Activity activity, boolean keepScreenOn) &#123;</span><br><span class="line">    if(keepScreenOn)&#123;</span><br><span class="line">        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="实例4：简单悬浮框的实现"><a href="#实例4：简单悬浮框的实现" class="headerlink" title="实例4：简单悬浮框的实现"></a>实例4：简单悬浮框的实现</h4><p>实现代码：<br>一个触摸图标工具类：EasyTouchView.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">package cn.xy.windowmanager;</span><br><span class="line"></span><br><span class="line">import android.annotation.SuppressLint;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.graphics.PixelFormat;</span><br><span class="line">import android.os.Build;</span><br><span class="line">import android.util.DisplayMetrics;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.view.Gravity;</span><br><span class="line">import android.view.MotionEvent;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.WindowManager;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">public class EasyTouchView&#123;</span><br><span class="line"></span><br><span class="line">    public static final String TAG &#x3D; &quot;EasyTouch&quot;;</span><br><span class="line">    private static EasyTouchView mEasyTouchView;</span><br><span class="line">    private Context mContext;</span><br><span class="line"></span><br><span class="line">    public static EasyTouchView getInstance() &#123;</span><br><span class="line">        if (mEasyTouchView &#x3D;&#x3D; null) &#123;</span><br><span class="line">            mEasyTouchView &#x3D; new EasyTouchView();</span><br><span class="line">        &#125;</span><br><span class="line">        return mEasyTouchView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private WindowManager mWindowManager;</span><br><span class="line">    private int width, height;</span><br><span class="line">    private double stateHeight;</span><br><span class="line">    private WindowManager.LayoutParams layoutParams;</span><br><span class="line">    private Button iconView;</span><br><span class="line">    private float startX &#x3D; 0, startY &#x3D; 0;</span><br><span class="line">    private float startRawX &#x3D; 0, startRawY &#x3D; 0;</span><br><span class="line">    private int iconViewX &#x3D; 0, iconViewY &#x3D; 0;</span><br><span class="line">    private boolean isIconView &#x3D; false;</span><br><span class="line"></span><br><span class="line">    private DisplayMetrics mDisplayMetrics;</span><br><span class="line"></span><br><span class="line">    public void initEasyTouch(Context mContext, DisplayMetrics displayMetrics) &#123;</span><br><span class="line">        this.mDisplayMetrics &#x3D; displayMetrics;</span><br><span class="line">        this.mContext &#x3D; mContext;</span><br><span class="line">        width &#x3D; mDisplayMetrics.widthPixels;</span><br><span class="line">        height &#x3D; mDisplayMetrics.heightPixels;</span><br><span class="line">        stateHeight &#x3D; Math.ceil(25 * displayMetrics.density);</span><br><span class="line">        createWM();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void createWM() &#123;</span><br><span class="line">        mWindowManager &#x3D; (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        layoutParams &#x3D; new WindowManager.LayoutParams();</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.M)&#123;</span><br><span class="line">            layoutParams.type &#x3D; WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            layoutParams.type &#x3D;  WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;</span><br><span class="line">        &#125;</span><br><span class="line">        layoutParams.format &#x3D; PixelFormat.TRANSLUCENT;</span><br><span class="line">        layoutParams.flags &#x3D; WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressLint(&quot;ClickableViewAccessibility&quot;)</span><br><span class="line">    public void addIconView() &#123;</span><br><span class="line">        if (isIconView) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        isIconView &#x3D; true;</span><br><span class="line">        if (iconView &#x3D;&#x3D; null) &#123;</span><br><span class="line">            iconView &#x3D; new Button(mContext);</span><br><span class="line">            iconView.setBackgroundResource(R.mipmap.ic_launcher);</span><br><span class="line">            iconView.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">                    float rawX &#x3D; event.getRawX();</span><br><span class="line">                    float rawY &#x3D; (float) (event.getRawY() - stateHeight);</span><br><span class="line"></span><br><span class="line">                    int sumX &#x3D; (int) (rawX - startRawX);</span><br><span class="line">                    int sumY &#x3D; (int) (event.getRawY() - startRawY);</span><br><span class="line"></span><br><span class="line">                    switch (event.getAction()) &#123;</span><br><span class="line">                    case MotionEvent.ACTION_DOWN:</span><br><span class="line">                        Log.i(&quot;Log&quot;, &quot;Action_Down&quot;);</span><br><span class="line">                        startX &#x3D; event.getX();</span><br><span class="line">                        startY &#x3D; event.getY();</span><br><span class="line">                        startRawX &#x3D; event.getRawX();</span><br><span class="line">                        startRawY &#x3D; event.getRawY();</span><br><span class="line"></span><br><span class="line">                        layoutParams.alpha &#x3D; 1f;</span><br><span class="line">                        mWindowManager.updateViewLayout(iconView, layoutParams);</span><br><span class="line">                        break;</span><br><span class="line">                    case MotionEvent.ACTION_UP:</span><br><span class="line">&#x2F;*                        layoutParams.alpha &#x3D; 0.6f;</span><br><span class="line">                        mWindowManager.updateViewLayout(iconView, layoutParams);</span><br><span class="line">                        if (sumX &gt; -10 &amp;&amp; sumX &lt; 10 &amp;&amp; sumY &gt; -10 &amp;&amp; sumY &lt; 10) &#123;</span><br><span class="line">                            removeIcon();</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            float endRawX &#x3D; rawX - startX;</span><br><span class="line">                            float endRawY &#x3D; rawY - startY;</span><br><span class="line">                            if (endRawX &lt; width &#x2F; 2) &#123;</span><br><span class="line">                                if (endRawX &gt; endRawY) &#123;</span><br><span class="line">                                    if (rawY &gt; iconView.getHeight() * 2) &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, endRawY);</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, 0);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; else if (endRawX &gt; height - event.getRawY() - 98) &#123;</span><br><span class="line">                                    if ((float) (height - stateHeight - endRawY - 98) &gt; iconView.getHeight() * 2) &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, endRawY);</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, (float) (height - stateHeight - 98));</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125; else &#123;</span><br><span class="line">                                    if (endRawX &gt; iconView.getWidth() * 2) &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, endRawY);</span><br><span class="line"></span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        updateIconViewPosition(0, endRawY);</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if (width - endRawX - 98 &gt; endRawY) &#123;</span><br><span class="line">                                    if (rawY &gt; iconView.getHeight() * 2) &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, endRawY);</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, 0);</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125; else if (width - endRawX - 98 &gt; height - event.getRawY() - 98) &#123;</span><br><span class="line">                                    if ((float) (height - stateHeight - endRawY - 98) &gt; iconView.getHeight() * 2) &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, endRawY);</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, (float) (height - stateHeight - 98));</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125; else &#123;</span><br><span class="line">                                    if (width - endRawX - 98 &gt; iconView.getWidth() * 2) &#123;</span><br><span class="line">                                        updateIconViewPosition(endRawX, endRawY);</span><br><span class="line"></span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        updateIconViewPosition(width, endRawY);</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        startX &#x3D; 0;</span><br><span class="line">                        startY &#x3D; 0;</span><br><span class="line">                        startRawX &#x3D; 0;</span><br><span class="line">                        startRawY &#x3D; 0;*&#x2F;</span><br><span class="line">                        break;</span><br><span class="line">                    case MotionEvent.ACTION_MOVE:</span><br><span class="line">                        if (sumX &lt; -10 || sumX &gt; 10 || sumY &lt; -10 || sumY &gt; 10) &#123;</span><br><span class="line">                            updateIconViewPosition(rawX - startX, rawY - startY);</span><br><span class="line">                        &#125;</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        layoutParams.alpha &#x3D; 0.5f;</span><br><span class="line">        layoutParams.x &#x3D; iconViewX;</span><br><span class="line">        layoutParams.y &#x3D; iconViewY;</span><br><span class="line">        layoutParams.width &#x3D; 170;</span><br><span class="line">        layoutParams.height &#x3D; 170;</span><br><span class="line">        layoutParams.gravity &#x3D; Gravity.LEFT | Gravity.TOP;</span><br><span class="line">        mWindowManager.addView(iconView, layoutParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void updateIconViewPosition(float x, float y) &#123;</span><br><span class="line">        iconViewX &#x3D; (int) x;</span><br><span class="line">        iconViewY &#x3D; (int) y;</span><br><span class="line">        layoutParams.x &#x3D; (int) x;</span><br><span class="line">        layoutParams.y &#x3D; (int) y;</span><br><span class="line">        mWindowManager.updateViewLayout(iconView, layoutParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void removeIcon() &#123;</span><br><span class="line">        if (isIconView &amp;&amp; iconView !&#x3D; null) &#123;</span><br><span class="line">            mWindowManager.removeView(iconView);</span><br><span class="line">            isIconView &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开关控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void onClick(View view)&#123;</span><br><span class="line">    switch (view.getId())&#123;</span><br><span class="line">        case R.id.open:</span><br><span class="line">            EasyTouchView.getInstance().addIconView();</span><br><span class="line">            break;</span><br><span class="line">        case R.id.close:</span><br><span class="line">            EasyTouchView.getInstance().removeIcon();</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着AndroidManifest.xml加上权限，以及为MainService进行注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>运行效果图：<br><img src="img3.gif" alt="gif"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WindowManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广播基础</title>
      <link href="2020/05/26/%E5%B9%BF%E6%92%AD%E5%9F%BA%E7%A1%80/"/>
      <url>2020/05/26/%E5%B9%BF%E6%92%AD%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-广播"><a href="#一-广播" class="headerlink" title="一.广播"></a>一.广播</h3><ul><li><p>广播的生命周期很短，经过调用对象—&gt;实现onReceive—&gt;结束，整个过程就结束了。从实现的复杂度和代码量来看，广播无疑是最迷你的Android 组件，实现往往只需几行代码。广播对象被构造出来后通常只执行BroadcastReceiver.onReceive方法，便结束了其生命周期。所以有的时候我们可以把它当做函数看也未必不可。</p></li><li><p>和所有组件一样，广播对象也是在应用进程的主线程中被构造，所以广播对象的执行必须是要同步且快速的。也不推荐在里面开子线程，因为往往线程还未结束，广播对象就已经执行完毕被系统销毁。如果需要完成一项比较耗时的工作 , 应该通过发送 Intent 给 Service, 由 Service 来完成。</p></li><li>每次广播到来时 , 会重新创建 BroadcastReceiver 对象 , 并且调用 onReceive() 方法 , 执行完以后 , 该对象即被销毁 . 当 onReceive() 方法在 10 秒内没有执行完毕， Android 会认为该程序无响应。</li></ul><h3 id="二-接收系统广播："><a href="#二-接收系统广播：" class="headerlink" title="二.接收系统广播："></a>二.接收系统广播：</h3><p>广播接收器可以自由地对自己感兴趣的广播进行注册，这样当有相应的广播发出时，广播接收器就能收到该广播，并在内部处理相应的逻辑。注册广播的方式有两种，在代码中注册和在清单文件中注册，前者称为动态注册，后者称为静态注册。</p><ol><li><p>动态注册监听网络变化：<br>新建工程文件，首先在MainActivity中定义一个内部类netWorkChangeReceiver，并重写父类的onReceive()方法，这样每当网络状态发生变化时，onReceive()方法就会得到执行，这里使用Toast提示一段文本信息，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class netWorkChangeReceiver extends BroadcastReceiver &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            Toast.makeText(context, &quot;network changes&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>紧接着在onCreate方法中进行动态注册，然后在onDestroy方法中进行取消注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> private IntentFilter intentFilter;</span><br><span class="line"> private netWorkChangeReceiver netWorkChangeReceiver;</span><br><span class="line"> </span><br><span class="line"> @Override</span><br><span class="line"> protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">     super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F;动态注册：创建一个IntentFilter的实例，添加网络变化的广播(功能是对组件进行过滤，只获取需要的消息)</span><br><span class="line">    intentFilter &#x3D; new IntentFilter();</span><br><span class="line">    intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);</span><br><span class="line">   &#x2F;&#x2F;创建NetWorkChangeReceiver的实例，并调用registerReceiver()方法进行注册</span><br><span class="line">   netWorkChangeReceiver &#x3D; new netWorkChangeReceiver();</span><br><span class="line">    registerReceiver(netWorkChangeReceiver, intentFilter);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;取消注册，一定要记得，不然系统会报错</span><br><span class="line">@Override</span><br><span class="line">protected void onDestroy() &#123;</span><br><span class="line">    super.onDestroy();</span><br><span class="line">    unregisterReceiver(netWorkChangeReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码解释如下：<br>11行：给意图过滤器intentFilter添加一个值为android.net.conn.CONNECTIVITY_CHANGE的action。因为每当网络状态发生变化时，系统就会发出一条值为android.net.conn.CONNECTIVITY_CHANG的广播。<br>注：最后要记得，动态注册的广播接收器一定要取消注册才行。<br>运行程序，就可以了。<br>不过只是提醒网络发生变化还不够人性化，为了能够准确的告诉用户当前是有网络还是没有网络，我们还需要对上述代码进一步优化，修改netWorkChangeReceiver中的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class netWorkChangeReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        &#x2F;&#x2F;通过getSystemService()方法得到connectionManager这个系统服务类，专门用于管理网络连接</span><br><span class="line">        ConnectivityManager connectionManager &#x3D; (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">        NetworkInfo networkInfo &#x3D; connectionManager.getActiveNetworkInfo();</span><br><span class="line">        if(networkInfo !&#x3D; null &amp;&amp; networkInfo.isAvailable())&#123;</span><br><span class="line">            Toast.makeText(context, &quot;network is available&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Toast.makeText(context, &quot;network is unavailable&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码解释：<br>06行：在onReceive()方法中，首先通过通过getSystemService()方法得到connectionManager这个系统服务类，专门用于管理网络连接。<br>07行：然后调用它的getActiveNetworkInfo()方法可以得到NetworkInfo的实例，接着调用NetworkInfo的isAvailable()方法，就可以判断当前是否有网络了，最后通过Toast提示用户。<br>另外，查询系统的网络状态是需要申明权限的，打开清单文件，添加如下权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>注：访问<a href="http://developer.android.com/reference/android/Manifest.permission.html可以查看Android系统所有的可声明的权限。" target="_blank" rel="noopener">http://developer.android.com/reference/android/Manifest.permission.html可以查看Android系统所有的可声明的权限。</a><br>现在运行程序，就可以了。<br>上方程序完整版代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m05_broadcastreceiver01;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.BroadcastReceiver;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.IntentFilter;</span><br><span class="line">import android.net.ConnectivityManager;</span><br><span class="line">import android.net.NetworkInfo;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">    private IntentFilter intentFilter;</span><br><span class="line">    private netWorkChangeReceiver netWorkChangeReceiver;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        &#x2F;&#x2F; 动态注册：创建一个IntentFilter的实例，添加网络变化的广播</span><br><span class="line">        intentFilter &#x3D; new IntentFilter();</span><br><span class="line">        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);</span><br><span class="line">        &#x2F;&#x2F; 创建NetWorkChangeReceiver的实例，并调用registerReceiver()方法进行注册</span><br><span class="line">        netWorkChangeReceiver &#x3D; new netWorkChangeReceiver();</span><br><span class="line">        registerReceiver(netWorkChangeReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 取消注册，一定要记得，不然系统会报错</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        unregisterReceiver(netWorkChangeReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">    class netWorkChangeReceiver extends BroadcastReceiver &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            &#x2F;&#x2F;通过getSystemService()方法得到connectionManager这个系统服务类，专门用于管理网络连接</span><br><span class="line">            ConnectivityManager connectionManager &#x3D; (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">            NetworkInfo networkInfo &#x3D; connectionManager.getActiveNetworkInfo();</span><br><span class="line">            if(networkInfo !&#x3D; null &amp;&amp; networkInfo.isAvailable())&#123;</span><br><span class="line">                Toast.makeText(context, &quot;network is available&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Toast.makeText(context, &quot;network is unavailable&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态注册实现开机启动：<br>动态注册的方式比较灵活，但缺点是：必须在程序启动之后才能接收到广播，因为注册的逻辑是写在onCreate()方法中的。为了让程序在未启动的情况下就能接收到广播，这里就需要使用到静态注册。<br>这里我们准备让程序接收一条开机广播，当收到这条广播时，就可以在onReceive()方法中执行相应的逻辑，从而实现开机启动的功能。<br>新建一个类：BootCompleteReceiver，让他继承BroadcastReceiver，在onReceive()方法中简单地Toast一下，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class BootCompleteReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        Toast.makeText(context, &quot;Boot Complete&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里不再使用内部类的方式来定义广播接收器，因为稍后我们需要在清单文件AndroidManifest.xml中将这个广播接收器的类名注册进去。<br>然后修改清单文件AndroidManifest.xml，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-sdk</span><br><span class="line">        android:minSdkVersion&#x3D;&quot;8&quot;</span><br><span class="line">        android:targetSdkVersion&#x3D;&quot;16&quot; &#x2F;&gt;</span><br><span class="line">    &lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot;&#x2F;&gt;</span><br><span class="line">    &lt;uses-permission android:name&#x3D;&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt;</span><br><span class="line">        &lt;activity</span><br><span class="line">            android:name&#x3D;&quot;com.example.m05_broadcastreceiver01.MainActivity&quot;</span><br><span class="line">            android:label&#x3D;&quot;@string&#x2F;app_name&quot; &gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;receiver android:name&#x3D;&quot;.BootCompleteReceiver&quot;&gt;</span><br><span class="line">            &lt;intent-filter &gt;</span><br><span class="line">                &lt;action android:name&#x3D;&quot;android.intent.action.BOOT_COMPLETED&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;receiver&gt;</span><br><span class="line">    &lt;&#x2F;application&gt;</span><br></pre></td></tr></table></figure><p>代码解释如下：<br>终于，<application>标签内多了个子标签<receiver>，所有的静态注册的广播接收器都是在这里进行注册的。<br>22行：name中为广播接收器的名字<br>24行：想要接收的广播。Android系统启动完成后，会发出这条名为android.intent.action.BOOT_COMPLETED的广播。<br>05行：监听系统开机广播需要声明权限。<br>运行程序后，将手机关机重启，就能收到这条广播了。</p></li></ol><h3 id="三-发送自定义广播"><a href="#三-发送自定义广播" class="headerlink" title="三.发送自定义广播"></a>三.发送自定义广播</h3><ol><li><p>发送标准广播　　<br>新建工程文件。在发广播之前，我们先定义一个广播接收器来接收此广播才行。因此，新建一个类：MyBroadcastReceiver，让他继承BroadcastReceiver，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class MyBroadcastReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        Toast.makeText(context, &quot;received in MyBroadcastReceiver&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，当MyBroadcastReceiver 收到自定义的广播时，就会执行onReceive()方法中的逻辑，弹出一个Toast。<br>紧接着，要在清单文件AndroidManifest.xml中对这个广播接收器进行注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">    android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot;</span><br><span class="line">    android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">    android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt;</span><br><span class="line">    &lt;activity</span><br><span class="line">        android:name&#x3D;&quot;com.example.m05_broadcastreceiver02.MainActivity&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot; &gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;intent-filter&gt;</span><br><span class="line">    &lt;&#x2F;activity&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;receiver android:name&#x3D;&quot;.MyBroadcastReceiver&quot;&gt;</span><br><span class="line">        &lt;intent-filter &gt;</span><br><span class="line">            &lt;action android:name&#x3D;&quot;com.example.m05_broadcastreceiver02.MY_BROADCAST&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;intent-filter&gt;</span><br><span class="line">    &lt;&#x2F;receiver&gt;</span><br><span class="line">&lt;&#x2F;application&gt;</span><br></pre></td></tr></table></figure><p>代码解释：<br>18行：让MyBroadcastReceiver接收一条值为om.example.m05_broadcastreceiver02.MY_BROADCAST的广播，因此待会儿在发送广播的时候，我们就需要发出这样的一条广播。<br>紧接着，修改activity.xml中的代码，添加一个按钮Button。<br>然后，修改MainActivity.java中的代码，添加Button的监听事件：点击按钮时，发送广播</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Button button1&#x3D;(Button)findViewById(R.id.button1);</span><br><span class="line">button1.setOnClickListener(new OnClickListener() &#123;            </span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Intent intent &#x3D;new Intent(&quot;com.example.m05_broadcastreceiver02.MY_BROADCAST&quot;);</span><br><span class="line">        sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>总结：可以看到，点击按钮时，发送com.example.m05_broadcastreceiver02.MY_BROADCAST这条广播，这样，所有能够监听com.example.m05_broadcastreceiver02.MY_BROADCAST这条广播的广播接收器就都会同时收到消息，此时发出去的就是一条标准广播，即无序广播。所以接下来就需要讲到有序广播。</p></li><li><p>发送有序广播：<br>广播是一种可以跨进程的通信方式，其他应用程序是可以收到的。现在我们来发一条有序广播。<br>有序广播不仅有先后顺序，而且前面的广播还可以将后面的广播截断。<br>在3.1的代码基础之上，将按钮的监听事件修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Button button1&#x3D;(Button)findViewById(R.id.button1);</span><br><span class="line">button1.setOnClickListener(new OnClickListener() &#123;            </span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Intent intent &#x3D;new Intent(&quot;com.example.m05_broadcastreceiver02.MY_BROADCAST&quot;);</span><br><span class="line">        sendOrderedBroadcast(intent, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>即将06行代码修改一下，将sendBroadcast()方法改为sendOrderedBroadcast()方法，sendOrderedBroadcast()方法接收两个参数，第二个参数是一个与权限相关的字符串，这里传入null即可。<br>紧接着，修改清单文件AndroidManifest.xml中对广播接收器的注册，设置优先级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name&#x3D;&quot;.MyBroadcastReceiver&quot;&gt;</span><br><span class="line">    &lt;intent-filter android:priority&#x3D;&quot;100&quot;&gt;</span><br><span class="line">       &lt;action android:name&#x3D;&quot;com.example.m05_broadcastreceiver02.MY_BROADCAST&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure><p>即添加第02行代码。可以看到，通过android:priority属性给广播接收器设置了优先级。这个属性的范围在-1000到1000，数值越大，优先级越高。<br>接下来，如果想要拦截这个广播，防止让后面的广播接收器也接收到了这个广播。可以修改MyBroadcastReceiver中的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyBroadcastReceiver extends BroadcastReceiver &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        Toast.makeText(context, &quot;received in MyBroadcastReceiver&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        abortBroadcast();&#x2F;&#x2F;拦截广播，防止后面的接收到</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即添加第06行代码。如果在onReceive()方法中调用了abortBroadcast()方法，就表示是将这条广播拦截，后面的广播接收器将无法再接收到。<br>特别关注：<br>广播接收器的生命周期：关键在于BroadcastReceiver中的onReceive()方法，从onReceive()里的第一行代码开始，onReceive()里的最后一行代码结束。<br>一个广播到来的时候，用什么方式提醒用户是最友好的呢？第一种方式是吐司，第二种方式是通知。注：不要使用对话框，以免中断了用户正在进行的操作。</p></li></ol><h3 id="四-使用本地广播："><a href="#四-使用本地广播：" class="headerlink" title="四.使用本地广播："></a>四.使用本地广播：</h3><p>之前我们发送和接收的广播全部都是属于全局广播，即发出去的广播可以被其他任何应用程序接收到，并且我们也可以接收来自于其他任何应用程序的广播。这样一来，必然会造成安全问题。于是便有了本地广播：即只能在本应用程序中发送和接收广播。这就要使用到了LocalBroadcastManager这个类来对广播进行管理。<br>我们修改2.1中动态注册广播接收器的代码，即修改MainActivity.java中的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.example.broadcasttest;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.BroadcastReceiver;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.IntentFilter;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.support.v4.content.LocalBroadcastManager;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">    private IntentFilter intentFilter;</span><br><span class="line"></span><br><span class="line">    private LocalReceiver localReceiver;</span><br><span class="line"></span><br><span class="line">    private LocalBroadcastManager localBroadcastManager;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;通过LocalBroadcastManager的getInstance()方法得到它的一个实例</span><br><span class="line">        localBroadcastManager &#x3D; LocalBroadcastManager.getInstance(this);</span><br><span class="line">        Button button &#x3D; (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Intent intent &#x3D; new Intent(</span><br><span class="line">                        &quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;);</span><br><span class="line">                localBroadcastManager.sendBroadcast(intent);&#x2F;&#x2F;调用sendBroadcast()方法发送广播</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F;动态注册本地的广播接收器</span><br><span class="line">        intentFilter &#x3D; new IntentFilter();</span><br><span class="line">        intentFilter.addAction(&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;);</span><br><span class="line">        localReceiver &#x3D; new LocalReceiver();</span><br><span class="line">        localBroadcastManager.registerReceiver(localReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class LocalReceiver extends BroadcastReceiver &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            Toast.makeText(context, &quot;received local broadcast&quot;,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注：本地广播是无法通过静态注册的方式来接收的。其实也完全可以理解，因为静态注册主要就是为了让程序在未启动的情况下也能收到广播。而发送本地广播时，我们的程序肯定是已经启动了，没有必要使用到静态注册的功能。</p><h3 id="五-各种各样的广播："><a href="#五-各种各样的广播：" class="headerlink" title="五.各种各样的广播："></a>五.各种各样的广播：</h3><p>在android中有很多系统自带的intent.action，通过监听这些事件我们可以完成很多功能。</p><ol><li>开机：<br>String BOOT_COMPLETED_ACTION 广播：在系统启动后。这个动作被广播一次（只有一次）。监听： <code>android.intent.action.BOOT_COMPLETED</code></li><li>电话拨入：<br>String ANSWER_ACTION 动作：处理拨入的电话。监听： <code>android.intent.action.ANSWER</code></li><li>电量变化：<br>String BATTERY_CHANGED_ACTION 广播：充电状态，或者电池的电量发生变化。监听： <code>android.intent.action.BATTERY_CHANGED</code></li><li>日期改变：<br>String DATE_CHANGED_ACTION 广播：日期被改变。 监听：<code>android.intent.action.DATE_CHANGED</code></li><li>取消更新下载：<br>String FOTA_CANCEL_ACTION 广播：取消所有被挂起的 (pending) 更新下载。 监听：<code>android.server.checkin.FOTA_CANCEL</code></li><li>更新开始安装：<br>String FOTA_READY_ACTION 广播：更新已经被下载 可以开始安装。监听 <code>android.server.checkin.FOTA_READY</code></li><li>主屏幕：<br>String HOME_CATEGORY 类别：主屏幕 (activity)。设备启动后显示的第一个 activity。 监听：”android.intent.category.HOME`</li><li>新应用：<br>String PACKAGE_ADDED_ACTION 广播：设备上新安装了一个应用程序包。监听： <code>android.intent.action.PACKAGE_ADDED</code></li><li>删除应用：<br>String PACKAGE_REMOVED_ACTION 广播：设备上删除了一个应用程序包。监听： <code>android.intent.action.PACKAGE_REMOVED</code></li><li>屏幕关闭：<br>String SCREEN_OFF_ACTION 广播：屏幕被关闭。监听： <code>android.intent.action.SCREEN_OFF</code></li><li>屏幕开启：<br>String SCREEN_ON_ACTION 广播：屏幕已经被打开。 监听：<code>android.intent.action.SCREEN_ON</code></li><li>时区改变：<br>String TIMEZONE_CHANGED_ACTION 广播：时区已经改变。监听： <code>android.intent.action.TIMEZONE_CHANGED</code></li><li>时间改变：<br>String TIME_CHANGED_ACTION 广播：时间已经改变（重新设置）。 <code>android.intent.action.TIME_SET</code></li><li>时间流逝：<br>String TIME_TICK_ACTION 广播：当前时间已经变化（正常的时间流逝）。 <code>android.intent.action.TIME_TICK</code></li><li>进入大容量存储模式：<br>String UMS_CONNECTED_ACTION 广播：设备进入 USB 大容量存储模式。 <code>android.intent.action.UMS_CONNECTED</code></li><li>退出大容量存储模式：<br>String UMS_DISCONNECTED_ACTION 广播：设备从 USB 大容量存储模式退出。 <code>android.intent.action.UMS_DISCONNECTED</code></li><li>壁纸改变：<br>String WALLPAPER_CHANGED_ACTION 广播：系统的墙纸已经改变。 <code>android.intent.action.WALLPAPER_CHANGED</code></li><li>web搜索：<br>String WEB_SEARCH_ACTION 动作：执行 web 搜索。 <code>android.intent.action.WEB_SEARCH</code></li><li>网络变化：<br>String CONNECTIVITY_CHANGE_ACTION 动作：网络变化。<code>android.intent.action.CONNECTIVITY_CHANGE_ACTION</code></li></ol><h3 id="六-实例：使用动态注册，监听手机的电量变化。"><a href="#六-实例：使用动态注册，监听手机的电量变化。" class="headerlink" title="六.实例：使用动态注册，监听手机的电量变化。"></a>六.实例：使用动态注册，监听手机的电量变化。</h3><p>完整版代码如下：</p><ul><li><p>activity_main.xml代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:paddingBottom&#x3D;&quot;@dimen&#x2F;activity_vertical_margin&quot;</span><br><span class="line">    android:paddingLeft&#x3D;&quot;@dimen&#x2F;activity_horizontal_margin&quot;</span><br><span class="line">   android:paddingRight&#x3D;&quot;@dimen&#x2F;activity_horizontal_margin&quot;</span><br><span class="line">    android:paddingTop&#x3D;&quot;@dimen&#x2F;activity_vertical_margin&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;textView1&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m05_broadcastreceiver02;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.BroadcastReceiver;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.IntentFilter;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    private BatteryBroadcastReceiver batteryBroadcastReceiver;</span><br><span class="line">    private TextView textView;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView&#x3D;(TextView)findViewById(R.id.textView1);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;动态注册监听电量的广播接收器</span><br><span class="line">        IntentFilter intentFilter &#x3D; new IntentFilter();</span><br><span class="line">        intentFilter.addAction(&quot;android.intent.action.BATTERY_CHANGED&quot;);</span><br><span class="line">        batteryBroadcastReceiver &#x3D; new BatteryBroadcastReceiver();</span><br><span class="line">        registerReceiver(batteryBroadcastReceiver, intentFilter);       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;取消注册监听电量的广播接收器</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        unregisterReceiver(batteryBroadcastReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;新建一个广播接收器，监听电量的变化</span><br><span class="line">    public class BatteryBroadcastReceiver extends BroadcastReceiver &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            if(intent.getAction().equals(Intent.ACTION_BATTERY_CHANGED)) &#123;</span><br><span class="line">                &#x2F;&#x2F;获取当前电量</span><br><span class="line">                int level &#x3D; intent.getIntExtra(&quot;level&quot;, 0);</span><br><span class="line">                &#x2F;&#x2F;电量的总刻度</span><br><span class="line">                int scale &#x3D; intent.getIntExtra(&quot;scale&quot;, 100);</span><br><span class="line">                textView.setText(&quot;电池电量为&quot;+((level*100) &#x2F; scale)+&quot;%&quot;);</span><br><span class="line">                </span><br><span class="line">                &#x2F;&#x2F;当电量低时，可以进行一些操作，例如弹出通知等</span><br><span class="line">&#x2F;*                if(level&lt;15)&#123;</span><br><span class="line">                    do something</span><br><span class="line">                &#125;*&#x2F;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;         </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着，在清单文件中进行权限声明：<br><uses-permission android:name="android.permission.BATTERY_STATS"/><br>MainActivity.java的代码解释如下：<br>40至45行：固定代码，用于获取当前电量<br>48至50行：当电量低时，可以进行一些操作，例如弹出通知等</p></li><li><p>运行后，界面如下：<br><img src="img.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BroadcastReceiver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intent基础</title>
      <link href="2020/05/25/Intent%E5%9F%BA%E7%A1%80/"/>
      <url>2020/05/25/Intent%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是intent"><a href="#一-什么是intent" class="headerlink" title="一.什么是intent"></a>一.什么是intent</h3><ul><li>Android中提供了Intent机制来协助应用间的交互与通讯，或者采用更准确的说法是，Intent不仅可用于应用程序之间，也可用于应用程序内部的activity, service和broadcast receiver之间的交互。Intent这个英语单词的本意是“目的、意向、意图”。</li><li>Intent是一种运行时绑定（runtime binding)机制，它能在程序运行的过程中连接两个不同的组件。通过Intent，你的程序可以向Android表达某种请求或者意愿，Android会根据意愿的内容选择适当的组件来响应。</li></ul><p>activity、service和broadcast receiver之间是通过Intent进行通信的，而另外一个组件Content Provider本身就是一种通信机制，不需要通过Intent。我们来看下面这个图就知道了：<br><img src="img1.png" alt=""></p><p>如果Activity1需要和Activity2进行联系，二者不需要直接联系，而是通过Intent作为桥梁。通俗来讲，Intnet类似于中介、媒婆的角色。</p><ul><li>使用Context.startActivity() 或 Activity.startActivityForResult()，传入一个intent来启动一个activity。使用 Activity.setResult()，传入一个intent来从activity中返回结果。</li><li>将intent对象传给Context.startService()来启动一个service或者传消息给一个运行的service。将intent对象传给 Context.bindService()来绑定一个service。</li><li>将intent对象传给 Context.sendBroadcast()，Context.sendOrderedBroadcast()，或者Context.sendStickyBroadcast()等广播方法，则它们被传给 broadcast receiver。</li></ul><h3 id="二-intent相关属性"><a href="#二-intent相关属性" class="headerlink" title="二.intent相关属性"></a>二.intent相关属性</h3><p>Intent 作为一个负责组件间传递消息的信息对象，最重要的就是其包含的信息。实际上无论是显式还是隐式，Intent 发出的时候，系统对应的行为正是由 Intent 所包含信息的组合决定。一个 Intent 所包含的信息如下图：</p><p><img src="img2.png" alt=""></p><ul><li>component(组件)：目的组件</li><li>action（动作）：用来表现意图的行动</li><li>category（类别）：用来表现动作的类别</li><li>data（数据）：表示与动作要操纵的数据</li><li>type（数据类型）：对于data范例的描写</li><li>extras（扩展信息）：扩展信息</li><li>Flags（标志位）：期望这个意图的运行模式</li></ul><p>Intent类型分为显式Intent（直接类型）、隐式Intent（间接类型）。官方建议使用隐式Intent。上述属性中，component属性为直接类型，其他均为间接类型。</p><p>相比与显式Intent，隐式Intnet则含蓄了许多，它并不明确指出我们想要启动哪一个活动，而是指定一系列更为抽象的action和category等信息，然后交由系统去分析这个Intent，并帮我们找出合适的活动去启动。</p><p>Activity 中 Intent Filter 的匹配过程 ：</p><p><img src="img3.png" alt=""></p><h3 id="三-component-组件-：目的组件"><a href="#三-component-组件-：目的组件" class="headerlink" title="三.component(组件)：目的组件"></a>三.component(组件)：目的组件</h3><p>Component属性明确指定Intent的目标组件的类名称。（属于直接Intent）</p><p>如果 component这个属性有指定的话，将直接使用它指定的组件。指定了这个属性以后，Intent的其它所有属性都是可选的。</p><p>例如，启动第二个Activity时，我们可以这样来写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F;创建一个意图对象</span><br><span class="line">                Intent intent &#x3D; new Intent();</span><br><span class="line">                &#x2F;&#x2F;创建组件，通过组件来响应</span><br><span class="line">                ComponentName component &#x3D; new ComponentName(MainActivity.this, SecondActivity.class);</span><br><span class="line">                intent.setComponent(component);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>如果写的简单一点，监听事件onClick()方法里可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent();</span><br><span class="line">&#x2F;&#x2F;setClass函数的第一个参数是一个Context对象</span><br><span class="line">&#x2F;&#x2F;Context是一个类，Activity是Context类的子类，也就是说，所有的Activity对象，都可以向上转型为Context对象</span><br><span class="line">&#x2F;&#x2F;setClass函数的第二个参数是一个Class对象，在当前场景下，应该传入需要被启动的Activity类的class对象</span><br><span class="line">intent.setClass(MainActivity.this, SecondActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>再简单一点，可以这样写：（当然，也是最常见的写法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(MainActivity.this,SecondActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h3 id="四-Action（动作）：用来表现意图的行动"><a href="#四-Action（动作）：用来表现意图的行动" class="headerlink" title="四.Action（动作）：用来表现意图的行动"></a>四.Action（动作）：用来表现意图的行动</h3><p>当日常生活中，描述一个意愿或愿望的时候，总是有一个动词在其中。比如：我想“做”三个俯卧撑；我要“写” 一封情书，等等。在Intent中，Action就是描述做、写等动作的，当你指明了一个Action，执行者就会依照这个动作的指示，接受相关输入，表现对应行为，产生符合的输出。在Intent类中，定义了一批量的动作，比如ACTION_VIEW，ACTION_PICK等， 基本涵盖了常用动作。加的动作越多，越精确。</p><p>Action 是一个用户定义的字符串，用于描述一个 Android 应用程序组件，一个 Intent Filter 可以包含多个 Action。在 AndroidManifest.xml 的Activity 定义时，可以在其 <intent-filter >节点指定一个 Action列表用于标识 Activity 所能接受的“动作”。</p><h3 id="五-category（类别）：用来表现动作的类别"><a href="#五-category（类别）：用来表现动作的类别" class="headerlink" title="五.category（类别）：用来表现动作的类别"></a>五.category（类别）：用来表现动作的类别</h3><p>Category属性也是作为<intent-filter>子元素来声明的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;action android:name&#x3D;&quot;com.vince.intent.MY_ACTION&quot;&gt;&lt;&#x2F;action&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;category android:name&#x3D;&quot;com.vince.intent.MY_CATEGORY&quot;&gt;&lt;&#x2F;category&gt; </span><br><span class="line"></span><br><span class="line">　　&lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot;&gt;&lt;&#x2F;category&gt; </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;intent-filter&gt;</span><br></pre></td></tr></table></figure><br>Action 和category通常是放在一起用的，所以这里一起介绍一下。我们来先来举一个例子：</p><p>新建一个工程文件smyh006_Intent01，在默认文件的基础之上，新建文件SecondActicity.java和activity_second.xml。</p><p>紧接着，我们要到清单文件中进行注册，打开AndroidManifest.xml，添加SecondActivity的action和category的过滤器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name&#x3D;&quot;.SecondActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                 &lt;action android:name&#x3D;&quot;com.example.smyh006intent01.MY_ACTION&quot;&#x2F;&gt;</span><br><span class="line">                 &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><p>上方代码，表示SecondActicity可以匹配第4行的MY_ACTION这个动作，此时，如果在其他的Acticity通过这个action的条件来查找，那SecondActicity就具备了这个条件。类似于相亲时，我要求对方有哪些条件，然后对方这个SecondActicity恰巧满足了这个条件（够通俗了吧）。</p><p>注：如果没有指定的category，则必须使用默认的DEFAULT（即上方第5行代码）。</p><p>也就是说：只有<action>和<category>中的内容同时能够匹配上Intent中指定的action和category时，这个活动才能响应Intent。如果使用的是DEFAULT这种默认的category，在稍后调用startActivity()方法的时候会自动将这个category添加到Intent中。</p><p>现在来修改MainActivity.java中按钮的点击事件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F;启动另一个Activity，（通过action属性进行查找）</span><br><span class="line">                Intent intent &#x3D; new Intent();</span><br><span class="line">                &#x2F;&#x2F;设置动作（实际action属性就是一个字符串标记而已）</span><br><span class="line">                intent.setAction(&quot;com.example.smyh006intent01.MY_ACTION&quot;); &#x2F;&#x2F;方法：Intent android.content.Intent.setAction(String action)</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>上方代码中，也可以换成下面这种简洁的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F;启动另一个Activity，（通过action属性进行查找）</span><br><span class="line">                Intent intent &#x3D; new Intent(&quot;com.example.smyh006intent01.MY_ACTION&quot;);&#x2F;&#x2F;方法： android.content.Intent.Intent(String action)</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><br>上方第5行代码：在这个Intent中，我并没有指定具体哪一个Activity，我只是指定了一个action的常量。所以说，隐式Intent的作用就表现的淋漓尽致了。此时，点击MainActicity中的按钮，就会跳到SecondActicity中去。</p><p>上述情况只有SecondActicity匹配成功。如果有多个组件匹配成功，就会以对话框列表的方式让用户进行选择。我们来详细介绍一下：</p><p>我们新建文件ThirdActicity.java和activity_third.xml，然后在清单文件AndroidManifest.xml中添加ThirdActivity的action和category的过滤器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name&#x3D;&quot;.ThirdActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                 &lt;action android:name&#x3D;&quot;com.example.smyh006intent01.MY_ACTION&quot;&#x2F;&gt;</span><br><span class="line">                 &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><p>此时，运行程序，当点击MainActivity中的按钮时，弹出如下界面：</p><p><img src="img4.png" alt=""></p><p>相信大家看到了这个界面，应该就一目了然了。于是我们可以做出如下总结：</p><p>在自定义动作时，使用activity组件时，必须添加一个默认的类别</p><p>具体的实现为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line">               &lt;action android:name&#x3D;&quot;com.example.action.MY_ACTION&quot;&#x2F;&gt;</span><br><span class="line">               &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;intent-filter&gt;</span><br></pre></td></tr></table></figure><br>如果有多个组件被匹配成功，就会以对话框列表的方式让用户进行选择。</p><p>每个Intent中只能指定一个action，但却能指定多个category；类别越多，动作越具体，意图越明确（类似于相亲时，给对方提了很多要求）。</p><p>目前我们的Intent中只有一个默认的category，现在可以通过intent.addCategory()方法来实现。修改MainActivity中按钮的点击事件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                &#x2F;&#x2F;启动另一个Activity，（通过action属性进行查找）</span><br><span class="line">                Intent intent &#x3D; new Intent();</span><br><span class="line">                &#x2F;&#x2F;设置动作（实际action属性就是一个字符串标记而已）</span><br><span class="line">                intent.setAction(&quot;com.example.smyh006intent01.MY_ACTION&quot;); &#x2F;&#x2F;方法：Intent android.content.Intent.setAction(String action)</span><br><span class="line">                intent.addCategory(&quot;com.example.smyh006intent01.MY_CATEGORY&quot;);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>既然在Intent中增加了一个category，那么我们要在清单文件中去声明这个category，不然程序将无法运行。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android:name&#x3D;&quot;.SecondActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                 &lt;action android:name&#x3D;&quot;com.example.smyh006intent01.MY_ACTION&quot;&#x2F;&gt;</span><br><span class="line">                 &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">                 &lt;category android:name&#x3D;&quot;com.example.smyh006intent01.MY_CATEGORY&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><p>此时，点击MainActicity中的按钮，就会跳到SecondActicity中去。</p><p>总结如下：</p><p>自定义类别： 在Intent添加类别可以添加多个类别，那就要求被匹配的组件必须同时满足这多个类别，才能匹配成功。操作Activity的时候，如果没有类别，须加上默认类别</p><h3 id="六-data（数据）：表示与动作要操纵的数据"><a href="#六-data（数据）：表示与动作要操纵的数据" class="headerlink" title="六.data（数据）：表示与动作要操纵的数据"></a>六.data（数据）：表示与动作要操纵的数据</h3><ul><li>Data属性是Android要访问的数据，和action和Category声明方式相同，也是在<intent-filter>中。</li><li>多个组件匹配成功显示优先级高的； 相同显示列表。</li></ul><p>Data是用一个uri对象来表示的，uri代表数据的地址，属于一种标识符。通常情况下，我们使用action+data属性的组合来描述一个意图：做什么</p><p>使用隐式Intent，我们不仅可以启动自己程序内的活动，还可以启动其他程序的活动，这使得Android多个应用程序之间的功能共享成为了可能。比如应用程序中需要展示一个网页，没有必要自己去实现一个浏览器（事实上也不太可能），而是只需要条用系统的浏览器来打开这个网页就行了。</p><p>【实例】打开指定网页：<br>MainActivity.java中，监听器部分的核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Intent intent &#x3D; new Intent();</span><br><span class="line">                intent.setAction(Intent.ACTION_VIEW);</span><br><span class="line">                Uri data &#x3D; Uri.parse(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">                intent.setData(data);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><br>当然，上方代码也可以简写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">                intent.setData(Uri.parse(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;));</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><br>第4行代码：指定了Intent的action是 Intent.ACTION_VIEW，表示查看的意思，这是一个Android系统内置的动作；</p><p>第5行代码：通过Uri.parse()方法，将一个网址字符串解析成一个Uri对象，再调用intent的setData()方法将这个Uri对象传递进去。</p><p>当点击按钮时，将跳到如下界面：</p><p><img src="img5.png" alt=""></p><p>此时， 调用的是系统默认的浏览器，也就是说，只调用了这一个组件。现在如果有多个组件得到了匹配，应该是什么情况呢？</p><p>我们修改修改清单文件中对SecondAcivity的声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name&#x3D;&quot;.SecondActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                 &lt;action android:name&#x3D;&quot;android.intent.action.VIEW&quot; &#x2F;&gt;</span><br><span class="line">                 &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">                 &lt;data android:scheme&#x3D;&quot;http&quot; android:host&#x3D;&quot;www.baidu.com&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><br>现在，SecondActivity也匹配成功了，我们运行程序，点击MainActicity的按钮时，弹出如下界面供我们选择：</p><p><img src="img6.png" alt=""></p><p>我们可以总结如下：</p><ul><li>当Intent匹配成功的组件有多个时，显示优先级高的组件，如果优先级相同，显示列表让用户自己选择</li><li>优先级从-1000至1000，并且其中一个必须为负的才有效<br>注：系统默认的浏览器并没有做出优先级声明，其优先级默认为正数。</li></ul><p>优先级的配置如下：</p><p>在清单文件中修改对SecondAcivity的声明，即增加一行代码，通过来android:priority设置优先级，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name&#x3D;&quot;.SecondActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter android:priority&#x3D;&quot;-1&quot;&gt;</span><br><span class="line">                 &lt;action android:name&#x3D;&quot;android.intent.action.VIEW&quot; &#x2F;&gt;</span><br><span class="line">                 &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">                 &lt;data android:scheme&#x3D;&quot;http&quot; android:host&#x3D;&quot;www.baidu.com&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><br>注：</p><p>Data属性的声明中要指定访问数据的Uri和MIME类型。可以在<data>元素中通过一些属性来设置：</p><p>android:scheme、android:path、android:port、android:mimeType、android:host等，通过这些属性来对应一个典型的Uri格式scheme://host:port/path。例如：<a href="http://www.google.com。" target="_blank" rel="noopener">http://www.google.com。</a></p><h3 id="七-type（数据类型）：对于data范例的描写"><a href="#七-type（数据类型）：对于data范例的描写" class="headerlink" title="七.type（数据类型）：对于data范例的描写"></a>七.type（数据类型）：对于data范例的描写</h3><p>如果Intent对象中既包含Uri又包含Type，那么，在<intent-filter>中也必须二者都包含才能通过测试。</p><p>Type属性用于明确指定Data属性的数据类型或MIME类型，但是通常来说，当Intent不指定Data属性时，Type属性才会起作用，否则Android系统将会根据Data属性值来分析数据的类型，所以无需指定Type属性。</p><p>data和type属性一般只需要一个，通过setData方法会把type属性设置为null，相反设置setType方法会把data设置为null，如果想要两个属性同时设置，要使用Intent.setDataAndType()方法。</p><p>【任务】：data+type属性的使用<br>【实例】：播放指定路径的mp3文件。</p><p>具体如下：</p><p>新建工程文件smyh006_Intent02，MainActivity.java中按钮监听事件部分的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(new OnClickListener()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Intent intent &#x3D; new Intent();</span><br><span class="line">                intent.setAction(Intent.ACTION_VIEW);</span><br><span class="line">                Uri data &#x3D; Uri.parse(&quot;file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;平凡之路.mp3&quot;);</span><br><span class="line">                &#x2F;&#x2F;设置data+type属性</span><br><span class="line">                intent.setDataAndType(data, &quot;audio&#x2F;mp3&quot;); &#x2F;&#x2F;方法：Intent android.content.Intent.setDataAndType(Uri data, String type)</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>代码解释：</p><p>第6行：”file://“表示查找文件，后面再加上我的小米手机存储卡的路径：/storage/sdcard0，再加上具体歌曲的路径。</p><p>第8行：设置data+type属性　　</p><p>运行后，当点击按钮时，效果如下：</p><p><img src="img7.png" alt=""></p><h3 id="八-extras（扩展信息）：扩展信息"><a href="#八-extras（扩展信息）：扩展信息" class="headerlink" title="八.extras（扩展信息）：扩展信息"></a>八.extras（扩展信息）：扩展信息</h3><p>是其它所有附加信息的集合。使用extras可以为组件提供扩展信息，比如，如果要执行“发送电子邮件”这个</p><p>动作，可以将电子邮件的标题、正文等保存在extras里，传给电子邮件发送组件。</p><h3 id="九-Flags（标志位）：期望这个意图的运行模式"><a href="#九-Flags（标志位）：期望这个意图的运行模式" class="headerlink" title="九.Flags（标志位）：期望这个意图的运行模式"></a>九.Flags（标志位）：期望这个意图的运行模式</h3><p>一个程序启动后系统会为这个程序分配一个task供其使用，另外同一个task里面可以拥有不同应用程序的activity。那么，同一个程序能不能拥有多个task？这就涉及到加载activity的启动模式，这个需要单独讲一下。</p><p>注：android中一组逻辑上在一起的activity被叫做task，自己认为可以理解成一个activity堆栈。</p><h3 id="十-Activity的启动模式："><a href="#十-Activity的启动模式：" class="headerlink" title="十.Activity的启动模式："></a>十.Activity的启动模式：</h3><p><a href="https://freedomyouth.gitee.io/2021/03/08//Activity基础篇-启动模式详解/" target="_blank" rel="noopener">Activity基础篇-启动模式详解</a></p><p>其实我们不在清单文件中设置，只在代码中通过flag来设置也是可以的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(MainActivity.this,SecondActivity.class);</span><br><span class="line">&#x2F;&#x2F;相当于singleTask</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(MainActivity.this,SecondActivity.class);</span><br><span class="line">&#x2F;&#x2F;相当于singleTop</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h3 id="十一-Intent的常见应用："><a href="#十一-Intent的常见应用：" class="headerlink" title="十一.Intent的常见应用："></a>十一.Intent的常见应用：</h3><ol><li><p>打开指定网页：（直接复制的上面的代码）<br>MainActivity.java中，监听器部分的核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> button1.setOnClickListener(new OnClickListener() &#123;            </span><br><span class="line">     @Override</span><br><span class="line">     public void onClick(View v) &#123;</span><br><span class="line">         Intent intent &#x3D; new Intent();</span><br><span class="line">         intent.setAction(Intent.ACTION_VIEW);&#x2F;&#x2F;方法：android.content.Intent.Intent(String action)</span><br><span class="line">         Uri data &#x3D; Uri.parse(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">         intent.setData(data);                </span><br><span class="line">         startActivity(intent);        </span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，上方代码也可以简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;            </span><br><span class="line">          @Override</span><br><span class="line">          public void onClick(View v) &#123;</span><br><span class="line">              Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">              intent.setData(Uri.parse(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;));                </span><br><span class="line">              startActivity(intent);        </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>第4行代码：指定了Intent的action是 Intent.ACTION_VIEW，表示查看的意思，这是一个Android系统内置的动作；<br>第5行代码：通过Uri.parse()方法，将一个网址字符串解析成一个Uri对象，再调用intent的setData()方法将这个Uri对象传递进去。<br>或者可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new OnClickListener() &#123;            </span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Uri uri &#x3D; Uri.parse(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_VIEW,uri);&#x2F;&#x2F;方法： android.content.Intent.Intent(String action, Uri uri)        </span><br><span class="line">        startActivity(intent);        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>电话：</p><ul><li>【方式一】打开拨打电话的界面：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(Intent.ACTION_DIAL);</span><br><span class="line">intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>运行程序后，点击按钮，显示如下界面：<br><img src="img8.png" alt=""></li><li>【方式二】直接拨打电话：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(Intent.ACTION_CALL);</span><br><span class="line">intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>要使用这个功能必须在配置文件中加入权限：（加一行代码）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-sdk</span><br><span class="line">    android:minSdkVersion&#x3D;&quot;8&quot;</span><br><span class="line">    android:targetSdkVersion&#x3D;&quot;16&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.CALL_PHONE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>发送短信：<br>【方式一】打开发送短信的界面：action+type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">intent.setType(&quot;vnd.android-dir&#x2F;mms-sms&quot;);</span><br><span class="line">intent.putExtra(&quot;sms_body&quot;, &quot;具体短信内容&quot;); &#x2F;&#x2F;&quot;sms_body&quot;为固定内容</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>【方式二】打开发短信的界面(同时指定电话号码)：action+data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(Intent.ACTION_SENDTO);</span><br><span class="line">intent.setData(Uri.parse(&quot;smsto:18780260012&quot;));</span><br><span class="line">intent.putExtra(&quot;sms_body&quot;, &quot;具体短信内容&quot;); &#x2F;&#x2F;&quot;sms_body&quot;为固定内容        </span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li><li><p>播放指定路径音乐：action+data+type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line"> Uri uri &#x3D; Uri.parse(&quot;file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;平凡之路.mp3&quot;); &#x2F;&#x2F;&#x2F;&#x2F;路径也可以写成：&quot;&#x2F;storage&#x2F;sdcard0&#x2F;平凡之路.mp3&quot;</span><br><span class="line">intent.setDataAndType(uri, &quot;audio&#x2F;mp3&quot;); &#x2F;&#x2F;方法：Intent android.content.Intent.setDataAndType(Uri data, String type)</span><br><span class="line"> startActivity(intent);</span><br></pre></td></tr></table></figure></li><li><p>卸载程序：action+data（例如点击按钮，卸载某个应用程序，根据包名来识别）<br>注：无论是安装还是卸载，应用程序是根据包名package来识别的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(Intent.ACTION_DELETE);</span><br><span class="line">Uri data &#x3D; Uri.parse(&quot;package:com.example.smyh006intent01&quot;);</span><br><span class="line">intent.setData(data);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li><li><p>安装程序：action+data+type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">Uri data &#x3D; Uri.fromFile(new File(&quot;&#x2F;storage&#x2F;sdcard0&#x2F;AndroidTest&#x2F;smyh006_Intent01.apk&quot;));    &#x2F;&#x2F;路径不能写成：&quot;file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;···&quot;</span><br><span class="line">intent.setDataAndType(data, &quot;application&#x2F;vnd.android.package-archive&quot;);  &#x2F;&#x2F;Type的字符串为固定内容</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>注：第2行的路径不能写成：”file:///storage/sdcard0/···”，不然报错如下：<br><img src="img9.png" alt=""><br>疑问：通过下面的这种方式安装程序，运行时为什么会出错呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过指定的action来安装程序</span><br><span class="line">public void installClickTwo(View view)&#123;</span><br><span class="line">    Intent intent &#x3D; new Intent(Intent.ACTION_PACKAGE_ADDED);</span><br><span class="line">    Uri data &#x3D; Uri.fromFile(new File(&quot;&#x2F;storage&#x2F;sdcard0&#x2F;AndroidTest&#x2F;smyh006_Intent01.apk&quot;));    &#x2F;&#x2F;路径不能写成：&quot;file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;···&quot;</span><br><span class="line">    intent.setData(data);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/itemuse/XTester/tree/master/intent" target="_blank" rel="noopener">总结代码</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package com.example.m06intent01;</span><br><span class="line">import java.io.File;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.net.Uri;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.Menu;</span><br><span class="line">import android.view.View;</span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;打开指定网页</span><br><span class="line">    public void browsePageClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setData(Uri.parse(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;));</span><br><span class="line">        startActivity(intent);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;打开拨号面板</span><br><span class="line">    public void openDialPageClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_DIAL);</span><br><span class="line">        intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;直接拨打指定号码</span><br><span class="line">    public void dialPhoneClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_CALL);</span><br><span class="line">        intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;打开发短信的界面:action+type</span><br><span class="line">    public void openMsgPageClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setType(&quot;vnd.android-dir&#x2F;mms-sms&quot;);</span><br><span class="line">        intent.putExtra(&quot;sms_body&quot;, &quot;具体短信内容&quot;); &#x2F;&#x2F;&quot;sms_body&quot;为固定内容</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;打开发短信的界面(指定电话号码):action+data</span><br><span class="line">    public void sendMsgClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_SENDTO);</span><br><span class="line">        intent.setData(Uri.parse(&quot;smsto:18780260012&quot;));</span><br><span class="line">        intent.putExtra(&quot;sms_body&quot;, &quot;具体短信内容&quot;); &#x2F;&#x2F;&quot;sms_body&quot;为固定内容</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;播放指定路径音乐</span><br><span class="line">    public void playMusicClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">        Uri uri &#x3D; Uri.parse(&quot;file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;平凡之路.mp3&quot;);  &#x2F;&#x2F;路径也可以写成：&quot;&#x2F;storage&#x2F;sdcard0&#x2F;平凡之路.mp3&quot;</span><br><span class="line">        intent.setDataAndType(uri, &quot;audio&#x2F;mp3&quot;); &#x2F;&#x2F;方法：Intent android.content.Intent.setDataAndType(Uri data, String type)</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;卸载某个应用程序，根据包名来识别</span><br><span class="line">    public void uninstallClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_DELETE);</span><br><span class="line">        Uri data &#x3D; Uri.parse(&quot;package:com.example.smyh006intent01&quot;);</span><br><span class="line">        intent.setData(data);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;安装某个应用程序，根据apk的文件名来识别</span><br><span class="line">    public void installClick(View view)&#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_VIEW);</span><br><span class="line">        Uri data &#x3D; Uri.fromFile(new File(&quot;&#x2F;storage&#x2F;sdcard0&#x2F;AndroidTest&#x2F;smyh006_Intent01.apk&quot;));    &#x2F;&#x2F;路径不能写成：&quot;file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;···&quot;</span><br><span class="line">        intent.setDataAndType(data, &quot;application&#x2F;vnd.android.package-archive&quot;);  &#x2F;&#x2F;Type的字符串为固定内容</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">        &#x2F;&#x2F; Inflate the menu; this adds items to the action bar if it is present.</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="img10.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity基础篇-启动模式详解</title>
      <link href="2020/05/19/Activity%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/05/19/Activity%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一-启动模式"><a href="#一-启动模式" class="headerlink" title="一.启动模式"></a>一.启动模式</h3><p><img src="640.png" alt="image"></p><p>Activity 一共有四种 launchMode ：<strong>standard</strong> 、<strong>singleTop</strong> 、<strong>singleTask</strong> 、<strong>singleInstance</strong> 。</p><p><img src="641.png" alt="image"></p><p><strong>Standard 模式（默认模式）</strong></p><ol><li>说明：每次启动一个 Activity 都会又一次创建一个新的实例入栈，无论这个实例是否存在。</li><li>生命周期：每次被创建的实例 Activity 的生命周期符合典型情况，它的 onCreate 、onStart 、onResume 都会被调用。</li><li>举例：此时 Activity 栈中以此有 A 、B 、C 三个 Activity ，此时C处于栈顶，启动模式为 Standard 模式。若在 C Activity 中加入点击事件，须要跳转到还有一个同类型的 C Activity 。结果是还有一个 C Activity 进入栈中，成为栈顶。</li></ol><p><img src="642.png" alt="image"></p><p><strong>SingleTop 模式（栈顶复用模式）</strong></p><ol><li>说明：分两种处理情况：须要创建的 Activity 已经处于栈顶时，此时会直接复用栈顶的 Activity 。不会再创建新的 Activity ；若须要创建的 Activity 不处于栈顶，此时会又一次创建一个新的 Activity 入栈，同 Standard 模式一样。</li><li>生命周期：若情况一中栈顶的 Activity 被直接复用时，它的 onCreate 、onStart 不会被系统调用，由于它并没有发生改变。可是一个新的方法 onNewIntent 会被回调（ Activity 被正常创建时不会回调此方法）。</li><li>举例：此时 Activity 栈中以此有 A 、B 、C 三个 Activity ，此时 C 处于栈顶，启动模式为 SingleTop 模式。情况一：在 C Activity 中加入点击事件，须要跳转到还有一个同类型的 C Activity 。结果是直接复用栈顶的 C Activity。情况二：在 C Activity 中加入点击事件，须要跳转到还有一个 A Activity。结果是创建一个新的 Activity 入栈。成为栈顶。</li></ol><p><img src="643.png" alt="image"></p><p><strong>SingleTask 模式（栈内复用模式）</strong></p><ol><li>说明：若须要创建的 Activity 已经处于栈中时，此时不会创建新的 Activity ，而是将存在栈中的 Activity 上面的其他 Activity 所有销毁，使它成为栈顶。</li><li>如果是在别的应用程序中启动它，则会新建一个 task ，并在该task中启动这个 Activity ，singleTask 允许别的 Activity 与其在一个 task 中共存，也就是说，如果我在这个 singleTask 的实例中再打开新的 Activity ，这个新的 Activity 还是会在 singleTask 的实例的 task 中。</li><li>生命周期：同 SingleTop 模式中的情况一同样。仅仅会又一次回调 Activity 中的 onNewIntent 方法</li><li>举例：此时 Activity 栈中以此有 A 、B 、C 三个 Activity 。此时 C 处于栈顶，启动模式为 SingleTask 模式。情况一：在 C Activity 中加入点击事件，须要跳转到还有一个同类型的 C Activity 。结果是直接用栈顶的 C Activity 。情况二：在 C Activity 中加入点击事件，须要跳转到还有一个 A Activity 。结果是将 A Activity 上面的 B 、C 所有销毁，使 A Activity 成为栈顶。</li></ol><p><img src="644.png" alt="image"></p><p><strong>SingleInstance 模式（单实例模式）</strong></p><ol><li>说明：SingleInstance 比较特殊，是全局单例模式，是一种加强的 SingleTask 模式。它除了具有它所有特性外，还加强了一点：只有一个实例，并且这个实例独立运行在一个 task 中，这个 task 只有这个实例，不允许有别的 Activity 存在。</li><li>这个经常使用于系统中的应用，比如 Launch 、锁屏键的应用等等，整个系统中仅仅有一个！所以在我们的应用中一般不会用到。了解就可以。</li><li>举例：比方 A Activity 是该模式，启动 A 后。系统会为它创建一个单独的任务栈，由于栈内复用的特性。兴许的请求均不会创建新的 Activity ，除非这个独特的任务栈被系统销毁。</li></ol><h3 id="二-启动模式的使用方式"><a href="#二-启动模式的使用方式" class="headerlink" title="二.启动模式的使用方式"></a>二.启动模式的使用方式</h3><p><img src="645.png" alt="image"></p><p>在 Manifest.xml 中指定 Activity 启动模式</p><ol><li>一种静态的指定方法</li><li>在 Manifest.xml 文件里声明 Activity 的同一时候指定它的启动模式</li><li>这样在代码中跳转时会依照指定的模式来创建 Activity 。</li></ol><p>启动 Activity 时。在 Intent 中指定启动模式去创建 Activity</p><ol><li>一种动态的启动模式</li><li>在 new 一个 Intent 后</li><li>通过 Intent 的 addFlags 方法去动态指定一个启动模式。</li></ol><p>注意：以上两种方式都能够为 Activity 指定启动模式，可是二者还是有差别的。</p><ol><li>优先级：动态指定方式即另外一种比第一种优先级要高，若两者同一时候存在，以另外一种方式为准。</li><li>限定范围：第一种方式无法为 Activity 直接指定 FLAG_ACTIVITY_CLEAR_TOP 标识，另外一种方式无法为 Activity 指定 singleInstance 模式。</li></ol><h3 id="三-启动模式的实际应用场景"><a href="#三-启动模式的实际应用场景" class="headerlink" title="三.启动模式的实际应用场景"></a>三.启动模式的实际应用场景</h3><p>这四种模式中的 Standard 模式是最普通的一种，没有什么特别注意。而 SingleInstance 模式是整个系统的单例模式，在我们的应用中一般不会应用到。所以，这里就具体解说  SingleTop 和 SingleTask 模式的运用场景：</p><p><img src="646.png" alt="image"><br><strong>SingleTask 模式的运用场景</strong></p><ol><li>最常见的应用场景就是保持我们应用开启后仅仅有一个 Activity 的实例。</li><li>最典型的样例就是应用中展示的主页（ Home 页）。</li><li>假设用户在主页跳转到其他页面，运行多次操作后想返回到主页，假设不使用 SingleTask 模式，在点击返回的过程中会多次看到主页，这明显就是设计不合理了。</li></ol><p><strong>SingleTop 模式的运用场景</strong></p><ol><li>假设你在当前的 Activity 中又要启动同类型的 Activity</li><li>此时建议将此类型 Activity 的启动模式指定为 SingleTop ，能够降低Activity的创建，节省内存！</li></ol><p>注意：复用 Activity 时的生命周期回调</p><ol><li>这里还须要考虑一个 Activity 跳转时携带页面參数的问题。</li><li>由于当一个 Activity 设置了 SingleTop 或者 SingleTask 模式后，跳转此 Activity 出现复用原有 Activity 的情况时，此 Activity 的 onCreate 方法将不会再次运行。onCreate 方法仅仅会在第一次创建 Activity 时被运行。</li><li>而一般 onCreate 方法中会进行该页面的数据初始化、UI 初始化，假设页面的展示数据无关页面跳转传递的參数，则不必操心此问题</li><li>若页面展示的数据就是通过 getInten() 方法来获取，那么问题就会出现：getInten() 获取的一直都是老数据，根本无法接收跳转时传送的新数据！</li></ol><p>以下，通过一个样例来具体解释：</p><p><img src="647.png" alt="image"></p><p>以上代码中的 CourseDetailActivity 在配置文件里设置了启动模式是 SingleTop 模式，依据上面启动模式的介绍可得知，当 CourseDetailActivity 处于栈顶时。</p><p>再次跳转页面到 CourseDetailActivity 时会直接复用原有的 Activity ，并且此页面须要展示的数据是从 getIntent() 方法得来，可是 initData() 方法不会再次被调用，此时页面就无法显示新的数据。</p><p>当然这样的情况系统早就为我们想过了，这时我们须要另外一个回调 onNewIntent（Intent intent）方法。此方法会传入最新的 intent ，这样我们就能够解决上述问题。这里建议的方法是又一次去 setIntent 。然后又一次去初始化数据和 UI 。</p><p>代码例如以下所看到的：</p><p><img src="648.png" alt="image"></p><p>这样，在一个页面中能够反复跳转并显示不同的内容。</p><h3 id="四-快速启动一个-Activity"><a href="#四-快速启动一个-Activity" class="headerlink" title="四.快速启动一个 Activity"></a>四.快速启动一个 Activity</h3><p><img src="649.png" alt="image"></p><p>这个问题其实也是比较简单的，就是不要在 Activity 的 onCreate 方法中执行过多繁重的操作，并且在 onPasue 方法中同样不能做过多的耗时操作。</p><h3 id="五-Activity-的-Flags"><a href="#五-Activity-的-Flags" class="headerlink" title="五.Activity 的 Flags"></a>五.Activity 的 Flags</h3><p><img src="650.png" alt="image"></p><ul><li>标记位既能够设定Activity的启动模式，如同上面介绍的，在动态指定启动模式，比方 <strong>FLAG_ACTIVITY_NEW_TASK</strong> 和 <strong>FLAG_ACTIVITY_SINGLE_TOP</strong> 等。它还能够影响 Activity 的运行状态 ，比方 <strong>FLAG_ACTIVITY_CLEAN_TOP</strong> 和 <strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong> 等。</li><li>以下介绍几个基本的标记位，切勿死记，理解几个就可以，须要时再查官方文档。</li></ul><p><img src="651.png" alt="image"></p><p><strong>FLAG_ACTIVITY_NEW_TASK</strong></p><p>作用是为 Activity 指定 “SingleTask” 启动模式。跟在 AndroidMainfest.xml 指定效果同样</p><p><strong>FLAG_ACTIVITY_SINGLE_TOP</strong></p><p>作用是为 Activity 指定 “SingleTop” 启动模式，跟在 AndroidMainfest.xml 指定效果同样。</p><p><strong>FLAG_ACTIVITY_CLEAN_TOP</strong></p><ol><li>具有此标记位的 Activity ，启动时会将与该 Activity 在同一任务栈的其他 Activity 出栈。</li><li>一般与 SingleTask 启动模式一起出现。</li><li>它会完毕 SingleTask 的作用。</li><li>但事实上 SingleTask 启动模式默认具有此标记位的作用</li></ol><p><strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong></p><ol><li>具有此标记位的 Activity 不会出如今历史 Activity 的列表中</li><li>使用场景：当某些情况下我们不希望用户通过历史列表回到 Activity 时，此标记位便体现了它的效果。</li><li>它等同于在 xml 中指定 Activity 的属性.</li></ol><h3 id="六-onNewInstent-方法什么时候执行"><a href="#六-onNewInstent-方法什么时候执行" class="headerlink" title="六.onNewInstent()方法什么时候执行"></a>六.onNewInstent()方法什么时候执行</h3><p><img src="652.png" alt="image"></p><p>这个是启动模式中的了，当此 Activity 的实例已经存在，并且此时的启动模式为 SingleTask 和 SingleInstance ，另外当这个实例位于栈顶且启动模式为 SingleTop 时也会触发 onNewInstent()。</p><h3 id="七-启动流程"><a href="#七-启动流程" class="headerlink" title="七.启动流程"></a>七.启动流程</h3><ul><li>注意！这里并不是要回答 Activity 的生命周期！</li><li><a href="https://juejin.im/entry/58f5b68e61ff4b005807ab47" target="_blank" rel="noopener">3 分钟看懂 Activity 启动流程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity基础篇</title>
      <link href="2020/05/18/Activity%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>2020/05/18/Activity%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是Activity"><a href="#一-什么是Activity" class="headerlink" title="一.什么是Activity"></a>一.什么是Activity</h3><p>Activity是Android应用程序核心组件中最基本的一个，是用户和程序交互的窗口，一个activity通常对应一个单独的视图，一个APP由一个或者多个activity构成，activity用于显示信息给用户，并且之间可以相互进行跳转，activity之间的跳转有返回值。</p><p>每一个activity都被定义为一个独立的类，他继承了Android中的android.app.Activity，在Activity类中将使用setContentView方法来显示由视图控件组成的用户界面，并对用户通过这些视图控件所出发的时间做出响应。</p><h3 id="二-activity的四种状态"><a href="#二-activity的四种状态" class="headerlink" title="二.activity的四种状态"></a>二.activity的四种状态</h3><ol><li><p>激活状态，此时activity运行在屏幕前台</p></li><li><p>暂停状态，此时activity失去焦点，但是用户仍然可以看到（例如这个activity上遮盖了一个透明的或者非全屏的activity）</p></li><li><p>停止状态，此时activity被其他activity完全覆盖</p></li><li><p>销毁状态，此时activity将会被系统清理出内存</p></li></ol><h3 id="三-activity的回调函数"><a href="#三-activity的回调函数" class="headerlink" title="三.activity的回调函数"></a>三.activity的回调函数</h3><p>android系统根据生命周期的不同阶段唤起对应的回调函数来执行代码，从启动到销毁一个activity有着一套有序的回调函数。</p><ul><li><p>onCreate()<br>创建，activity初次创建时被调用，该方法中一般进行一些静态设置。</p></li><li><p>onStart()<br>运行，activity对用户即将可见的时候调用</p></li><li><p>onResume()<br>获取焦点，当activity将要与用户进行交互时候调用</p></li><li><p>onPause()<br>失去焦点，当系统要启动一个其他的activity时调用（在其他activity显示之前调用）</p></li><li><p>onStop()<br>暂停，当另外一个activity恢复并遮盖当前activity，导致其对用户不可见时调用。</p></li><li><p>onDestroy()<br>销毁，在activity被销毁前所调用的最后一个方法</p></li><li><p>onRestart()<br>重新启动</p></li></ul><p>这七个方法贯穿整个activity的生命周期。<br>一张图来表示</p><p><img src="img1.jpg" alt=""></p><h3 id="四-activity的启动与销毁"><a href="#四-activity的启动与销毁" class="headerlink" title="四.activity的启动与销毁"></a>四.activity的启动与销毁</h3><p>大多数的APP都包含多个activity，不论这些activity是主activity还是为了响应用户行为而新建的，系统都会调用新的activity实例中的onCreate()方法，通常情况下我们会在onCreate()方法内声明一些UI元素或者定义一些成员变量等基本操作，但onCreate()方法中尽量少做事情，以免程序启动太久都看不到界面。</p><p>一旦onCreate()操作结束，系统会立即执行这个activity的onStart()方法和onResume()方法，最终使得activity停留在Resumed状态，直到一些因素发生变化才会改变这个状态，例如切换到另外一个activity或者退出程序。</p><p>一旦我们退出软件，系统会执行activity的onDestroy()方法，将activity从系统中完全移除，我们通常是在执行了 onPause() and onStop() 之后再调用onDestroy() 。</p><h3 id="五-activity的暂停与恢复"><a href="#五-activity的暂停与恢复" class="headerlink" title="五.activity的暂停与恢复"></a>五.activity的暂停与恢复</h3><p>在使用app的过程中，运行的activity经常会被其他组件挡住，例如提示电量不足的提示框等， activity可见但不可操作，这个时候activity就会调用onPause()方法进去Pause状态，这个方法会停止当前activity进行的操作，并保存那些有可能需要长期保存的信息，如果用户从暂停状态返回到activity，系统会恢复那些数据并执行onResume()方法。</p><h3 id="六-activity的停止与重启"><a href="#六-activity的停止与重启" class="headerlink" title="六.activity的停止与重启"></a>六.activity的停止与重启</h3><p>当我们从APP-A切换到APP-B之后，APP-A会调用onStop()方法，在onStop()方法中我们一般释放一些不再需要的资源</p><p>当我们从stop状态回到前台时候，会调用onRestart()方法，系统再调用onStart()方法，</p><h3 id="七-activity的生命周期"><a href="#七-activity的生命周期" class="headerlink" title="七.activity的生命周期"></a>七.activity的生命周期</h3><p>activity的生命周期可以根据不同的标准分为完整生命周期、可见生命周期和前台生命周期。</p><p>从activity最初调用onCreate()方法到最终调用onDestroy()方法的整个过程称之为完整生命周期，在onCreate()方法中设置全局状态，在onDestroy()方法中释放所有资源。</p><p>从activity调用onStart()方法到调用对应的onStop()方法的过程称之为可见生命周期，在这个过程中，activity都是对用户可见的（但不一定可以操作）</p><p>从activity调用onResume()开始到调用onPause()的整个过程称之为前台生命周期，这段时间内这个activity处于其他所有activity的前面，用户可以与之进行交互。</p><h3 id="八-演示"><a href="#八-演示" class="headerlink" title="八.演示"></a>八.演示</h3><p>我们创建一个android工程，然后重写那些方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.Menu;</span><br><span class="line">import android.view.MenuItem;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        System.out.println(&quot;执行onCreate...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onStart();</span><br><span class="line">        System.out.println(&quot;执行onStart...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onResume();</span><br><span class="line">        System.out.println(&quot;执行onResume...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onPause();</span><br><span class="line">        System.out.println(&quot;执行onPause...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onStop() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onStop();</span><br><span class="line">        System.out.println(&quot;执行onStop...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        System.out.println(&quot;执行onDestroy...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onRestart() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onRestart();</span><br><span class="line">        System.out.println(&quot;执行onRestart...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在模拟器中运行，查看日志</p><p><img src="img2.jpg" alt=""></p><p>然后我们按home返回到桌面</p><p><img src="img3.jpg" alt=""></p><p>按菜单键，选择回到刚才的界面</p><p><img src="img4.jpg" alt=""></p><p>按返回键退出activity</p><p><img src="img5.jpg" alt=""></p><h3 id="九-如何创建一个activity"><a href="#九-如何创建一个activity" class="headerlink" title="九.如何创建一个activity"></a>九.如何创建一个activity</h3><p>新建一个activity步骤如下</p><ol><li>在src中新建一个类继承activity，并重写其onCreate()方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyActivity.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line"></span><br><span class="line">public class MyActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.my_activity_layout);&#x2F;&#x2F; 使用setContentView方法显示一个布局文件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在res—-layout中创建一个布局文件，用以显示界面内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">my_activity_layout.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;这是一个TextView&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li>在AndroidManiFest.xml中注册这个activity<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">AndroidManiFest.xml</span><br><span class="line"></span><br><span class="line">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    package&#x3D;&quot;com.example.activitytest&quot;</span><br><span class="line">    android:versionCode&#x3D;&quot;1&quot;</span><br><span class="line">    android:versionName&#x3D;&quot;1.0&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;uses-sdk</span><br><span class="line">        android:minSdkVersion&#x3D;&quot;19&quot;</span><br><span class="line">        android:targetSdkVersion&#x3D;&quot;19&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@drawable&#x2F;ic_launcher&quot;</span><br><span class="line">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot; &gt;</span><br><span class="line">        &lt;!-- 注册一个activity --&gt;</span><br><span class="line">        &lt;activity android:name&#x3D;&quot;com.example.activitytest.MyActivity&quot; &gt;</span><br><span class="line">   &lt;!-- 如果是主activity，需要添加如下过滤器来告诉系统这是入口 --&gt;</span><br><span class="line">   &lt;intent-filter&gt;</span><br><span class="line">       &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">       &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;intent-filter&gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br><span class="line">    &lt;&#x2F;application&gt;</span><br><span class="line">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure></li></ol><p>　　这样，一个activity就创建成功了。</p><h3 id="十-如何关闭一个activity"><a href="#十-如何关闭一个activity" class="headerlink" title="十.如何关闭一个activity"></a>十.如何关闭一个activity</h3><p>只要按下返回键就可以销毁当前activity，但是假如我们希望通过代码方式来销毁activity，可以使用activity类提供的finish()方法来实现。</p><p>修改一下上面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MyActivity.java</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">public class MyActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.my_activity_layout);&#x2F;&#x2F; 使用setContentView方法显示一个布局文件</span><br><span class="line"></span><br><span class="line">        Button button &#x3D; (Button) findViewById(R.id.finishActivity); &#x2F;&#x2F; 找到这个按钮</span><br><span class="line">        button.setOnClickListener(new OnClickListener() &#123; &#x2F;&#x2F; 给这个按钮添加一个点击事件</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onClick(View v) &#123;</span><br><span class="line">       finish(); &#x2F;&#x2F; 当点击按钮时，销毁这个activity</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        System.out.println(&quot;onDestroy方法被调用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;这是一个TextView&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;finishActivity&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;关闭这个activity&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>这时候运行该程序，点击按钮，这个activity就会被关闭。</p><h3 id="十一-finish-和onDestroy-有什么区别"><a href="#十一-finish-和onDestroy-有什么区别" class="headerlink" title="十一.finish()和onDestroy()有什么区别"></a>十一.finish()和onDestroy()有什么区别</h3><p>从上面的代码运行结果来看，控制台上输出了“onDestroy方法被调用”，由此可见，在执行finish()时执行了onDestroy()方法。</p><p>实际上他们的区别在于 onDestroy()是生命周期方法，是你的Activity结束的时候由Android系统调用的，你不能直接调用onDestroy()来结束你的Activity,一般做法是调用finish()。</p><h3 id="十二-四种LaunchMode"><a href="#十二-四种LaunchMode" class="headerlink" title="十二.四种LaunchMode"></a>十二.四种LaunchMode</h3><p>清单配置文件中,可使用android:launchMode=”standard|singleInstance|single Task|singleTop”四种模式来控制Acivity任务栈。<br>单独整理一篇<a href="https://freedomyouth.gitee.io/2021/03/08//Activity基础篇-启动模式详解/" target="_blank" rel="noopener">Activity基础篇-启动模式详解</a><br>史上最详细扔物线讲解<a href="https://www.bilibili.com/video/BV1CA41177Se" target="_blank" rel="noopener">Android 面试黑洞——当我按下 Home 键再切回来，会发生什么？</a>  </p><h3 id="十三-保存数据"><a href="#十三-保存数据" class="headerlink" title="十三.保存数据"></a>十三.保存数据</h3><p>单独整理一篇<a href="https://freedomyouth.gitee.io/2017/12/21/Activity基础篇-保存数据/" target="_blank" rel="noopener">Activity基础篇-保存数据</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读闹钟代码</title>
      <link href="2018/07/21/%E8%A7%A3%E8%AF%BB%E9%97%B9%E9%92%9F%E4%BB%A3%E7%A0%81/"/>
      <url>2018/07/21/%E8%A7%A3%E8%AF%BB%E9%97%B9%E9%92%9F%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码位置"><a href="#一-代码位置" class="headerlink" title="一.代码位置"></a>一.代码位置</h3><ul><li><a href="https://github.com/itemuse/AlarmManagerClock" target="_blank" rel="noopener">AlarmManagerClock</a><br>此文是在此基础上做的讲解,用于加深印象</li></ul><h3 id="二-界面截图"><a href="#二-界面截图" class="headerlink" title="二.界面截图"></a>二.界面截图</h3><p><img src="ui.png" alt="界面"></p><h3 id="三-类"><a href="#三-类" class="headerlink" title="三.类"></a>三.类</h3><ul><li><p><strong>AlarmActivity.java</strong><br>是处理弹出提示窗口的一个Activity；</p></li><li><p><strong>AlarmAlertActivity.java</strong><br>Main类，设置时间周期等操作</p></li><li><strong>AlarmOpreation.java</strong><br>核心逻辑处理类，负责计算周期时间，然后将时间通过AlarmManager发送定时广播；</li><li><strong>AlarmReceiver.java</strong><br>广播类，负责处理3发送的广播类型，弹出1；</li><li><strong>AlarmsSetting.java</strong><br>设置的时间信息的存取类；</li><li><strong>SharedPreferenceUtil.java</strong><br>配合5的一个存储类；</li><li><strong>TimePickerFragment.java</strong><br>设置时间的工具类；</li><li><strong>WeekGridAdpter.java</strong><br>设置星期的工具类；</li></ul><h3 id="四-顺着去看"><a href="#四-顺着去看" class="headerlink" title="四.顺着去看"></a>四.顺着去看</h3><p><strong>核心api：Android原生定时器AlarmManager</strong></p><ul><li>从<strong>AlarmActivity</strong>点击时间开始</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onClick(View v) &#123;</span><br><span class="line">switch (v.getId()) &#123;</span><br><span class="line">case R.id.switch_in: &#x2F;&#x2F;上班打卡开关</span><br><span class="line">if (v.isSelected()) &#123;</span><br><span class="line">alarmsSetting.setInEnble(false);</span><br><span class="line">v.setSelected(false);</span><br><span class="line">AlarmOpreation.cancelAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_IN);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">alarmsSetting.setInEnble(true);</span><br><span class="line">v.setSelected(true);</span><br><span class="line">AlarmOpreation.enableAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_IN, alarmsSetting);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case R.id.switch_out:&#x2F;&#x2F;下班打卡开关</span><br><span class="line">if (v.isSelected()) &#123;</span><br><span class="line">alarmsSetting.setOutEnble(false);</span><br><span class="line">v.setSelected(false);</span><br><span class="line">AlarmOpreation.cancelAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_OUT);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">alarmsSetting.setOutEnble(true);</span><br><span class="line">v.setSelected(true);</span><br><span class="line">AlarmOpreation.enableAlert(AlarmActivity.this, AlarmsSetting.ALARM_SETTING_TYPE_OUT, alarmsSetting);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case R.id.set_in_time: &#x2F;&#x2F;设置上班时间</span><br><span class="line">showTimePickerDialog(AlarmsSetting.ALARM_SETTING_TYPE_IN);</span><br><span class="line">break;</span><br><span class="line">case R.id.set_out_time:&#x2F;&#x2F;设置下班时间</span><br><span class="line">showTimePickerDialog(AlarmsSetting.ALARM_SETTING_TYPE_OUT);</span><br><span class="line">break;</span><br><span class="line">case R.id.btn_dynamic: &#x2F;&#x2F;灵活打卡</span><br><span class="line">showSingSelect();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中设置时间的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void showTimePickerDialog(final int type) &#123;</span><br><span class="line">TimePickerFragment timePicker &#x3D; new TimePickerFragment();</span><br><span class="line">if (type &#x3D;&#x3D; AlarmsSetting.ALARM_SETTING_TYPE_IN) &#123;</span><br><span class="line">timePicker.setTime(alarmsSetting.getInHour(), alarmsSetting.getInMinutes());</span><br><span class="line">&#125; else &#123;</span><br><span class="line">timePicker.setTime(alarmsSetting.getOutHour(), alarmsSetting.getOutMinutes());</span><br><span class="line">&#125;</span><br><span class="line">timePicker.show(getFragmentManager(), &quot;timePicker&quot;);</span><br><span class="line">timePicker.setOnSelectListener(new TimePickerFragment.OnSelectListener() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void getValue(int hourOfDay, int minute) &#123;</span><br><span class="line">setTime1(type,hourOfDay,minute);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TimePickerFragment窗口</strong><br>此类实质上就是继承至 <strong>DialogFragment</strong>调用 TimePickerDialog向外提供获取小时和分钟的接口！</li><li><strong>WeekGridAdpter.java</strong><br>而星期的周期复杂些，此行星期选项列表是一排 GridView,WeekGridAdpter就是它的 Adapter，在构造方法的 GetView中，可以看出，大神将周一至周日，组成一个二进制数据：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if(v.isSelected())&#123;</span><br><span class="line">    selected &#x3D; selected - (int)(1 &lt;&lt; position);</span><br><span class="line">    if(selected &lt;&#x3D; 0) &#123;&#x2F;&#x2F;至少选一个</span><br><span class="line">        selected &#x3D; selected + (int)(1 &lt;&lt; position);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    v.setSelected(false);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    selected &#x3D; selected + (int)(1 &lt;&lt; position);</span><br><span class="line">    v.setSelected(true);</span><br><span class="line">&#125;</span><br><span class="line">if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN)&#123;</span><br><span class="line">    alarmsSetting.setInDays(selected);</span><br><span class="line">&#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT)&#123;</span><br><span class="line">    alarmsSetting.setOutDays(selected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入对应参数到<strong>AlarmOpreation</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AlarmOpreation.cancelAlert(context,type);</span><br><span class="line">AlarmOpreation.enableAlert(context, type, alarmsSetting);</span><br></pre></td></tr></table></figure><ul><li><strong>AlarmOpreation.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">释放</span><br><span class="line">**&#x2F;</span><br><span class="line">public static void cancelAlert(Context context, int type) &#123;</span><br><span class="line">AlarmManager mAlarmManager &#x3D; (AlarmManager)</span><br><span class="line">context.getSystemService(Context.ALARM_SERVICE);</span><br><span class="line">Intent intent &#x3D; new Intent(AlarmsSetting.ALARM_ALERT_ACTION);</span><br><span class="line">intent.putExtra(&quot;type&quot;, type);</span><br><span class="line">intent.setClass(context, AlarmReceiver.class);</span><br><span class="line">PendingIntent pi &#x3D; PendingIntent.getBroadcast(context, type, intent,</span><br><span class="line">PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class="line">mAlarmManager.cancel(pi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置:主要是将存储好的时间设置信息（小时，分钟，星期），通过 cacluteNextAlarm方法设置成一个特殊的 Calendar值用于定时，然后将对应的 type和 Action组成一个通过广播 pi！通过 AlarmManager的 set方法定时， mAlarmManager.set(AlarmManager.RTC_WAKEUP,mCalendar.getTimeInMillis(),pi);，定时将 pi中的内容发送出去！<br>核心就是这样！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">设置</span><br><span class="line">**&#x2F;</span><br><span class="line">public static void enableAlert(Context context, int type, AlarmsSetting alarmsSetting) &#123;</span><br><span class="line">if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN &amp;&amp; !alarmsSetting.isInEnble())&#123;</span><br><span class="line">return ;</span><br><span class="line">&#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT &amp;&amp; !alarmsSetting.isOutEnble())&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int rantime &#x3D; alarmsSetting.getDynamic();</span><br><span class="line">AlarmManager mAlarmManager &#x3D; (AlarmManager)</span><br><span class="line">context.getSystemService(Context.ALARM_SERVICE);</span><br><span class="line">int hours &#x3D; 0,minute&#x3D;0,dayOfweek&#x3D;0;</span><br><span class="line">if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN)&#123;</span><br><span class="line">hours &#x3D; alarmsSetting.getInHour();</span><br><span class="line">minute&#x3D;alarmsSetting.getInMinutes();</span><br><span class="line">dayOfweek &#x3D; alarmsSetting.getInDays();</span><br><span class="line">&#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT)&#123;</span><br><span class="line">hours &#x3D; alarmsSetting.getOutHour();</span><br><span class="line">minute&#x3D;alarmsSetting.getOutMinutes();</span><br><span class="line">dayOfweek&#x3D;alarmsSetting.getOutDays();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理成循环周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public static Calendar cacluteNextAlarm(int hour, int minute, int dayOfweek)&#123;</span><br><span class="line">Calendar mCalendar &#x3D; Calendar.getInstance();</span><br><span class="line">mCalendar.setTimeInMillis(System.currentTimeMillis());</span><br><span class="line">mCalendar.set(Calendar.HOUR_OF_DAY,hour);</span><br><span class="line">mCalendar.set(Calendar.MINUTE, minute);</span><br><span class="line">int differDays &#x3D; getNextAlarmDifferDays(dayOfweek,mCalendar.get(Calendar.DAY_OF_WEEK), mCalendar.getTimeInMillis());</span><br><span class="line">int nextYear &#x3D; getNextAlarmYear(mCalendar.get(Calendar.YEAR), mCalendar.get(Calendar.DAY_OF_YEAR), mCalendar.getActualMaximum(Calendar.DAY_OF_YEAR), differDays);</span><br><span class="line">int nextMonth &#x3D; getNextAlarmMonth(mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH), mCalendar.getActualMaximum(Calendar.DATE), differDays);</span><br><span class="line">int nextDay &#x3D; getNextAlarmDay(mCalendar.get(Calendar.DAY_OF_MONTH), mCalendar.getActualMaximum(Calendar.DATE), differDays);</span><br><span class="line">mCalendar.set(Calendar.YEAR,nextYear);</span><br><span class="line">mCalendar.set(Calendar.MONTH, nextMonth % 12);&#x2F;&#x2F;月份从0开始</span><br><span class="line">mCalendar.set(Calendar.DAY_OF_MONTH, nextDay);</span><br><span class="line">mCalendar.set(Calendar.SECOND, 0);</span><br><span class="line">mCalendar.set(Calendar.MILLISECOND, 0);</span><br><span class="line">return mCalendar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#x2F;&#x2F;获取下次闹钟相差的天数</span><br><span class="line">private static int getNextAlarmDifferDays(int data, int currentDayOfWeek,long timeInMills)&#123;</span><br><span class="line">int nextDayOfWeek &#x3D;  getNextDayOfWeek(data, currentDayOfWeek,timeInMills);</span><br><span class="line">return currentDayOfWeek&lt;&#x3D;nextDayOfWeek?(nextDayOfWeek-currentDayOfWeek):(7 - currentDayOfWeek + nextDayOfWeek);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;考虑年进位的情况</span><br><span class="line">private static int getNextAlarmYear(int year,int dayOfYears, int actualMaximum, int differDays) &#123;</span><br><span class="line">int temp &#x3D; actualMaximum-dayOfYears-differDays;</span><br><span class="line">return temp &gt;&#x3D; 0?year:year+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;考虑月进位的情况</span><br><span class="line">private static int getNextAlarmMonth(int month,int dayOfMonth,int actualMaximum, int differDays) &#123;</span><br><span class="line">int temp &#x3D; actualMaximum-dayOfMonth-differDays;</span><br><span class="line">return temp &gt;&#x3D; 0?month:month+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取下次闹钟的day</span><br><span class="line">private static int getNextAlarmDay(int thisDayOfMonth, int actualMaximum, int differDays) &#123;</span><br><span class="line">int temp &#x3D; actualMaximum - thisDayOfMonth-differDays;</span><br><span class="line">if (temp&lt;0)&#123;</span><br><span class="line">return thisDayOfMonth + differDays - actualMaximum;</span><br><span class="line">&#125;</span><br><span class="line">return thisDayOfMonth + differDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取下次显示是星期几</span><br><span class="line">private static int getNextDayOfWeek(int data, int cWeek,long timeInMillis) &#123;</span><br><span class="line">int tempBack &#x3D; data &gt;&gt; cWeek - 1;</span><br><span class="line">int tempFront &#x3D; data ;</span><br><span class="line"></span><br><span class="line">if(tempBack%2&#x3D;&#x3D;1)&#123;</span><br><span class="line">if(System.currentTimeMillis()&lt;timeInMillis)  return cWeek;</span><br><span class="line">&#125;</span><br><span class="line">tempBack &#x3D; tempBack&gt;&gt;1;</span><br><span class="line">int m&#x3D;1,n&#x3D;0;</span><br><span class="line">while (tempBack !&#x3D; 0) &#123;</span><br><span class="line">if (tempBack % 2 &#x3D;&#x3D; 1 ) return cWeek + m;</span><br><span class="line">tempBack &#x3D; tempBack &#x2F; 2;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">while(n&lt;cWeek)&#123;</span><br><span class="line">if (tempFront % 2 &#x3D;&#x3D; 1)  return n+1;</span><br><span class="line">tempFront &#x3D;tempFront&#x2F;2;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过<strong>SharedPreferenceUtil</strong>将设置的值存储下来</p><p>当设置好定时器后，系统就会在指定的时间发送广播过来通知</p><ul><li><strong>AlarmReceiver.class</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        alarmsSetting &#x3D; new AlarmsSetting(context);</span><br><span class="line">        int type &#x3D; intent.getIntExtra(&quot;type&quot;,0);</span><br><span class="line">&#x2F;&#x2F;        Log.e(&quot;#######################&quot;, &quot;getRecevier_ACtion&quot; + intent.getAction());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果已经设置闹钟w不可用，先拦截</span><br><span class="line">        if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_IN &amp;&amp; !alarmsSetting.isInEnble())&#123;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;else if(type&#x3D;&#x3D;AlarmsSetting.ALARM_SETTING_TYPE_OUT &amp;&amp; !alarmsSetting.isOutEnble())&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(intent.getAction().equals(AlarmsSetting.ALARM_ALERT_ACTION) &amp;&amp; type !&#x3D;0) &#123;</span><br><span class="line">            SimpleDateFormat formatter &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日——HH时mm分ss秒SSS毫秒&quot;);</span><br><span class="line">            Log.e(&quot;###########此次闹钟#######&quot;, &quot;alarmsSetting.getNextAlarm()&quot; + formatter.format(new Date(alarmsSetting.getNextAlarm())));</span><br><span class="line">            Log.e(&quot;###########当前系统时间###&quot;, &quot;System.currentTimeMillis()&quot; + formatter.format(new Date(System.currentTimeMillis())));</span><br><span class="line">            if (alarmsSetting.getNextAlarm() + 1000 * 30 &lt; System.currentTimeMillis())&#123;&#x2F;&#x2F;解决闹钟广播比设置时间闹钟快的问题</span><br><span class="line">                Log.e(&quot;###########无效闹钟#######&quot;, &quot;不执行&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(&quot;###########准备弹出提示框###&quot;, &quot; &quot;);</span><br><span class="line">            intent.setClass(context, AlarmAlertActivity.class);</span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            context.startActivity(intent);</span><br><span class="line">            AlarmOpreation.cancelAlert(context, type);</span><br><span class="line">            AlarmOpreation.enableAlert(context, type, new AlarmsSetting(context));</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            AlarmOpreation.cancelAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_IN);</span><br><span class="line">            AlarmOpreation.enableAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_IN, new AlarmsSetting(context));</span><br><span class="line">            AlarmOpreation.cancelAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_OUT);</span><br><span class="line">            AlarmOpreation.enableAlert(context,  AlarmsSetting.ALARM_SETTING_TYPE_OUT, new AlarmsSetting(context));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlarmManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="2018/01/17/MarkDown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>2018/01/17/MarkDown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Markdown"><a href="#一-Markdown" class="headerlink" title="一.Markdown"></a>一.Markdown</h3><p>是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><h3 id="二-代码"><a href="#二-代码" class="headerlink" title="二.代码"></a>二.代码</h3><ol><li><p><strong>单行代码：</strong><br>代码之间分别用一个反引号包起来<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;create database hero;&#96;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><code>create database hero;</code></p></li><li><p><strong>代码块：</strong><br>代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-字体"><a href="#三-字体" class="headerlink" title="三.字体"></a>三.字体</h3><ol><li><p><strong>加粗</strong><br>要加粗的文字左右分别用两个*号包起来</p></li><li><p><strong>斜体</strong><br>要倾斜的文字左右分别用一个*号包起来</p></li><li><p><strong>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</p></li><li><p><strong>删除线</strong><br>要加删除线的文字左右分别用两个~~号包起来</p></li></ol><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><p>  <strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h3 id="四-引用"><a href="#四-引用" class="headerlink" title="四.引用"></a>四.引用</h3><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h3 id="五-分割线"><a href="#五-分割线" class="headerlink" title="五.分割线"></a>五.分割线</h3><p>三个 - 或者 * 都可以。</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure></p><p><strong>效果如下：</strong></p><hr><hr><p>可以看到，显示效果是一样的。</p><h3 id="六-图片"><a href="#六-图片" class="headerlink" title="六.图片"></a>六.图片</h3><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br></pre></td></tr></table></figure><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;</span><br><span class="line">u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong><br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p><h3 id="七-超链接"><a href="#七-超链接" class="headerlink" title="七.超链接"></a>七.超链接</h3><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure><br>title可加可不加<br><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="八-列表"><a href="#八-列表" class="headerlink" title="八.列表"></a>八.列表</h3><ol><li><p><strong>无序列表</strong><br><strong>语法：</strong><br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p><strong>效果如下：</strong></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul></li><li><p><strong>有序列表</strong><br><strong>语法：</strong><br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>注意：序号跟内容之间要有空格<br><strong>效果如下：</strong></p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol></li><li><p><strong>列表嵌套</strong><br>上一级和下一级之间敲三个空格即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 一级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 一级有序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">2. 一级有序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br></pre></td></tr></table></figure><p><strong>效果如下</strong></p><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ol></li></ol><h3 id="九-表格"><a href="#九-表格" class="headerlink" title="九.表格"></a>九.表格</h3><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure><br><strong>第二行分割表头和内容。</strong></p><ul><li>两边加：表示文字居中</li><li>右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</li></ul><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|最强技能|排位名次</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><div class="table-container"><table><thead><tr><th>姓名</th><th style="text-align:center">最强技能</th><th style="text-align:right">排位名次</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table></div><h3 id="十-标题"><a href="#十-标题" class="headerlink" title="十.标题"></a>十.标题</h3><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p><strong>注：</strong>标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><br><strong>效果如下：</strong></p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><p>整理自<a href="https://www.jianshu.com/p/191d1e21f7edhttps://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">简书</a></p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity基础篇-保存数据</title>
      <link href="2017/12/21/Activity%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
      <url>2017/12/21/Activity%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一-有哪些状态是需要保存的"><a href="#一-有哪些状态是需要保存的" class="headerlink" title="一.有哪些状态是需要保存的"></a>一.有哪些状态是需要保存的</h3><p>有哪些状态是需要保存的呢？最简单明了的就是对一些数据的保存，比如你正在操作一些数据，当面临突发情况，你的数据还没有操作完，这时候你就需要将数据进行保存，以便我们再次回到这个页面的时候不用重头再来。</p><h3 id="二-什么情况下需要Activity状态的保存与恢复"><a href="#二-什么情况下需要Activity状态的保存与恢复" class="headerlink" title="二.什么情况下需要Activity状态的保存与恢复"></a>二.什么情况下需要Activity状态的保存与恢复</h3><p>那么在什么情况下需要对Activity的状态进行保存与恢复呢？官方文档的说法是在处理运行时配置变更的时候，来看官方文档介绍的一段话<br>有些设备配置可能会在运行时发生变化（例如屏幕方向、键盘可用性及语言）。 发生这种变化时，Android 会重启正在运行的 Activity（先后调用 onDestroy() 和 onCreate()）。重启行为旨在通过利用与新设备配置匹配的备用资源自动重新加载您的应用，来帮助它适应新配置。<br>要妥善处理重启行为，Activity 必须通过常规的Activity 生命周期恢复其以前的状态，在 Activity 生命周期中，Android 会在销毁 Activity 之前调用 onSaveInstanceState()，以便您保存有关应用状态的数据。 然后，您可以在 onCreate() 或 onRestoreInstanceState() 期间恢复 Activity 状态。<br>这里面提到了各种回调方法，其中也有本文介绍的重点，不急，我们一步步来，首先我总结有如下几种情况是需要对数据进行保存的 </p><ul><li>点击了返回键 </li><li>锁屏 </li><li>点击home键 </li><li>有其他APP进入前台（比如接听电话） </li><li>启动了新的Activity </li><li>屏幕方向发生旋转 </li><li>APP被杀死</li></ul><h3 id="三-状态为什么会丢失"><a href="#三-状态为什么会丢失" class="headerlink" title="三.状态为什么会丢失"></a>三.状态为什么会丢失</h3><p>紧接着，我们来说一下为什么状态会丢失，这里面到底发什么了什么操作？这里我们用代码来演示一下，就是一个Activity，我们复写它的onCreat和onDestroy方法，分别打上log，然后启动再点击旋转屏幕（本文主要以屏幕旋转为例）看看这个过程方法是如何执行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11-25 12:51:27.419 4153-4153&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onCreate</span><br><span class="line">11-25 12:51:33.459 4153-4153&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onDestroy</span><br><span class="line">11-25 12:51:33.539 4153-4153&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onCreate</span><br></pre></td></tr></table></figure><p>我们从log中可知，当应用启动，首先运行onCreat方法，当我们点击旋转屏幕会发现当前的Activity被销毁了，然后又重新执行了onCreat方法，这是怎么回事，Activity发生了什么样的变化呢？我们在log中打印出当前Activity的hashcodekankan。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11-25 12:57:20.934 4439-4439&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onCreatecom.ithuangqing.activitysavedemo.MainActivity@4a79f318</span><br><span class="line">11-25 12:57:26.184 4439-4439&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onDestroycom.ithuangqing.activitysavedemo.MainActivity@4a79f318</span><br><span class="line">11-25 12:57:26.224 4439-4439&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onCreatecom.ithuangqing.activitysavedemo.MainActivity@4a7d4274</span><br></pre></td></tr></table></figure><p>原来当点击了屏幕旋转之后，当前Activity会被销毁，然后会重新创建一个新的Activity，如此一来我们在之前Activity的数据如果不保存的话就又可能丢失了。<br>好了，到了这一步你至少要明白这么一件事，就是当在第二部分中说的几种情况出现时比如屏幕发生旋转，当前的Activity会被销毁而且会重新创建一个全新的Activity。<br>下面我们举一个数据丢失的例子，让你看的更清楚。首先设置布局，布局很简单，一个文本框，一个按钮，给按钮设置一个点击事件，点击按钮让文本框中的数字从一递增。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    mMNumber &#x3D; findViewById(R.id.number);</span><br><span class="line">    mBtAdd &#x3D; findViewById(R.id.btAdd);</span><br><span class="line">    mBtAdd.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            a &#x3D; ++a;</span><br><span class="line">            mMNumber.setText(&quot;&quot;+a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Log.d(TAG, &quot;onCreate&quot;+this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后点击按钮，如图<br><img src="0.png" alt="IMAGE"></p><p>现在文本框中的数字是5，接下来我们点击屏幕旋转看看会发生什么，如图<br><img src="1.png" alt="IMAGE"></p><p>果不其然，数据丢失了。</p><h3 id="四-如何保存与恢复"><a href="#四-如何保存与恢复" class="headerlink" title="四.如何保存与恢复"></a>四.如何保存与恢复</h3><p>既然数据会丢失，那么我们该如何保存数据，或者如何解决这些问题呢？我们拿屏幕旋转这个变更来说，首先我们知道，如果屏幕发生旋转，当前Activity会被销毁，因此我们可以限定屏幕的方向，这样一来即使我们点击屏幕旋转，屏幕的方向是没有发什么变化的，所以Activity不会被销毁，数据自然不会丢失，另外一种方法就是我们可以自己处理变更，我们可以在当前的Activity的配置文件中添加这么一行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:configChanges&#x3D;&quot;orientation|screenSize|keyboard&quot;</span><br></pre></td></tr></table></figure><p>这句代码的意思就是告诉系统我们自己来处理变更，这两种方法不是今天的主菜，真正的主菜是onSaveInstanceState和onRestoreInstanceState，终于说到我们的重点了，我相信看完本文的介绍，大家会对这个东西有种终于认识的感觉，那就是每次创建Axtivity中自动创建的onCreat方法中的参数。首先我们在我们的Acticiry中复写 onSaveInstanceState 和 onRestoreInstanceState 同时打上log。看一下 输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">11-25 13:38:57.383 5242-5242&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onCreate</span><br><span class="line">11-25 13:39:13.133 5242-5242&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onSaveInstanceState</span><br><span class="line">11-25 13:39:13.133 5242-5242&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onDestroy</span><br><span class="line">11-25 13:39:13.163 5242-5242&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onCreate</span><br><span class="line">11-25 13:39:13.163 5242-5242&#x2F;com.ithuangqing.activitysavedemo D&#x2F;mainactivity--vv: onRestoreInstanceState</span><br></pre></td></tr></table></figure><p>从log中我们可以看到，当我们点击屏幕旋转之后，在当前Activity被销毁之前会调用onSaveInstanceState，然后销毁当前Activity，创建新的Activity之后会调用onCreat方法之后会紧接着调用onRestoreInstanceState，那么这两个方法有什么用呢？其实也可以猜到，onSaveInstanceState是用来保存我们当前activity中的数据的，而onRestoreInstanceState可以让我们获取之前保存的数据从而在新的activity中进行设置。<br>那数据以何种形式进行保存呢？我们来看下这两个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line"> public void onSaveInstanceState(Bundle outState) &#123;</span><br><span class="line">     super.onSaveInstanceState(outState);</span><br><span class="line">     &#x2F;&#x2F;保存销毁之前的数据</span><br><span class="line"></span><br><span class="line">     Log.d(TAG, &quot;onSaveInstanceState&quot;);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"> protected void onRestoreInstanceState(Bundle savedInstanceState) &#123;</span><br><span class="line">     super.onRestoreInstanceState(savedInstanceState);</span><br><span class="line">     Log.d(TAG, &quot;onRestoreInstanceState&quot;);   </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>我们发现他们的参数是Bundle，有印象了吧！我们就是通过Bundle来进行数据保存和读取的，大家都知道这是一种键值对的保存与读取方式。<br>接下来再看一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    mMNumber &#x3D; findViewById(R.id.number);</span><br><span class="line">    mBtAdd &#x3D; findViewById(R.id.btAdd);</span><br><span class="line">    mBtAdd.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            a &#x3D; ++a;</span><br><span class="line">            mMNumber.setText(&quot;&quot;+a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Log.d(TAG, &quot;onCreate&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看onCreat函数的参数，你发现了什么嘛？前面说过我们可以在onRestoreInstanceState中通过Bundle拿到我们之前保存的数据，其实在onCreat中也能达到相同的效果。<br>下面我们就具体代码演示一遍吧！<br>首先是在onSaveInstanceState中保存数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onSaveInstanceState(Bundle outState) &#123;</span><br><span class="line">      super.onSaveInstanceState(outState);</span><br><span class="line">      &#x2F;&#x2F;保存销毁之前的数据</span><br><span class="line">      outState.putString(&quot;number&quot;,mMNumber.getText().toString());</span><br><span class="line">      Log.d(TAG, &quot;onSaveInstanceState&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着在onRestoreInstanceState对数据进行恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> protected void onRestoreInstanceState(Bundle savedInstanceState) &#123;</span><br><span class="line">     super.onRestoreInstanceState(savedInstanceState);</span><br><span class="line">     Log.d(TAG, &quot;onRestoreInstanceState&quot;);</span><br><span class="line">     &#x2F;&#x2F;恢复数据</span><br><span class="line">    String s &#x3D; savedInstanceState.getString(&quot;number&quot;);</span><br><span class="line">    mMNumber.setText(s);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>接下来运行程序</p><p><img src="2.png" alt="IMAGE"><br>然后我们旋转屏幕<br><img src="3.png" alt="IMAGE"></p><p>发现数据被成功保留了下来，<br>到这里我们总结一下这个方法的调用过程，当运行时配置发生变更的时候，程序总的会销毁当前的Activity，然后重新创建一个新的Activity，在这个过程中，销毁当前Activity之前会先调用onSaveInstanceState让我们来保存数据，然后重建Activity在调用onCreat方发之后会调用onRestoreInstanceState让我们来对数据进行恢复，当然也可以在onCret中进行数据恢复，方法原理相同。</p><h3 id="五-这个知识点你需要注意的地方"><a href="#五-这个知识点你需要注意的地方" class="headerlink" title="五.这个知识点你需要注意的地方"></a>五.这个知识点你需要注意的地方</h3><p>通过以上的讲诉，相信你对Activity状态的保存与恢复已经掌握的差不多了，在这里我再补充几点<br><strong>关于onSaveInstanceState </strong></p><p>这个方法默认情况下会自动保存有关Activity的视图层次结构的状态信息，简单举个例子，我们以系统控件EditText来说，系统默认会保存有关这个控件的一个信息，也就是当你在这个控件中输入内容的时候，即使旋转屏幕内容也不会丢失，因为系统已经默认为其实现了我们说的那两个方法，但是有个前提，这个控件必须设置id，否则数据依旧会丢失，另外如果你重写了onRestoreInstanceState也要保证必须有这行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super.onRestoreInstanceState(savedInstanceState);</span><br></pre></td></tr></table></figure><p><strong>关于旋转屏幕无法调用onSaveInstanceState的问题。</strong></p><p>出现这种问题你复写的肯定以下方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void onSaveInstanceState (Bundle outState, PersistableBundle outPersistentState)；</span><br></pre></td></tr></table></figure><p>改成以下方法即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void onSaveInstanceState (Bundle outState)；</span><br></pre></td></tr></table></figure><hr><p>来自<a href="http://blog.csdn.net/sinat_33921105" target="_blank" rel="noopener">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite的介绍及使用</title>
      <link href="2017/11/08/SQLite%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>2017/11/08/SQLite%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h3><p>零零散散钻研了2天的SQLite的，终于有个基本的认识，说来没脸，正式工作20个月了，还真没用过的SQLite存储数据，因为我负责的公司项目都不需要联网，没有什么复杂的数据需存储，一般用SharedPreferences处理就行了！</p><h3 id="二-SQLite的介绍"><a href="#二-SQLite的介绍" class="headerlink" title="二.SQLite的介绍"></a>二.SQLite的介绍</h3><p>SQLite是一款轻型的数据库，它的设计目标是嵌入式的，占用资源非常低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持Windows / Linux / Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如Tcl，PHP，Java，C ++，.Net等，还有ODBC接口，同样比起Mysql，PostgreSQL这两款开源世界着名的数据库管理系统来讲，它的处理速度比他们都快。</p><p><strong>特点：</strong></p><ul><li>轻量级：它是进程内的数据库引擎，因此不存在数据库的客户端和服务器</li><li>单一文件：数据库中所有的信息（比如表，视图等）都包含在一个文件内这个文件可以自由复制到其它目录或其它机器上</li><li>不需要安装</li><li>跨平台/可移植</li><li>开源</li></ul><h3 id="三-SQLiteDatabase的介绍"><a href="#三-SQLiteDatabase的介绍" class="headerlink" title="三.SQLiteDatabase的介绍"></a>三.SQLiteDatabase的介绍</h3><p><strong>SQLite数据类型</strong></p><p>一般数据采用的固定的数据类型，而SQLite采用的是动态数据类型，会根据存入值自动判断。<br>SQLite具有以下五种常用的数据类型：</p><div class="table-container"><table><thead><tr><th>类型</th><th>释义</th></tr></thead><tbody><tr><td>NULL</td><td>这个值为空值</td></tr><tr><td>VARCHAR（n）</td><td>长度</td></tr><tr><td>CHAR（n）</td><td>长度固定为n的字串，n不能超过254.</td></tr><tr><td>INTEGER</td><td>值被标识为整数，依据值的大小可以依次被字段，n不能超过存储为1,2,3,4,5,6,7,8。</td></tr><tr><td>REAL</td><td>所有值都是浮动的数值，被存储为8字节的IEEE浮动标记序号。</td></tr><tr><td>TEXT</td><td>值为文本字符串，使用数据库编码存储（TUTF-8，UTF-16BE或UTF-16-LE）。</td></tr><tr><td>BLOB</td><td>值是BLOB数据块，以输入的数据格式进行存储。如何输入就如何存储，不改变格式。</td></tr><tr><td>DATA</td><td>包含了年份，月份，日期。</td></tr><tr><td>TIME</td><td>包含了小时，分钟，秒。</td></tr></tbody></table></div><p><strong>常用方法：</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>释义</th></tr></thead><tbody><tr><td>openOrCreateDatabase(String path,SQLiteDatabase.CursorFactory factory)</td><td>打开或创建数据库</td></tr><tr><td>insert(String table,String nullColumnHack,ContentValues values)</td><td>插入一条记录</td></tr><tr><td>delete(String table,String whereClause,String[] whereArgs)</td><td>删除一条记录</td></tr><tr><td>query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy)</td><td>查询一条记录</td></tr><tr><td>update(String table,ContentValues values,String whereClause,String[] whereArgs)</td><td>修改记录</td></tr><tr><td>execSQL(String sql)</td><td>执行一条SQL语句</td></tr><tr><td>close()</td><td>关闭数据库</td></tr></tbody></table></div><h3 id="四-一步一步实现"><a href="#四-一步一步实现" class="headerlink" title="四.一步一步实现"></a>四.一步一步实现</h3><p><img src="640.jpg" alt="image"></p><p><strong>创建一个继承在SQLiteOpenHelper的类</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String sql &#x3D; &quot;create table if not exists &quot; + TABLE_NAME + &quot; (Version integer , Id integer primary key, CustomName text, OrderPrice integer, Country text)&quot;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate(SQLiteDatabase sqLiteDatabase)&#123;</span><br><span class="line">    sqLiteDatabase.execSQL(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onUpgrade(SQLiteDatabase sqLiteDatabase,int oldVersion, int newVersion)&#123;        </span><br><span class="line">    String sql &#x3D; &quot;DROP TABLE IF EXISTS &quot; + TABLE_NAME;</span><br><span class="line">     sqLiteDatabase.execSQL(sql);</span><br><span class="line">     onCreate(sqLiteDatabase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>创建一个OrderDao用于处理所有的数据操作，在OrderDao中实例化OrderDBHelper</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class OrderDao&#123;</span><br><span class="line">  </span><br><span class="line">public OrderDao(Context context)&#123;</span><br><span class="line">    </span><br><span class="line">    this.context &#x3D; context;</span><br><span class="line">    ordersDBHelper &#x3D; new OrderDBHelper(context,null, null, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>增/删/改/查</strong><br>对于“增删改”这种对表内容变换的操作，我们需要先调用getWritableDatabase（），在执行的时候可以调用通用的execSQL（String sql）方法或对应的操作API：insert（），delete（），更新（）。</p><p>而对“查”，需要调用getReadableDatabase（），这时就不能使用execSQL方法了，得使用查询（）或rawQuery（）方法</p><p><strong>增</strong></p><ul><li><p>首先填充一些数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 初始化数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">        db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">        db.beginTransaction();</span><br><span class="line">        db.execSQL(&quot;insert into &quot; + OrderDBHelper.TABLE_NAME +&quot; ( Id, CustomName, OrderPrice, Country) values ( 1, &#39;Arc&#39;, 100, &#39;China&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot;+OrderDBHelper.TABLE_NAME +&quot; ( Id, CustomName, OrderPrice, Country) values ( 2, &#39;Bor&#39;, 200, &#39;USA&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot;+ OrderDBHelper.TABLE_NAME +&quot; ( Id, CustomName, OrderPrice, Country) values ( 3, &#39;Cut&#39;, 500, &#39;Japan&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot;+ OrderDBHelper.TABLE_NAME + &quot; ( Id, CustomName, OrderPrice, Country) values ( 4, &#39;Bor&#39;, 300, &#39;USA&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot; + OrderDBHelper.TABLE_NAME + &quot; ( Id, CustomName, OrderPrice, Country) values ( 5, &#39;Arc&#39;, 600, &#39;China&#39;)&quot;);</span><br><span class="line">        db.execSQL(&quot;insert into &quot; + OrderDBHelper.TABLE_NAME + &quot; ( Id, CustomName, OrderPrice, Country) values ( 6, &#39;Doom&#39;, 200, &#39;China&#39;)&quot;);</span><br><span class="line">        db.setTransactionSuccessful();</span><br></pre></td></tr></table></figure></li><li><p>增加一条数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 新增一条数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">        db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">        db.beginTransaction();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; insert into Orders(Id, CustomName, OrderPrice, Country) values (7, &quot;Jne&quot;, 700, &quot;China&quot;);    </span><br><span class="line">        ContentValues contentValues &#x3D; new ContentValues();</span><br><span class="line">        contentValues.put(&quot;Id&quot;, 7);</span><br><span class="line">        contentValues.put(&quot;CustomName&quot;, &quot;Jne&quot;);</span><br><span class="line">        contentValues.put(&quot;OrderPrice&quot;, 700);</span><br><span class="line">        contentValues.put(&quot;Country&quot;, &quot;China&quot;);</span><br><span class="line">        db.insertOrThrow(OrderDBHelper.TABLE_NAME, null, contentValues);</span><br><span class="line">        db.setTransactionSuccessful(); </span><br><span class="line">        return true;</span><br></pre></td></tr></table></figure><p><strong>删</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">    db.beginTransaction();</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F; delete from Orders where Id &#x3D; 7     </span><br><span class="line">   db.delete(OrderDBHelper.TABLE_NAME, &quot;Id &#x3D; ?&quot;, new String[]&#123;String.valueOf(7)&#125;);      </span><br><span class="line">     db.setTransactionSuccessful();</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    public int delete(String table, &#x2F;&#x2F;表名          </span><br><span class="line">    String whereClause,&#x2F;&#x2F;删除条目判断   </span><br><span class="line">    String[] whereArgs &#x2F;&#x2F;删除位置) &#123;</span><br><span class="line">        acquireReference();      </span><br><span class="line">        try&#123;            </span><br><span class="line">            SQLiteStatement statement &#x3D;  new SQLiteStatement(this, &quot;DELETE FROM &quot; + table +  (!TextUtils.isEmpty(whereClause) ? &quot; WHERE &quot; + whereClause : &quot;&quot;), whereArgs);</span><br><span class="line">            try&#123;</span><br><span class="line">                return statement.executeUpdateDelete(); </span><br><span class="line">            &#125;finally &#123;            </span><br><span class="line">                statement.close();       &#125;      </span><br><span class="line">            &#125;</span><br><span class="line">        finally&#123;</span><br><span class="line">            releaseReference(); </span><br><span class="line">             &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db &#x3D; ordersDBHelper.getWritableDatabase();</span><br><span class="line">db.beginTransaction();</span><br><span class="line">&#x2F;&#x2F; update Orders set OrderPrice &#x3D; 800 where Id &#x3D; 6</span><br><span class="line">ContentValues cv &#x3D; new ContentValues();</span><br><span class="line">cv.put(&quot;OrderPrice&quot;, 800); </span><br><span class="line">&#x2F;&#x2F;需要改的内容</span><br><span class="line">db.update(OrderDBHelper.TABLE_NAME,                </span><br><span class="line"> cv,&quot;Id &#x3D; ?&quot;,new String[]&#123;String.valueOf(6)&#125;);</span><br><span class="line">&#x2F;&#x2F;需要改的位置</span><br><span class="line">db.setTransactionSuccessful();</span><br></pre></td></tr></table></figure></li></ul><p><strong>查</strong></p><p><img src="641.png" alt="img"></p><ul><li><p>单数据查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        db &#x3D; ordersDBHelper.getReadableDatabase();</span><br><span class="line">        &#x2F;&#x2F; select * from Orders where CustomName &#x3D; &#39;Bor&#39;</span><br><span class="line">        cursor &#x3D; db.query(OrderDBHelper.TABLE_NAME,&#x2F;&#x2F;table:表名称</span><br><span class="line">                        ORDER_COLUMNS,        &#x2F;&#x2F;columns:列名称数组               </span><br><span class="line">                        &quot;CustomName &#x3D; ?&quot;, &#x2F;&#x2F;selection:条件字句，相当于where</span><br><span class="line">                        new String[] &#123;name&#125;, &#x2F;&#x2F;selectionArgs:条件字句，参数数组</span><br><span class="line">                        null, &#x2F;&#x2F;orderBy:排序列</span><br><span class="line">                        null, &#x2F;&#x2F;having:分组条件</span><br><span class="line">                        null);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;orderBy:排序列</span><br><span class="line">       if (cursor.getCount() &gt; 0) &#123; &#x2F;&#x2F;将cursor数据放到Order队列中</span><br><span class="line">        List&lt;Order&gt; orderList &#x3D; new ArrayList&lt;Order&gt;(cursor.getCount());        </span><br><span class="line">        while (cursor.moveToNext()) &#123;</span><br><span class="line">            Order order &#x3D; parseOrder(cursor);</span><br><span class="line">            orderList.add(order);            </span><br><span class="line">            &#125;</span><br><span class="line">        return orderList;         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总数查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db &#x3D; ordersDBHelper.getReadableDatabase();</span><br><span class="line">&#x2F;&#x2F; select count(Id) from Orders where Country &#x3D; &#39;China&#39;</span><br><span class="line">cursor &#x3D; db.query(OrderDBHelper.TABLE_NAME,new String[]&#123;</span><br><span class="line">    &quot;COUNT(Id)&quot;&#125;,                &quot;Country &#x3D; ?&quot;,             </span><br><span class="line">new String[] &#123;&quot;China&quot;&#125;,null, null, null);</span><br><span class="line"></span><br><span class="line">if (cursor.moveToFirst()) &#123;</span><br><span class="line">    count &#x3D; cursor.getInt(0);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>比较查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db &#x3D; ordersDBHelper.getReadableDatabase();</span><br><span class="line">&#x2F;&#x2F; select Id, CustomName, Max(OrderPrice) as OrderPrice, Country from Orders</span><br><span class="line">cursor &#x3D; db.query(OrderDBHelper.TABLE_NAME, new String[]&#123;</span><br><span class="line">    &quot;Version&quot;,&quot;Id&quot;,&quot;CustomName&quot;,</span><br><span class="line">    &quot;Max(OrderPrice) as OrderPrice&quot;,</span><br><span class="line">    &quot;Country&quot;&#125;,null, null, null, null, null);</span><br><span class="line">       </span><br><span class="line">if (cursor.getCount() &gt; 0)&#123;</span><br><span class="line">        if (cursor.moveToFirst()) &#123;                </span><br><span class="line">            return parseOrder(cursor);            </span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="2016/02/29/%E6%A0%87%E7%AD%BE/"/>
      <url>2016/02/29/%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="一-个人项目"><a href="#一-个人项目" class="headerlink" title="一.个人项目"></a>一.个人项目</h3><ul><li><p><a href="https://github.com/itemuse/XLib" target="_blank" rel="noopener">工具Jar</a></p><ul><li>版本<a href="https://jitpack.io/#itemuse/XLib" target="_blank" rel="noopener"><img src="https://jitpack.io/v/itemuse/XLib.svg" alt=""></a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/app/XApplication.java" target="_blank" rel="noopener">Application</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/array/XArray.java" target="_blank" rel="noopener">Array</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/navigationbar/XNavigationBar.java" target="_blank" rel="noopener">NavigationBar</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/bar/systemui/XSystemUI.java" target="_blank" rel="noopener">SystemUi</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFile.java" target="_blank" rel="noopener">File</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/file/XFileIO.java" target="_blank" rel="noopener">FileIO</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/fragment/XFragment.java" target="_blank" rel="noopener">Fragment</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/image/XImage.java" target="_blank" rel="noopener">Image</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/log/XLog.java" target="_blank" rel="noopener">Log</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/map/XMap.java" target="_blank" rel="noopener">Map</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/network/XNetwork.java" target="_blank" rel="noopener">Network</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/permissions/XPermission.java" target="_blank" rel="noopener">Permission</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/resource/XResource.java" target="_blank" rel="noopener">Resource</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/screen/XScreen.java" target="_blank" rel="noopener">Screen</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sdcard/XSDCard.java" target="_blank" rel="noopener">SDCard</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/service/XService.java" target="_blank" rel="noopener">Service</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/sharedpreferences/XSPUtils.java" target="_blank" rel="noopener">sharedpreferences</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/size/XSize.java" target="_blank" rel="noopener">Size</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/spannable/XSpanned.java" target="_blank" rel="noopener">Spanned</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/string/XString.java" target="_blank" rel="noopener">String</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/tab/XTab.java" target="_blank" rel="noopener">Tab</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/thread/XThread.java" target="_blank" rel="noopener">Thread</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/time/XTime.java" target="_blank" rel="noopener">Time</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/toast/XToast.java" target="_blank" rel="noopener">Toast</a></li><li><a href="https://github.com/itemuse/XLib/blob/master/library/src/main/java/cn/xy/library/util/zip/XZip.java" target="_blank" rel="noopener">Zip</a></li></ul></li><li><p>独立项目</p><ul><li><a href="https://github.com/itemuse/XMusic" target="_blank" rel="noopener">XMusic</a></li><li><a href="https://github.com/itemuse/XVideo" target="_blank" rel="noopener">XVideo</a></li><li><a href="https://github.com/itemuse/MVP" target="_blank" rel="noopener">MVP</a></li><li><a href="https://github.com/itemuse/Dialog" target="_blank" rel="noopener">Dialag</a></li><li><a href="https://github.com/itemuse/AlarmManagerClock" target="_blank" rel="noopener">AlarmManagerClock</a></li><li><a href="https://github.com/itemuse/XTester" target="_blank" rel="noopener">XTester</a></li></ul></li></ul><h3 id="二-官方"><a href="#二-官方" class="headerlink" title="二.官方"></a>二.官方</h3><ul><li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">谷歌官方api文档</a></li><li><a href="https://juejin.cn/android" target="_blank" rel="noopener">掘金Android</a></li></ul><h3 id="三-API收集"><a href="#三-API收集" class="headerlink" title="三.API收集"></a>三.API收集</h3><ul><li><a href="https://hndeveloper.github.io/2017/github-android-ui.html" target="_blank" rel="noopener">GitHub上受欢迎的Android UI Library</a></li><li><a href="https://microzz.com/2017/02/03/API/?tdsourcetag=s_pctim_aiomsg#%E9%9F%B3%E4%B9%90" target="_blank" rel="noopener">中国国内可用API合集</a></li><li><a href="https://qibilly.com/SmartSwipe-tutorial/" target="_blank" rel="noopener">测滑返回SwipeBackLayout</a></li><li><a href="https://github.com/gyf-dev/ImmersionBar" target="_blank" rel="noopener">沉浸式状态栏和导航栏ImmersionBar</a></li><li><a href="https://gitee.com/huanghaibin_dev/CalendarView" target="_blank" rel="noopener">日历CalendarView</a></li><li><a href="https://blog.csdn.net/huo108/article/details/82428129?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">内存泄漏工具LeakCanary使用详细教程</a></li><li><a href="https://github.com/barteksc/AndroidPdfViewer" target="_blank" rel="noopener">pdf解析显示</a></li><li>音乐视频<ul><li><a href="https://developer.android.google.cn/guide/topics/media/mediaplayer?hl=zh_cn" target="_blank" rel="noopener">MediaPlayer官方讲解</a></li><li><a href="https://blog.csdn.net/u014606081/article/details/79927057" target="_blank" rel="noopener">MediaPlayer详解和使用</a></li><li><a href="https://blog.csdn.net/u014606081/article/details/76181049" target="_blank" rel="noopener">ExoPlayer</a></li><li><a href="https://github.com/CarGuo/GSYVideoPlayer" target="_blank" rel="noopener">GSYVideoPlayer</a></li></ul></li></ul><h3 id="四-工具"><a href="#四-工具" class="headerlink" title="四.工具"></a>四.工具</h3><ul><li>github<ul><li><a href="https://gitee.com/docmirror/dev-sidecar" target="_blank" rel="noopener">github加速</a></li><li><a href="https://toolwa.com/github/" target="_blank" rel="noopener">github镜像</a></li></ul></li><li><a href="https://www.jikedaohang.com/index/" target="_blank" rel="noopener">极客导航</a></li><li><a href="https://github.com/JasonWu1111/Android-Review" target="_blank" rel="noopener">Android复习资料汇总</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ZXing使用笔记</title>
      <link href="2016/02/25/ZXing%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2016/02/25/ZXing%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-达到的效果"><a href="#一-达到的效果" class="headerlink" title="一.达到的效果"></a>一.达到的效果</h3><p><img src="img.gif" alt="IMG"></p><h3 id="二-使用到的依赖包："><a href="#二-使用到的依赖包：" class="headerlink" title="二.使用到的依赖包："></a>二.使用到的依赖包：</h3><p>此库为Zxing的精简版，可以很容易在csdn下载，就不过多做介绍；<br><img src="img1.png" alt="IMG"></p><h3 id="三-简单实现"><a href="#三-简单实现" class="headerlink" title="三.简单实现"></a>三.简单实现</h3><p>将此库导入项目到eclipse后，新建一个项目关联它，布局文件只需一个butoon，MainActivity代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.Even.demo_zing;</span><br><span class="line"> </span><br><span class="line">import com.zxing.activity.CaptureActivity;</span><br><span class="line"> </span><br><span class="line">public class MainActivity extends Activity implements OnClickListener&#123;</span><br><span class="line">private Button button1;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">button1 &#x3D; (Button) findViewById(R.id.button1);</span><br><span class="line">button1.setOnClickListener(this);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void onClick(View v) &#123;</span><br><span class="line">&#x2F;&#x2F;跳转至ZXing自带的扫码界面操作</span><br><span class="line">Intent intent&#x3D;new Intent(this,CaptureActivity.class);</span><br><span class="line">startActivityForResult(intent,0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">if(resultCode&#x3D;&#x3D;Activity.RESULT_OK)&#123;</span><br><span class="line">            &#x2F;&#x2F;重写result，获得扫描出来的内容：</span><br><span class="line">String result&#x3D;data.getExtras().getString(&quot;result&quot;);</span><br><span class="line">Toast.makeText(this, result, 1).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.CAMERA&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.VIBRATE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><br>清单配置文件中配置CaptureActivity<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:configChanges&#x3D;&quot;orientation|keyboardHidden&quot;</span><br><span class="line">            android:name&#x3D;&quot;com.zxing.activity.CaptureActivity&quot;</span><br><span class="line">            android:screenOrientation&#x3D;&quot;portrait&quot;</span><br><span class="line">            android:theme&#x3D;&quot;@android:style&#x2F;Theme.NoTitleBar.Fullscreen&quot;</span><br><span class="line">            android:windowSoftInputMode&#x3D;&quot;stateAlwaysHidden&quot; &gt;</span><br><span class="line">        &lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><br>这样就可以简单地实现扫描功能了！</p><h3 id="四-生成二维码-条形码"><a href="#四-生成二维码-条形码" class="headerlink" title="四.生成二维码/条形码"></a>四.生成二维码/条形码</h3><p>代码：<br><a href="https://github.com/itemuse/XTester/tree/master/zxing" target="_blank" rel="noopener">XTester-zxing</a><br>更新时间:23:59 2021/3/18<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;绘制二维码</span><br><span class="line">public Bitmap QrCode(String s) throws Exception&#123;</span><br><span class="line">    &#x2F;&#x2F;二维码QR_CODE</span><br><span class="line">    BarcodeFormat fomt&#x3D;BarcodeFormat.QR_CODE;</span><br><span class="line">    &#x2F;&#x2F;编码转换</span><br><span class="line">    String a&#x3D;new String(s.getBytes(&quot;utf-8&quot;),&quot;ISO-8859-1&quot;);</span><br><span class="line">    BitMatrix matrix&#x3D;new MultiFormatWriter().encode(a, fomt, width, height);</span><br><span class="line">    int width&#x3D;matrix.getWidth();</span><br><span class="line">    int height&#x3D;matrix.getHeight();</span><br><span class="line">    int[] pixel&#x3D;new int[width*height];</span><br><span class="line">    for(int i&#x3D;0;i&lt;height;i++)&#123;</span><br><span class="line">        for(int j&#x3D;0;j&lt;width;j++)&#123;</span><br><span class="line">            if(matrix.get(j,i))</span><br><span class="line">                pixel[i*width+j]&#x3D;0xff000000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Bitmap bmap&#x3D;Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);</span><br><span class="line">    bmap.setPixels(pixel, 0, width, 0, 0, width, height);</span><br><span class="line">    return bmap;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;绘制条形码</span><br><span class="line">public Bitmap BarCode(String ss) throws Exception&#123;</span><br><span class="line">    &#x2F;&#x2F;条形码CODE_128</span><br><span class="line">    BarcodeFormat fomt&#x3D;BarcodeFormat.CODE_128;</span><br><span class="line">    BitMatrix matrix&#x3D;new MultiFormatWriter().encode(ss, fomt, width, height);</span><br><span class="line">    int width&#x3D;matrix.getWidth();</span><br><span class="line">    int height&#x3D;matrix.getHeight();</span><br><span class="line">    int[] pixel&#x3D;new int[width*height];</span><br><span class="line">    for(int i&#x3D;0;i&lt;height;i++)&#123;</span><br><span class="line">        for(int j&#x3D;0;j&lt;width;j++)&#123;</span><br><span class="line">            if(matrix.get(j,i))</span><br><span class="line">                pixel[i*width+j]&#x3D;0xff000000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Bitmap bmapp&#x3D;Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);</span><br><span class="line">    bmapp.setPixels(pixel, 0, width, 0, 0, width, height);</span><br><span class="line">    return bmapp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>效果<br><img src="img3.gif" alt="IMG"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZXing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三元入水</title>
      <link href="2015/04/04/%E4%B8%89%E5%85%83%E5%85%A5%E6%B0%B4/"/>
      <url>2015/04/04/%E4%B8%89%E5%85%83%E5%85%A5%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<p><img src="20210406.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
